{"ast":null,"code":"import _slicedToArray from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import'./BuildList.css';import'./BuildListItem.css';import BuildListItem from'./BuildListItem';import'simplebar/dist/simplebar.min.css';import{db}from'../../utils/Firebase';import{AppContext}from'../../stores/Store';import BuildList from'./BuildList';import{PagedBuildListContext}from'../../stores/PagedBuildListStore';// accept a userid, if no id provided get all builds with page limits\n// if an id is passed, get the builds for this user only\nvar BuildListContainer=/*#__PURE__*/function(_Component){_inherits(BuildListContainer,_Component);var _super=_createSuper(BuildListContainer);function BuildListContainer(props){_classCallCheck(this,BuildListContainer);return _super.call(this,props);}//current page index and total pages from props\n//specify the type of build list... or make specific types of build lists...\n//filters based on properties: userid, careerid, patch\n_createClass(BuildListContainer,[{key:\"render\",value:function render(){var _this$context=_slicedToArray(this.context,2),state=_this$context[0],updateState=_this$context[1];if(!state.isDataLoaded){var buildList=[];var buildsQuery=db.collection(\"builds\");var filters=[{field:'userId',comparison:'==',value:'il853JiLs8VoxVPRU97p0kxp8Ks2'}];// this.props.filters; //this.props.filters; \nif(this.props.filters){filters=this.props.filters;}filters.forEach(function(filter){buildsQuery=buildsQuery.where(filter.field,filter.comparison,filter.value);});buildsQuery.limit(10).get().then(function(querySnapshot){querySnapshot.forEach(function(build){buildList.push({id:build.id,data:build.data()});});updateState({type:\"UPDATE_PAGED_DATA\",payload:{builds:buildList,lastDoc:querySnapshot.docs[querySnapshot.docs.length-1],currentPage:1,totalPages:Math.round(querySnapshot.size/10)+1}});});}return/*#__PURE__*/React.createElement(BuildList,{builds:state.builds});}}]);return BuildListContainer;}(Component);BuildListContainer.contextType=PagedBuildListContext;export default BuildListContainer;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildList/BuildListContainer.js"],"names":["React","Component","BuildListItem","db","AppContext","BuildList","PagedBuildListContext","BuildListContainer","props","context","state","updateState","isDataLoaded","buildList","buildsQuery","collection","filters","field","comparison","value","forEach","filter","where","limit","get","then","querySnapshot","build","push","id","data","type","payload","builds","lastDoc","docs","length","currentPage","totalPages","Math","round","size","contextType"],"mappings":"+sBAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,MAAO,iBAAP,CACA,MAAO,qBAAP,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAO,kCAAP,CACA,OAASC,EAAT,KAAmB,sBAAnB,CACA,OAASC,UAAT,KAA2B,oBAA3B,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,OAASC,qBAAT,KAAsC,kCAAtC,CAEA;AACA;GAEMC,CAAAA,kB,wHACJ,4BAAYC,KAAZ,CAAmB,kEACXA,KADW,EAGlB,CAGD;AAEA;AACA;sEAIS,kCACsB,KAAKC,OAD3B,IACAC,KADA,kBACOC,WADP,kBAIP,GAAI,CAACD,KAAK,CAACE,YAAX,CAAyB,CACvB,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CAEA,GAAIC,CAAAA,WAAW,CAAGX,EAAE,CAACY,UAAH,CAAc,QAAd,CAAlB,CAEA,GAAIC,CAAAA,OAAO,CAAG,CAAC,CAAEC,KAAK,CAAE,QAAT,CAAmBC,UAAU,CAAE,IAA/B,CAAqCC,KAAK,CAAE,8BAA5C,CAAD,CAAd,CAA8F;AAE9F,GAAI,KAAKX,KAAL,CAAWQ,OAAf,CAAwB,CACtBA,OAAO,CAAG,KAAKR,KAAL,CAAWQ,OAArB,CACD,CAEDA,OAAO,CAACI,OAAR,CAAgB,SAACC,MAAD,CAAY,CAC1BP,WAAW,CAAGA,WAAW,CAACQ,KAAZ,CAAkBD,MAAM,CAACJ,KAAzB,CAAgCI,MAAM,CAACH,UAAvC,CAAmDG,MAAM,CAACF,KAA1D,CAAd,CACD,CAFD,EAIAL,WAAW,CAACS,KAAZ,CAAkB,EAAlB,EAAsBC,GAAtB,GAA4BC,IAA5B,CAAiC,SAACC,aAAD,CAAmB,CAClDA,aAAa,CAACN,OAAd,CAAsB,SAACO,KAAD,CAAW,CAC/Bd,SAAS,CAACe,IAAV,CAAe,CAAEC,EAAE,CAAEF,KAAK,CAACE,EAAZ,CAAgBC,IAAI,CAAEH,KAAK,CAACG,IAAN,EAAtB,CAAf,EACD,CAFD,EAIAnB,WAAW,CAAC,CACVoB,IAAI,CAAE,mBADI,CAEVC,OAAO,CAAE,CACPC,MAAM,CAAEpB,SADD,CAEPqB,OAAO,CAAER,aAAa,CAACS,IAAd,CAAmBT,aAAa,CAACS,IAAd,CAAmBC,MAAnB,CAA0B,CAA7C,CAFF,CAGPC,WAAW,CAAE,CAHN,CAIPC,UAAU,CAAEC,IAAI,CAACC,KAAL,CAAWd,aAAa,CAACe,IAAd,CAAqB,EAAhC,EAAsC,CAJ3C,CAFC,CAAD,CAAX,CASD,CAdD,EAeD,CAED,mBACE,oBAAC,SAAD,EAAW,MAAM,CAAE/B,KAAK,CAACuB,MAAzB,EADF,CAGD,C,gCArD8BhC,S,EAA3BM,kB,CAYGmC,W,CAAcpC,qB,CA4CvB,cAAeC,CAAAA,kBAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport './BuildList.css';\r\nimport './BuildListItem.css';\r\nimport BuildListItem from './BuildListItem';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport { db } from '../../utils/Firebase';\r\nimport { AppContext } from '../../stores/Store';\r\nimport BuildList from './BuildList';\r\nimport { PagedBuildListContext } from '../../stores/PagedBuildListStore';\r\n\r\n// accept a userid, if no id provided get all builds with page limits\r\n// if an id is passed, get the builds for this user only\r\n\r\nclass BuildListContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n\r\n  //current page index and total pages from props\r\n\r\n  //specify the type of build list... or make specific types of build lists...\r\n  //filters based on properties: userid, careerid, patch\r\n\r\n  static contextType = PagedBuildListContext;\r\n\r\n  render() {\r\n    const [state, updateState] = this.context;\r\n\r\n\r\n    if (!state.isDataLoaded) {\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = db.collection(\"builds\");\r\n  \r\n      var filters = [{ field: 'userId', comparison: '==', value: 'il853JiLs8VoxVPRU97p0kxp8Ks2' }]; // this.props.filters; //this.props.filters; \r\n  \r\n      if (this.props.filters) {\r\n        filters = this.props.filters;\r\n      }\r\n  \r\n      filters.forEach((filter) => {\r\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n      });\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n  \r\n        updateState({\r\n          type: \"UPDATE_PAGED_DATA\", \r\n          payload: {\r\n            builds: buildList,\r\n            lastDoc: querySnapshot.docs[querySnapshot.docs.length-1],\r\n            currentPage: 1,\r\n            totalPages: Math.round(querySnapshot.size / 10) + 1\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    return (\r\n      <BuildList builds={state.builds}></BuildList>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BuildListContainer;"]},"metadata":{},"sourceType":"module"}