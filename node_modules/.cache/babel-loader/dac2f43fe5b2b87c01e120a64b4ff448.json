{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\components\\\\buildList\\\\BuildListContainer.js\";\nimport React, { Component } from 'react';\nimport './BuildList.css';\nimport './BuildListItem.css';\nimport BuildListItem from './BuildListItem';\nimport 'simplebar/dist/simplebar.min.css';\nimport BuildsListStore from '../../stores/BuildsListStore';\nimport { db } from '../../utils/Firebase';\nimport { AppContext } from '../../stores/Store';\nimport BuildList from './BuildList'; // accept a userid, if no id provided get all builds with page limits\n// if an id is passed, get the builds for this user only\n\nclass BuildListContainer extends Component {\n  constructor(props) {\n    super(props);\n    alert('rendering build list, current state of data load is');\n    this.state = {\n      builds: [],\n      isDataLoaded: false\n    };\n  } //current page index and total pages from props\n  //specify the type of build list... or make specific types of build lists...\n  //filters based on properties: userid, careerid, patch\n\n\n  render() {\n    //const [state, updateState] = this.context;\n    alert('is build list data loaded ' + this.state.isDataLoaded);\n\n    if (!this.state.isDataLoaded) {\n      let buildList = [];\n      let buildsQuery = db.collection(\"builds\");\n      var filters = [{\n        field: 'userId',\n        comparison: '==',\n        value: 'il853JiLs8VoxVPRU97p0kxp8Ks2'\n      }];\n\n      if (this.props.filters) {\n        filters = this.props.filters;\n      }\n\n      filters.forEach(filter => {\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\n      });\n      buildsQuery.limit(10).get().then(querySnapshot => {\n        querySnapshot.forEach(build => {\n          buildList.push({\n            id: build.id,\n            data: build.data()\n          });\n        });\n        this.setState({\n          builds: buildList,\n          isDataLoaded: true\n        });\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(BuildList, {\n      builds: this.state.builds,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nBuildListContainer.contextType = AppContext;\nexport default BuildListContainer;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildList/BuildListContainer.js"],"names":["React","Component","BuildListItem","BuildsListStore","db","AppContext","BuildList","BuildListContainer","constructor","props","alert","state","builds","isDataLoaded","render","buildList","buildsQuery","collection","filters","field","comparison","value","forEach","filter","where","limit","get","then","querySnapshot","build","push","id","data","setState","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,iBAAP;AACA,OAAO,qBAAP;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,kCAAP;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,SAASC,EAAT,QAAmB,sBAAnB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;AACA;;AAEA,MAAMC,kBAAN,SAAiCN,SAAjC,CAA2C;AACzCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEAC,IAAAA,KAAK,CAAC,qDAAD,CAAL;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,EADG;AAEXC,MAAAA,YAAY,EAAE;AAFH,KAAb;AAID,GAVwC,CAazC;AAEA;AACA;;;AAIAC,EAAAA,MAAM,GAAG;AACP;AAEAJ,IAAAA,KAAK,CAAC,+BAA+B,KAAKC,KAAL,CAAWE,YAA3C,CAAL;;AAEA,QAAI,CAAC,KAAKF,KAAL,CAAWE,YAAhB,EAA8B;AAC5B,UAAIE,SAAS,GAAG,EAAhB;AAEA,UAAIC,WAAW,GAAGZ,EAAE,CAACa,UAAH,CAAc,QAAd,CAAlB;AAEA,UAAIC,OAAO,GAAG,CAAC;AAAEC,QAAAA,KAAK,EAAE,QAAT;AAAmBC,QAAAA,UAAU,EAAE,IAA/B;AAAqCC,QAAAA,KAAK,EAAE;AAA5C,OAAD,CAAd;;AAEA,UAAI,KAAKZ,KAAL,CAAWS,OAAf,EAAwB;AACtBA,QAAAA,OAAO,GAAG,KAAKT,KAAL,CAAWS,OAArB;AACD;;AAEDA,MAAAA,OAAO,CAACI,OAAR,CAAiBC,MAAD,IAAY;AAC1BP,QAAAA,WAAW,GAAGA,WAAW,CAACQ,KAAZ,CAAkBD,MAAM,CAACJ,KAAzB,EAAgCI,MAAM,CAACH,UAAvC,EAAmDG,MAAM,CAACF,KAA1D,CAAd;AACD,OAFD;AAIAL,MAAAA,WAAW,CAACS,KAAZ,CAAkB,EAAlB,EAAsBC,GAAtB,GAA4BC,IAA5B,CAAkCC,aAAD,IAAmB;AAClDA,QAAAA,aAAa,CAACN,OAAd,CAAuBO,KAAD,IAAW;AAC/Bd,UAAAA,SAAS,CAACe,IAAV,CAAe;AAAEC,YAAAA,EAAE,EAAEF,KAAK,CAACE,EAAZ;AAAgBC,YAAAA,IAAI,EAAEH,KAAK,CAACG,IAAN;AAAtB,WAAf;AACD,SAFD;AAIA,aAAKC,QAAL,CAAc;AAACrB,UAAAA,MAAM,EAAEG,SAAT;AAAoBF,UAAAA,YAAY,EAAE;AAAlC,SAAd;AACD,OAND;AAOD;;AAED,wBACE,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAE,KAAKF,KAAL,CAAWC,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AApDwC;;AAArCL,kB,CAkBG2B,W,GAAc7B,U;AAqCvB,eAAeE,kBAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport './BuildList.css';\r\nimport './BuildListItem.css';\r\nimport BuildListItem from './BuildListItem';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport BuildsListStore from '../../stores/BuildsListStore';\r\nimport { db } from '../../utils/Firebase';\r\nimport { AppContext } from '../../stores/Store';\r\nimport BuildList from './BuildList';\r\n\r\n// accept a userid, if no id provided get all builds with page limits\r\n// if an id is passed, get the builds for this user only\r\n\r\nclass BuildListContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    alert('rendering build list, current state of data load is');\r\n\r\n    this.state = {\r\n      builds: [],\r\n      isDataLoaded: false\r\n    };\r\n  }\r\n\r\n\r\n  //current page index and total pages from props\r\n\r\n  //specify the type of build list... or make specific types of build lists...\r\n  //filters based on properties: userid, careerid, patch\r\n\r\n  static contextType = AppContext;\r\n\r\n  render() {\r\n    //const [state, updateState] = this.context;\r\n\r\n    alert('is build list data loaded ' + this.state.isDataLoaded);\r\n\r\n    if (!this.state.isDataLoaded) {\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = db.collection(\"builds\");\r\n  \r\n      var filters = [{ field: 'userId', comparison: '==', value: 'il853JiLs8VoxVPRU97p0kxp8Ks2' }];\r\n  \r\n      if (this.props.filters) {\r\n        filters = this.props.filters;\r\n      }\r\n  \r\n      filters.forEach((filter) => {\r\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n      });\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n  \r\n        this.setState({builds: buildList, isDataLoaded: true})\r\n      });\r\n    }\r\n\r\n    return (\r\n      <BuildList builds={this.state.builds}></BuildList>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BuildListContainer;"]},"metadata":{},"sourceType":"module"}