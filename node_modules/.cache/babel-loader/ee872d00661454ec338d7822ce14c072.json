{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\components\\\\buildList\\\\BuildsList.js\";\nimport React, { Component, useEffect, useRef } from 'react';\nimport './BuildList.css';\nimport './BuildListItem.css';\nimport BuildListItem from './BuildListItem';\nimport 'simplebar/dist/simplebar.min.css';\nimport BuildsListStore from '../../stores/PagedBuildListStore';\nimport { db } from '../../utils/Firebase';\nimport { AppContext } from '../../stores/Store';\nimport { DataHelper } from '../../utils/DataHelper';\nimport MissionSelect from '../select/MissionSelect';\nimport DifficultySelect from '../select/DifficultySelect';\nimport RoleSelect from '../select/RoleSelect';\nimport PotionSelect from '../select/PotionSelect';\nimport HeroSelect from '../heroSelect/HeroSelect'; // accept a userid, if no id provided get all builds with page limits\n// if an id is passed, get the builds for this user only\n\nclass BuildsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      builds: [],\n      buildsCount: 0,\n      firstBuildDoc: {},\n      lastBuildDoc: {},\n      currentPage: 1,\n      userId: 0,\n      username: '',\n      careers: [],\n      difficulties: [],\n      missions: [],\n      potions: [],\n      roles: [],\n      isDataLoaded: false,\n      isLoadingData: false,\n      filters: [],\n      pageItemLimit: 10\n    };\n  } //current page index and total pages from props\n  //specify the type of build list... or make specific types of build lists...\n  //filters based on properties: userid, careerid, patch\n  //static contextType = AppContext;\n  //accept props: \n  //filters\n  //current page number\n  //last build document\n\n\n  render() {\n    //get filters from props\n    //alert('rendering builds list');\n    console.log(this.state);\n\n    if (!this.state.isDataLoaded) {\n      this.loadBuildList();\n    }\n\n    if (this.state.isLoadingData) {\n      console.log('builds list data is still loading');\n      return /*#__PURE__*/React.createElement(\"div\", {\n        \"data-page-number\": 1,\n        \"data-last-page\": false,\n        className: \"build-list border-01 background-16\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        class: \"build-list-header header-underline\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      }, \"List\"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-page-number\": 1,\n      \"data-last-page\": false,\n      className: \"build-list border-01 background-16\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, this.renderFilters(this.state.filters), /*#__PURE__*/React.createElement(\"span\", {\n      class: \"build-list-header header-underline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, \"List\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"build-list-page-button\",\n      onClick: this.clickNextPage.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, \"Next Page\"), this.renderBuilds(this.state.builds));\n  }\n\n  loadBuildList() {\n    this.state.isLoadingData = true;\n    let buildList = [];\n    let buildsQuery = this.getBuildsQuery();\n    buildsQuery.limit(this.state.pageItemLimit).get().then(querySnapshot => {\n      querySnapshot.forEach(build => {\n        buildList.push({\n          id: build.id,\n          data: build.data()\n        });\n      });\n      this.setState({\n        builds: buildList,\n        firstBuildDoc: querySnapshot.docs[0],\n        lastBuildDoc: querySnapshot.docs[querySnapshot.docs.length - 1],\n        currentPage: 1,\n        buildsCount: querySnapshot.docs.length,\n        isDataLoaded: true,\n        isLoadingData: false\n      });\n    });\n  }\n\n  getPageCount() {\n    return Math.round(this.state.buildsCount / this.state.pageItemLimit) + 1;\n  }\n\n  clickNextPage() {\n    if (this.state.currentPage >= this.getPageCount()) {\n      return;\n    }\n\n    let buildsQuery = this.getBuildsQuery();\n    buildsQuery.orderBy('dateModified').startAfter(this.state.lastBuildDoc).limit(this.state.pageItemLimit).get().then(querySnapshot => {\n      var builds = [];\n      querySnapshot.forEach(build => {\n        builds.push({\n          id: build.id,\n          data: build.data()\n        });\n      });\n      var newPage = this.state.currentPage++;\n      this.setState({\n        builds: builds,\n        firstBuildDoc: querySnapshot.docs[0],\n        lastBuildDoc: querySnapshot.docs[querySnapshot.docs.length - 1],\n        currentPage: newPage,\n        buildsCount: querySnapshot.docs.length,\n        isDataLoaded: true,\n        isLoadingData: false\n      });\n    });\n  }\n\n  clickPreviousPage() {\n    if (this.state.currentPage <= 0) {\n      return;\n    }\n\n    let buildsQuery = this.getBuildsQuery();\n    buildsQuery.orderBy('dateModified').endBefore(this.state.lastBuildDoc).limitToLast(this.state.pageItemLimit).get().then(querySnapshot => {\n      var builds = [];\n      querySnapshot.forEach(build => {\n        builds.push({\n          id: build.id,\n          data: build.data()\n        });\n      });\n      var newPage = this.state.currentPage--;\n      this.setState({\n        builds: builds,\n        firstBuildDoc: querySnapshot.docs[0],\n        lastBuildDoc: querySnapshot.docs[querySnapshot.docs.length - 1],\n        currentPage: newPage,\n        buildsCount: querySnapshot.docs.length,\n        isDataLoaded: true,\n        isLoadingData: false\n      });\n    });\n  }\n\n  getBuildsQuery() {\n    let buildsQuery = db.collection(\"builds\");\n    let filters = [];\n\n    if (this.state.careers.length > 0) {\n      filters.push({\n        field: 'careerId',\n        comparison: 'in',\n        value: this.state.careers\n      });\n    }\n\n    if (this.props.filters) {\n      filters = this.props.filters;\n    }\n\n    filters.forEach(filter => {\n      buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\n    });\n    return buildsQuery;\n  }\n\n  updateHeroSelect(e) {\n    var careerId = parseInt(e.target.dataset.career);\n\n    if (e.target.classList.contains('selected')) {\n      var careers = this.state.careers;\n      const index = careers.indexOf(careerId);\n\n      if (index > -1) {\n        careers.splice(index, 1);\n      }\n\n      this.setState({\n        careers: careers,\n        isDataLoaded: false\n      });\n    } else {\n      var careers = this.state.careers;\n      careers.push(careerId);\n      this.setState({\n        careers: careers,\n        isDataLoaded: false\n      });\n    }\n  }\n\n  renderFilters(filters) {\n    let filtersHtml = []; //handlers get passed to change the state\n    //state changed refreshes page\n\n    filtersHtml.push( /*#__PURE__*/React.createElement(HeroSelect, {\n      selectedValues: this.state.careers,\n      onSelect: this.updateHeroSelect.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(DifficultySelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(MissionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(PotionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(RoleSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 22\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"filter-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 7\n      }\n    }, filtersHtml);\n  }\n\n  renderBuilds(builds) {\n    console.log('list of builds to render');\n    console.log(builds);\n\n    if (!builds || builds.length === 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 14\n        }\n      }, \"No builds in database.\");\n    }\n\n    var buildsHtml = [];\n    builds.forEach(build => {\n      buildsHtml.push( /*#__PURE__*/React.createElement(BuildListItem, {\n        key: build.id,\n        buildId: build.id,\n        buildData: build.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 23\n        }\n      }));\n    });\n    return buildsHtml;\n  }\n\n}\n\nexport default BuildsList;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildList/BuildsList.js"],"names":["React","Component","useEffect","useRef","BuildListItem","BuildsListStore","db","AppContext","DataHelper","MissionSelect","DifficultySelect","RoleSelect","PotionSelect","HeroSelect","BuildsList","constructor","props","state","builds","buildsCount","firstBuildDoc","lastBuildDoc","currentPage","userId","username","careers","difficulties","missions","potions","roles","isDataLoaded","isLoadingData","filters","pageItemLimit","render","console","log","loadBuildList","renderFilters","clickNextPage","bind","renderBuilds","buildList","buildsQuery","getBuildsQuery","limit","get","then","querySnapshot","forEach","build","push","id","data","setState","docs","length","getPageCount","Math","round","orderBy","startAfter","newPage","clickPreviousPage","endBefore","limitToLast","collection","field","comparison","value","filter","where","updateHeroSelect","e","careerId","parseInt","target","dataset","career","classList","contains","index","indexOf","splice","filtersHtml","buildsHtml"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useRef} from 'react';\r\nimport './BuildList.css';\r\nimport './BuildListItem.css';\r\nimport BuildListItem from './BuildListItem';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport BuildsListStore from '../../stores/PagedBuildListStore';\r\nimport { db } from '../../utils/Firebase';\r\nimport { AppContext } from '../../stores/Store';\r\nimport { DataHelper } from '../../utils/DataHelper';\r\nimport MissionSelect from '../select/MissionSelect';\r\nimport DifficultySelect from '../select/DifficultySelect';\r\nimport RoleSelect from '../select/RoleSelect';\r\nimport PotionSelect from '../select/PotionSelect';\r\nimport HeroSelect from '../heroSelect/HeroSelect';\r\n\r\n// accept a userid, if no id provided get all builds with page limits\r\n// if an id is passed, get the builds for this user only\r\n\r\nclass BuildsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n      builds: [],\r\n      buildsCount: 0,\r\n      firstBuildDoc: {},\r\n      lastBuildDoc: {},\r\n      currentPage: 1,\r\n      userId: 0,\r\n      username: '',\r\n      careers: [],\r\n      difficulties: [],\r\n      missions: [],\r\n      potions: [],\r\n      roles: [],\r\n      isDataLoaded: false,\r\n      isLoadingData: false,\r\n      filters: [],\r\n      pageItemLimit: 10\r\n    };\r\n  }\r\n\r\n  //current page index and total pages from props\r\n\r\n  //specify the type of build list... or make specific types of build lists...\r\n  //filters based on properties: userid, careerid, patch\r\n\r\n  //static contextType = AppContext;\r\n\r\n\r\n  //accept props: \r\n  //filters\r\n  //current page number\r\n  //last build document\r\n\r\n  render() {\r\n    //get filters from props\r\n    //alert('rendering builds list');\r\n    console.log(this.state);\r\n\r\n    if (!this.state.isDataLoaded) {\r\n\r\n      this.loadBuildList();\r\n    }\r\n\r\n    if (this.state.isLoadingData) {\r\n      console.log('builds list data is still loading');\r\n      \r\n      return (\r\n        <div data-page-number={1} data-last-page={false} className=\"build-list border-01 background-16\">\r\n          <span class=\"build-list-header header-underline\">List</span>\r\n          {/* <button className=\"build-list-page-button\" onClick={this.props.handleNextPage}>Next Page</button> */}\r\n        </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n          <div data-page-number={1} data-last-page={false} className=\"build-list border-01 background-16\">\r\n            {this.renderFilters(this.state.filters)}\r\n            <span class=\"build-list-header header-underline\">List</span>\r\n            <button className=\"build-list-page-button\" onClick={this.clickNextPage.bind(this)}>Next Page</button>\r\n            {this.renderBuilds(this.state.builds)}\r\n          </div>\r\n    );\r\n  }\r\n\r\n  loadBuildList() {\r\n    this.state.isLoadingData = true;\r\n  \r\n    let buildList = [];\r\n\r\n    let buildsQuery = this.getBuildsQuery();\r\n\r\n    buildsQuery.limit(this.state.pageItemLimit).get().then((querySnapshot) => {\r\n      querySnapshot.forEach((build) => {\r\n        buildList.push({ id: build.id, data: build.data()});\r\n      });\r\n\r\n      this.setState({builds: buildList, \r\n                    firstBuildDoc: querySnapshot.docs[0],\r\n                    lastBuildDoc: querySnapshot.docs[querySnapshot.docs.length-1], \r\n                    currentPage: 1,\r\n                    buildsCount: querySnapshot.docs.length,\r\n                    isDataLoaded: true, \r\n                    isLoadingData: false\r\n                  });\r\n    });\r\n  }\r\n\r\n  getPageCount() {\r\n    return Math.round(this.state.buildsCount / this.state.pageItemLimit) + 1;\r\n  }\r\n\r\n  clickNextPage() {\r\n    if (this.state.currentPage >= this.getPageCount()) {\r\n      return;\r\n    }\r\n\r\n    let buildsQuery = this.getBuildsQuery();\r\n\r\n    buildsQuery.orderBy('dateModified').startAfter(this.state.lastBuildDoc).limit(this.state.pageItemLimit).get().then((querySnapshot) => {\r\n      var builds = [];\r\n      querySnapshot.forEach((build) => {\r\n        builds.push({ id: build.id, data: build.data()});\r\n      });\r\n\r\n      var newPage = this.state.currentPage++;\r\n\r\n      this.setState({builds: builds, \r\n                    firstBuildDoc: querySnapshot.docs[0],\r\n                    lastBuildDoc: querySnapshot.docs[querySnapshot.docs.length-1], \r\n                    currentPage: newPage,\r\n                    buildsCount: querySnapshot.docs.length,\r\n                    isDataLoaded: true, \r\n                    isLoadingData: false\r\n                  });\r\n    });\r\n  }\r\n\r\n  clickPreviousPage() {\r\n    if (this.state.currentPage <= 0) {\r\n      return;\r\n    }\r\n\r\n    let buildsQuery = this.getBuildsQuery();\r\n\r\n    buildsQuery.orderBy('dateModified').endBefore(this.state.lastBuildDoc).limitToLast(this.state.pageItemLimit).get().then((querySnapshot) => {\r\n      var builds = [];\r\n      querySnapshot.forEach((build) => {\r\n        builds.push({ id: build.id, data: build.data()});\r\n      });\r\n\r\n      var newPage = this.state.currentPage--;      \r\n\r\n      this.setState({builds: builds, \r\n        firstBuildDoc: querySnapshot.docs[0],\r\n        lastBuildDoc: querySnapshot.docs[querySnapshot.docs.length-1], \r\n        currentPage: newPage,\r\n        buildsCount: querySnapshot.docs.length,\r\n        isDataLoaded: true, \r\n        isLoadingData: false\r\n      });\r\n    });\r\n  }\r\n\r\n  getBuildsQuery() {\r\n  \r\n    let buildsQuery = db.collection(\"builds\");\r\n\r\n    let filters = [];\r\n\r\n    if (this.state.careers.length > 0) {\r\n      filters.push({ field: 'careerId', comparison: 'in', value: this.state.careers })\r\n    }\r\n\r\n    if (this.props.filters) {\r\n      filters = this.props.filters;\r\n    }\r\n\r\n    filters.forEach((filter) => {\r\n      buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n    });\r\n\r\n    return buildsQuery;\r\n  }\r\n\r\n  updateHeroSelect(e) {\r\n    var careerId = parseInt(e.target.dataset.career);\r\n    if (e.target.classList.contains('selected')) {\r\n      var careers = this.state.careers;\r\n      const index = careers.indexOf(careerId);\r\n      if (index > -1) {\r\n        careers.splice(index, 1);\r\n      }\r\n      this.setState({ careers: careers, isDataLoaded: false })\r\n    } else {\r\n      var careers = this.state.careers;\r\n      careers.push(careerId);\r\n      this.setState({ careers: careers, isDataLoaded: false })\r\n    }\r\n  }\r\n\r\n  renderFilters(filters) {\r\n    let filtersHtml = [];\r\n\r\n    //handlers get passed to change the state\r\n    //state changed refreshes page\r\n    filtersHtml.push(<HeroSelect selectedValues={this.state.careers} onSelect={this.updateHeroSelect.bind(this)}></HeroSelect>);\r\n    filtersHtml.push(<DifficultySelect></DifficultySelect>);\r\n    filtersHtml.push(<MissionSelect></MissionSelect>);\r\n    filtersHtml.push(<PotionSelect></PotionSelect>);\r\n    filtersHtml.push(<RoleSelect></RoleSelect>);\r\n\r\n\r\n    return (\r\n      <div class=\"filter-container\">\r\n        {filtersHtml}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderBuilds(builds) {\r\n    console.log('list of builds to render');\r\n    console.log(builds);\r\n    if (!builds || builds.length === 0) {\r\n      return <p>No builds in database.</p>;\r\n    }\r\n    var buildsHtml = [];\r\n    builds.forEach((build) => {\r\n      buildsHtml.push(<BuildListItem key={build.id} buildId={build.id} buildData={build.data}></BuildListItem>)\r\n    });\r\n    return buildsHtml;\r\n  }\r\n}\r\n\r\nexport default BuildsList;"]},"metadata":{},"sourceType":"module"}