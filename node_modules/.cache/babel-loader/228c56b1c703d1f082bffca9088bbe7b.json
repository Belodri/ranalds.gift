{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\components\\\\buildList\\\\BuildsList.js\";\nimport React, { Component, useEffect, useRef } from 'react';\nimport './BuildList.css';\nimport './BuildListItem.css';\nimport BuildListItem from './BuildListItem';\nimport 'simplebar/dist/simplebar.min.css';\nimport BuildsListStore from '../../stores/PagedBuildListStore';\nimport { db } from '../../utils/Firebase';\nimport { AppContext } from '../../stores/Store';\nimport { DataHelper } from '../../utils/DataHelper';\nimport MissionSelect from '../select/MissionSelect';\nimport DifficultySelect from '../select/DifficultySelect';\nimport RoleSelect from '../select/RoleSelect';\nimport PotionSelect from '../select/PotionSelect';\nimport HeroSelect from '../heroSelect/HeroSelect'; // accept a userid, if no id provided get all builds with page limits\n// if an id is passed, get the builds for this user only\n\nclass BuildsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      builds: [],\n      lastBuildDoc: {},\n      currentPage: 1,\n      totalPageCount: 1,\n      careerId: 0,\n      userId: 0,\n      username: '',\n      careers: [],\n      difficulties: [],\n      missions: [],\n      potions: [],\n      roles: [],\n      isDataLoaded: false,\n      isLoadingData: false,\n      filters: []\n    };\n  } //current page index and total pages from props\n  //specify the type of build list... or make specific types of build lists...\n  //filters based on properties: userid, careerid, patch\n  //static contextType = AppContext;\n  //accept props: \n  //filters\n  //current page number\n  //last build document\n\n\n  render() {\n    //get filters from props\n    //alert('rendering builds list');\n    console.log(this.state);\n\n    if (!this.state.isDataLoaded) {\n      this.state.isLoadingData = true;\n      let buildList = [];\n      let buildsQuery = this.getBuildsQuery();\n      let filters = [];\n      buildsQuery.limit(10).get().then(querySnapshot => {\n        querySnapshot.forEach(build => {\n          buildList.push({\n            id: build.id,\n            data: build.data()\n          });\n        });\n        console.log('updating builds list state');\n        console.log(buildList);\n        this.setState({\n          builds: buildList,\n          careerId: this.props.careerId,\n          isDataLoaded: true,\n          isLoadingData: false\n        });\n      });\n    }\n\n    if (this.state.isLoadingData) {\n      console.log('builds list data is still loading');\n      return /*#__PURE__*/React.createElement(\"div\", {\n        \"data-page-number\": 1,\n        \"data-last-page\": false,\n        className: \"build-list border-01 background-16\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        class: \"build-list-header header-underline\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }, \"List\"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-page-number\": 1,\n      \"data-last-page\": false,\n      className: \"build-list border-01 background-16\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, this.renderFilters(this.state.filters), /*#__PURE__*/React.createElement(\"span\", {\n      class: \"build-list-header header-underline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, \"List\"), this.renderBuilds(this.state.builds));\n  }\n\n  getBuildsQuery() {\n    let buildsQuery = db.collection(\"builds\");\n    let filters = [];\n\n    if (this.state.careers.length > 0) {\n      this.state.careers.forEach(career => {\n        filters.push({\n          field: 'careerId',\n          comparison: '==',\n          value: career\n        });\n      });\n    }\n\n    if (this.props.filters) {\n      filters = this.props.filters;\n    }\n\n    filters.forEach(filter => {\n      buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\n    });\n    return buildsQuery;\n  }\n\n  updateHeroSelect(e) {\n    var careerId = parseInt(e.target.dataset.career);\n\n    if (e.target.classList.contains('selected')) {\n      var careers = this.state.careers;\n      const index = careers.indexOf(careerId);\n\n      if (index > -1) {\n        careers.splice(index, 1);\n      }\n\n      this.setState({\n        careers: careers\n      });\n    } else {\n      var careers = this.state.careers;\n      careers.push(careerId);\n      this.setState({\n        careers: careers\n      });\n    }\n  }\n\n  renderFilters(filters) {\n    let filtersHtml = []; //handlers get passed to change the state\n    //state changed refreshes page\n\n    filtersHtml.push( /*#__PURE__*/React.createElement(HeroSelect, {\n      selectedValues: this.state.careers,\n      onSelect: this.updateHeroSelect.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(DifficultySelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(MissionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(PotionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(RoleSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 22\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"filter-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, filtersHtml);\n  }\n\n  renderBuilds(builds) {\n    console.log('list of builds to render');\n    console.log(builds);\n\n    if (!builds || builds.length === 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 14\n        }\n      }, \"No builds in database.\");\n    }\n\n    var buildsHtml = [];\n    builds.forEach(build => {\n      buildsHtml.push( /*#__PURE__*/React.createElement(BuildListItem, {\n        key: build.id,\n        buildId: build.id,\n        buildData: build.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 23\n        }\n      }));\n    });\n    return buildsHtml;\n  }\n\n}\n\nexport default BuildsList;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildList/BuildsList.js"],"names":["React","Component","useEffect","useRef","BuildListItem","BuildsListStore","db","AppContext","DataHelper","MissionSelect","DifficultySelect","RoleSelect","PotionSelect","HeroSelect","BuildsList","constructor","props","state","builds","lastBuildDoc","currentPage","totalPageCount","careerId","userId","username","careers","difficulties","missions","potions","roles","isDataLoaded","isLoadingData","filters","render","console","log","buildList","buildsQuery","getBuildsQuery","limit","get","then","querySnapshot","forEach","build","push","id","data","setState","renderFilters","renderBuilds","collection","length","career","field","comparison","value","filter","where","updateHeroSelect","e","parseInt","target","dataset","classList","contains","index","indexOf","splice","filtersHtml","bind","buildsHtml"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useRef} from 'react';\r\nimport './BuildList.css';\r\nimport './BuildListItem.css';\r\nimport BuildListItem from './BuildListItem';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport BuildsListStore from '../../stores/PagedBuildListStore';\r\nimport { db } from '../../utils/Firebase';\r\nimport { AppContext } from '../../stores/Store';\r\nimport { DataHelper } from '../../utils/DataHelper';\r\nimport MissionSelect from '../select/MissionSelect';\r\nimport DifficultySelect from '../select/DifficultySelect';\r\nimport RoleSelect from '../select/RoleSelect';\r\nimport PotionSelect from '../select/PotionSelect';\r\nimport HeroSelect from '../heroSelect/HeroSelect';\r\n\r\n// accept a userid, if no id provided get all builds with page limits\r\n// if an id is passed, get the builds for this user only\r\n\r\nclass BuildsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n      builds: [],\r\n      lastBuildDoc: {},\r\n      currentPage: 1,\r\n      totalPageCount: 1,\r\n      careerId: 0,\r\n      userId: 0,\r\n      username: '',\r\n      careers: [],\r\n      difficulties: [],\r\n      missions: [],\r\n      potions: [],\r\n      roles: [],\r\n      isDataLoaded: false,\r\n      isLoadingData: false,\r\n      filters: []\r\n    };\r\n  }\r\n\r\n  //current page index and total pages from props\r\n\r\n  //specify the type of build list... or make specific types of build lists...\r\n  //filters based on properties: userid, careerid, patch\r\n\r\n  //static contextType = AppContext;\r\n\r\n\r\n  //accept props: \r\n  //filters\r\n  //current page number\r\n  //last build document\r\n\r\n  render() {\r\n    //get filters from props\r\n    //alert('rendering builds list');\r\n    console.log(this.state);\r\n\r\n    if (!this.state.isDataLoaded) {\r\n\r\n      this.state.isLoadingData = true;\r\n\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = this.getBuildsQuery();\r\n  \r\n      let filters = [];\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n        console.log('updating builds list state');\r\n        console.log(buildList);\r\n        this.setState({builds: buildList, careerId: this.props.careerId, isDataLoaded: true, isLoadingData: false})\r\n      });\r\n    }\r\n\r\n    if (this.state.isLoadingData) {\r\n      console.log('builds list data is still loading');\r\n      \r\n      return (\r\n        <div data-page-number={1} data-last-page={false} className=\"build-list border-01 background-16\">\r\n          <span class=\"build-list-header header-underline\">List</span>\r\n          {/* <button className=\"build-list-page-button\" onClick={this.props.handleNextPage}>Next Page</button> */}\r\n        </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n          <div data-page-number={1} data-last-page={false} className=\"build-list border-01 background-16\">\r\n            {this.renderFilters(this.state.filters)}\r\n            <span class=\"build-list-header header-underline\">List</span>\r\n            {/* <button className=\"build-list-page-button\" onClick={this.props.handleNextPage}>Next Page</button> */}\r\n            {this.renderBuilds(this.state.builds)}\r\n          </div>\r\n    );\r\n  }\r\n\r\n  getBuildsQuery() {\r\n  \r\n    let buildsQuery = db.collection(\"builds\");\r\n\r\n    let filters = [];\r\n\r\n    if (this.state.careers.length > 0) {\r\n      this.state.careers.forEach((career) => {\r\n        filters.push({ field: 'careerId', comparison: '==', value: career });\r\n      });\r\n    }\r\n\r\n    if (this.props.filters) {\r\n      filters = this.props.filters;\r\n    }\r\n\r\n    filters.forEach((filter) => {\r\n      buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n    });\r\n\r\n    return buildsQuery;\r\n  }\r\n\r\n  updateHeroSelect(e) {\r\n    var careerId = parseInt(e.target.dataset.career);\r\n    if (e.target.classList.contains('selected')) {\r\n      var careers = this.state.careers;\r\n      const index = careers.indexOf(careerId);\r\n      if (index > -1) {\r\n        careers.splice(index, 1);\r\n      }\r\n      this.setState({ careers: careers})\r\n    } else {\r\n      var careers = this.state.careers;\r\n      careers.push(careerId);\r\n      this.setState({ careers: careers})\r\n    }\r\n  }\r\n\r\n  renderFilters(filters) {\r\n    let filtersHtml = [];\r\n\r\n    //handlers get passed to change the state\r\n    //state changed refreshes page\r\n    filtersHtml.push(<HeroSelect selectedValues={this.state.careers} onSelect={this.updateHeroSelect.bind(this)}></HeroSelect>);\r\n    filtersHtml.push(<DifficultySelect></DifficultySelect>);\r\n    filtersHtml.push(<MissionSelect></MissionSelect>);\r\n    filtersHtml.push(<PotionSelect></PotionSelect>);\r\n    filtersHtml.push(<RoleSelect></RoleSelect>);\r\n\r\n\r\n    return (\r\n      <div class=\"filter-container\">\r\n        {filtersHtml}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderBuilds(builds) {\r\n    console.log('list of builds to render');\r\n    console.log(builds);\r\n    if (!builds || builds.length === 0) {\r\n      return <p>No builds in database.</p>;\r\n    }\r\n    var buildsHtml = [];\r\n    builds.forEach((build) => {\r\n      buildsHtml.push(<BuildListItem key={build.id} buildId={build.id} buildData={build.data}></BuildListItem>)\r\n    });\r\n    return buildsHtml;\r\n  }\r\n}\r\n\r\nexport default BuildsList;"]},"metadata":{},"sourceType":"module"}