{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\components\\\\buildList\\\\BuildList.js\";\nimport React, { Component } from 'react';\nimport './BuildList.css';\nimport './BuildListItem.css';\nimport BuildListItem from './BuildListItem';\nimport 'simplebar/dist/simplebar.min.css';\nimport BuildsListStore from '../../stores/BuildsListStore';\nimport { db } from '../../utils/Firebase';\nimport { AppContext } from '../../stores/Store'; // accept a userid, if no id provided get all builds with page limits\n// if an id is passed, get the builds for this user only\n\nclass BuildList extends Component {\n  constructor(props) {\n    super(props);\n    alert('rendering build list, current state of data load is');\n    /*     this.state = {\r\n          builds: [],\r\n          isDataLoaded: false\r\n        }; */\n  } //current page index and total pages from props\n  //specify the type of build list... or make specific types of build lists...\n  //filters based on properties: userid, careerid, patch\n  //static contextType = AppContext;\n\n\n  render() {\n    //const [state, updateState] = this.context;\n    alert('is build list data loaded ' + this.state.isDataLoaded);\n    /*     if (!this.state.isDataLoaded) {\r\n          let buildList = [];\r\n      \r\n          let buildsQuery = db.collection(\"builds\");\r\n      \r\n          var filters = [{ field: 'userId', comparison: '==', value: 'il853JiLs8VoxVPRU97p0kxp8Ks2' }];\r\n      \r\n          if (this.props.filters) {\r\n            filters = this.props.filters;\r\n          }\r\n      \r\n          filters.forEach((filter) => {\r\n            buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n          });\r\n      \r\n          buildsQuery.limit(10).get().then((querySnapshot) => {\r\n      \r\n            var builds = [];\r\n            querySnapshot.forEach((build) => {\r\n              buildList.push({ id: build.id, data: build.data()});\r\n            });\r\n      \r\n            this.setState({builds: buildList, isDataLoaded: true})\r\n          });\r\n        } */\n\n    /* \r\n     if (!this.state.isDataLoaded) {\r\n    this.setState({isDataLoaded: true})\r\n     } */\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"build-list border-01 background-16\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, this.renderBuilds(this.props.builds));\n  }\n\n  renderBuilds(builds) {\n    console.log('list of builds to render');\n    console.log(builds);\n\n    if (!builds || builds.length === 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 14\n        }\n      }, \"No \", this.props.name, \" in database.\");\n    }\n\n    var buildsHtml = [];\n    builds.forEach(build => {\n      console.log('build item');\n      console.log(build.data);\n      buildsHtml.push( /*#__PURE__*/React.createElement(BuildListItem, {\n        buildId: build.id,\n        buildData: build.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 23\n        }\n      }));\n    });\n    return buildsHtml;\n  }\n\n}\n\nexport default BuildList;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildList/BuildList.js"],"names":["React","Component","BuildListItem","BuildsListStore","db","AppContext","BuildList","constructor","props","alert","render","state","isDataLoaded","renderBuilds","builds","console","log","length","name","buildsHtml","forEach","build","data","push","id"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,iBAAP;AACA,OAAO,qBAAP;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,kCAAP;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,SAASC,EAAT,QAAmB,sBAAnB;AACA,SAASC,UAAT,QAA2B,oBAA3B,C,CAEA;AACA;;AAEA,MAAMC,SAAN,SAAwBL,SAAxB,CAAkC;AAChCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEAC,IAAAA,KAAK,CAAC,qDAAD,CAAL;AAEJ;;;;AAIG,GAV+B,CAahC;AAEA;AACA;AAEA;;;AAEAC,EAAAA,MAAM,GAAG;AACP;AAEAD,IAAAA,KAAK,CAAC,+BAA+B,KAAKE,KAAL,CAAWC,YAA3C,CAAL;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBI;;;;;AAKA,wBACM;AAAK,MAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKC,YAAL,CAAkB,KAAKL,KAAL,CAAWM,MAA7B,CADH,CADN;AAKD;;AAEDD,EAAAA,YAAY,CAACC,MAAD,EAAS;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,QAAI,CAACA,MAAD,IAAWA,MAAM,CAACG,MAAP,KAAkB,CAAjC,EAAoC;AAClC,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAO,KAAKT,KAAL,CAAWU,IAAlB,kBAAP;AACD;;AACD,QAAIC,UAAU,GAAG,EAAjB;AACAL,IAAAA,MAAM,CAACM,OAAP,CAAgBC,KAAD,IAAW;AACxBN,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAK,CAACC,IAAlB;AACAH,MAAAA,UAAU,CAACI,IAAX,eAAgB,oBAAC,aAAD;AAAe,QAAA,OAAO,EAAEF,KAAK,CAACG,EAA9B;AAAkC,QAAA,SAAS,EAAEH,KAAK,CAACC,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhB;AACD,KAJD;AAKA,WAAOH,UAAP;AACD;;AA3E+B;;AA8ElC,eAAeb,SAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport './BuildList.css';\r\nimport './BuildListItem.css';\r\nimport BuildListItem from './BuildListItem';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport BuildsListStore from '../../stores/BuildsListStore';\r\nimport { db } from '../../utils/Firebase';\r\nimport { AppContext } from '../../stores/Store';\r\n\r\n// accept a userid, if no id provided get all builds with page limits\r\n// if an id is passed, get the builds for this user only\r\n\r\nclass BuildList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    alert('rendering build list, current state of data load is');\r\n\r\n/*     this.state = {\r\n      builds: [],\r\n      isDataLoaded: false\r\n    }; */\r\n  }\r\n\r\n\r\n  //current page index and total pages from props\r\n\r\n  //specify the type of build list... or make specific types of build lists...\r\n  //filters based on properties: userid, careerid, patch\r\n\r\n  //static contextType = AppContext;\r\n\r\n  render() {\r\n    //const [state, updateState] = this.context;\r\n\r\n    alert('is build list data loaded ' + this.state.isDataLoaded);\r\n\r\n/*     if (!this.state.isDataLoaded) {\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = db.collection(\"builds\");\r\n  \r\n      var filters = [{ field: 'userId', comparison: '==', value: 'il853JiLs8VoxVPRU97p0kxp8Ks2' }];\r\n  \r\n      if (this.props.filters) {\r\n        filters = this.props.filters;\r\n      }\r\n  \r\n      filters.forEach((filter) => {\r\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n      });\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n  \r\n        var builds = [];\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n  \r\n        this.setState({builds: buildList, isDataLoaded: true})\r\n      });\r\n    } */\r\n    /* \r\n     if (!this.state.isDataLoaded) {\r\n    this.setState({isDataLoaded: true})\r\n     } */\r\n\r\n    return (\r\n          <div className=\"build-list border-01 background-16\">\r\n            {this.renderBuilds(this.props.builds)}\r\n          </div>\r\n    );\r\n  }\r\n\r\n  renderBuilds(builds) {\r\n    console.log('list of builds to render');\r\n    console.log(builds);\r\n    if (!builds || builds.length === 0) {\r\n      return <p>No {this.props.name} in database.</p>;\r\n    }\r\n    var buildsHtml = [];\r\n    builds.forEach((build) => {\r\n      console.log('build item');\r\n      console.log(build.data);\r\n      buildsHtml.push(<BuildListItem buildId={build.id} buildData={build.data}></BuildListItem>)\r\n    });\r\n    return buildsHtml;\r\n  }\r\n}\r\n\r\nexport default BuildList;"]},"metadata":{},"sourceType":"module"}