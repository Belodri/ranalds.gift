{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\ranalds.gift\\\\src\\\\components\\\\buildPage\\\\BuildInformation.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AppContext } from \"../../stores/Store\";\nimport { auth, db } from \"../../utils/Firebase\";\n\nclass BuildInformation extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  handleLikeBuild() {\n    const [state, updateState] = this.context;\n\n    if (!auth.currentUser) {\n      console.log('Login to like a build.');\n      return;\n    }\n\n    db.collection('builds').doc(state.buildId).get().then(build => {\n      console.log('liking build');\n\n      if (!build.exists) {\n        return;\n      }\n\n      if (!build.data().likes.includes(auth.currentUser.uid)) {\n        var likesList = build.data().likes;\n        likesList.push(auth.currentUser.uid);\n        build.ref.update({\n          likes: likesList\n        }).then(() => {\n          console.log('Successfully liked build');\n          updateState({\n            type: \"UPDATE_LIKE_STATE\",\n            payload: {\n              isLiked: true,\n              likes: likesList\n            }\n          });\n        }).catch(error => {\n          console.error('Error liking build:', error);\n        });\n      }\n    });\n    /* db.collection('buildLikes').where('userId', '==', auth.currentUser.uid).where('buildId', '==', state.buildId).get().then((querySnapshot) => {\r\n        if (querySnapshot.size > 0) {\r\n            console.log('Build like data found');\r\n            console.log(querySnapshot.docs[0].data());\r\n            var buildLikesDoc = querySnapshot.docs[0];\r\n            buildLikesDoc.ref.update({\r\n                likes: true\r\n            }).then(() => {\r\n                console.log('Successfully liked build'); \r\n                  updateState({\r\n                    type: \"UPDATE_LIKE_STATE\", \r\n                    payload: true\r\n                });\r\n            }).catch((error) => { \r\n                console.error('Error liking build:', error); \r\n            });\r\n        } else {\r\n            db.collection('buildLikes').add({\r\n                userId: auth.currentUser.uid,\r\n                buildId: state.buildId,\r\n                likes: true\r\n            }).then((buildLikeRef) => {\r\n                console.log('Successfully liked build');\r\n                  updateState({\r\n                    type: \"UPDATE_LIKE_STATE\", \r\n                    payload: true\r\n                });\r\n            }).catch((error) => {\r\n                console.error('Error liking build:', error);\r\n            })\r\n        }\r\n    }).catch((error) => {\r\n        console.error('Error getting data from BuildLikes table:', error);\r\n    }); */\n  }\n\n  handleUnlikeBuild() {\n    const [state, updateState] = this.context;\n\n    if (!auth.currentUser) {\n      console.log('Login to like a build.');\n      return;\n    }\n\n    db.collection('builds').doc(state.buildId).get().then(build => {\n      if (!build.exists) {\n        return;\n      }\n\n      if (build.data().likes.includes(auth.currentUser.uid)) {\n        var likesList = build.data().likes;\n        likesList.pop(auth.currentUser.uid);\n        build.ref.update({\n          likes: likesList\n        }).then(() => {\n          console.log('Successfully unliked build');\n          updateState({\n            type: \"UPDATE_LIKE_STATE\",\n            payload: {\n              isLiked: false,\n              likes: likesList\n            }\n          });\n        }).catch(error => {\n          console.error('Error liking build:', error);\n        });\n      }\n    });\n    /* db.collection('buildLikes').where('userId', '==', auth.currentUser.uid).where('buildId', '==', state.buildId).get().then((querySnapshot) => {\r\n        if (querySnapshot.size > 0) {\r\n            console.log('Build like data found');\r\n            console.log(querySnapshot.docs[0].data());\r\n            var buildLikesDoc = querySnapshot.docs[0];\r\n            buildLikesDoc.ref.update({\r\n                likes: false\r\n            }).then(() => {\r\n                console.log('Successfully unliked build'); \r\n                  updateState({\r\n                    type: \"UPDATE_LIKE_STATE\", \r\n                    payload: false\r\n                });\r\n            }).catch((error) => { \r\n                console.error('Error liking build:', error); \r\n            });\r\n        }\r\n    }).catch((error) => {\r\n        console.error('Error getting data from BuildLikes table:', error);\r\n    }); */\n  }\n\n  render() {\n    const [state, updateState] = this.context;\n    /*         db.collection('buildLikes').where('buildId', '==', state.buildId).where('likes', '==', true).get().then((querySnapshot) => {\r\n                if (querySnapshot.size >= 0) {\r\n                    if (querySnapshot.size !== state.likes) {\r\n                        updateState({\r\n                            type: \"UPDATE_LIKES\", \r\n                            payload: querySnapshot.size\r\n                        });\r\n                    }\r\n                }\r\n            }); */\n\n    auth.onAuthStateChanged(user => {\n      if (user !== null) {\n        var userLikesBuild = state.likes.includes(user.uid);\n\n        if (state.isLiked !== userLikesBuild) {\n          updateState({\n            type: \"UPDATE_LIKE_STATE\",\n            payload: {\n              isLiked: userLikesBuild,\n              likes: state.likes\n            }\n          });\n        }\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"build-information-container read-only-container border-02 background-18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 26\n      }\n    }, \"Created by\"), /*#__PURE__*/React.createElement(Link, {\n      to: '/user/' + state.userId + '/view',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 49\n      }\n    }, state.username)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 26\n      }\n    }, \"Patch\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 44\n      }\n    }, state.patch)), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"build-like-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"material-icons like-icon\",\n      onClick: this.handleLikeBuild.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }\n    }, \"star_border\"), /*#__PURE__*/React.createElement(\"i\", {\n      class: \"material-icons unlike-icon\",\n      onClick: this.handleUnlikeBuild.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 25\n      }\n    }, \"star\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    }, state.likes.length)));\n  }\n\n}\n\nBuildInformation.contextType = AppContext;\nexport default BuildInformation;","map":{"version":3,"sources":["C:/dev/ranalds.gift/src/components/buildPage/BuildInformation.js"],"names":["React","Component","Link","AppContext","auth","db","BuildInformation","constructor","props","handleLikeBuild","state","updateState","context","currentUser","console","log","collection","doc","buildId","get","then","build","exists","data","likes","includes","uid","likesList","push","ref","update","type","payload","isLiked","catch","error","handleUnlikeBuild","pop","render","onAuthStateChanged","user","userLikesBuild","userId","username","patch","bind","length","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppContext } from \"../../stores/Store\";\r\nimport { auth, db } from \"../../utils/Firebase\";\r\n\r\nclass BuildInformation extends Component {\r\n    static contextType = AppContext;\r\n    \r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n\r\n    handleLikeBuild() {\r\n        const [state, updateState] = this.context;\r\n\r\n        if (!auth.currentUser) {\r\n            console.log('Login to like a build.');\r\n            return;\r\n        }\r\n\r\n        db.collection('builds').doc(state.buildId).get().then((build) => {\r\n            console.log('liking build');\r\n            if (!build.exists) {\r\n                return;\r\n            }\r\n\r\n            if (!build.data().likes.includes(auth.currentUser.uid)) {\r\n                var likesList = build.data().likes;\r\n                likesList.push(auth.currentUser.uid)\r\n                build.ref.update({\r\n                    likes: likesList\r\n                }).then(() => {\r\n                    console.log('Successfully liked build'); \r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: {\r\n                            isLiked: true,\r\n                            likes: likesList\r\n                        }\r\n                    });\r\n                }).catch((error) => { \r\n                    console.error('Error liking build:', error); \r\n                });\r\n            }\r\n        });\r\n\r\n        /* db.collection('buildLikes').where('userId', '==', auth.currentUser.uid).where('buildId', '==', state.buildId).get().then((querySnapshot) => {\r\n            if (querySnapshot.size > 0) {\r\n                console.log('Build like data found');\r\n                console.log(querySnapshot.docs[0].data());\r\n                var buildLikesDoc = querySnapshot.docs[0];\r\n                buildLikesDoc.ref.update({\r\n                    likes: true\r\n                }).then(() => {\r\n                    console.log('Successfully liked build'); \r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: true\r\n                    });\r\n                }).catch((error) => { \r\n                    console.error('Error liking build:', error); \r\n                });\r\n            } else {\r\n                db.collection('buildLikes').add({\r\n                    userId: auth.currentUser.uid,\r\n                    buildId: state.buildId,\r\n                    likes: true\r\n                }).then((buildLikeRef) => {\r\n                    console.log('Successfully liked build');\r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: true\r\n                    });\r\n                }).catch((error) => {\r\n                    console.error('Error liking build:', error);\r\n                })\r\n            }\r\n        }).catch((error) => {\r\n            console.error('Error getting data from BuildLikes table:', error);\r\n        }); */\r\n    }\r\n\r\n    handleUnlikeBuild() {\r\n        const [state, updateState] = this.context;\r\n\r\n        if (!auth.currentUser) {\r\n            console.log('Login to like a build.');\r\n            return;\r\n        }\r\n        \r\n        db.collection('builds').doc(state.buildId).get().then((build) => {\r\n            if (!build.exists) {\r\n                return;\r\n            }\r\n\r\n            if (build.data().likes.includes(auth.currentUser.uid)) {\r\n                var likesList = build.data().likes;\r\n                likesList.pop(auth.currentUser.uid)\r\n                build.ref.update({\r\n                    likes: likesList\r\n                }).then(() => {\r\n                    console.log('Successfully unliked build'); \r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: {\r\n                            isLiked: false,\r\n                            likes: likesList\r\n                        }\r\n                    });\r\n                }).catch((error) => { \r\n                    console.error('Error liking build:', error); \r\n                });\r\n            }\r\n        });\r\n\r\n        /* db.collection('buildLikes').where('userId', '==', auth.currentUser.uid).where('buildId', '==', state.buildId).get().then((querySnapshot) => {\r\n            if (querySnapshot.size > 0) {\r\n                console.log('Build like data found');\r\n                console.log(querySnapshot.docs[0].data());\r\n                var buildLikesDoc = querySnapshot.docs[0];\r\n                buildLikesDoc.ref.update({\r\n                    likes: false\r\n                }).then(() => {\r\n                    console.log('Successfully unliked build'); \r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: false\r\n                    });\r\n                }).catch((error) => { \r\n                    console.error('Error liking build:', error); \r\n                });\r\n            }\r\n        }).catch((error) => {\r\n            console.error('Error getting data from BuildLikes table:', error);\r\n        }); */\r\n    }\r\n\r\n    render() {\r\n        const [state, updateState] = this.context;\r\n\r\n/*         db.collection('buildLikes').where('buildId', '==', state.buildId).where('likes', '==', true).get().then((querySnapshot) => {\r\n            if (querySnapshot.size >= 0) {\r\n                if (querySnapshot.size !== state.likes) {\r\n                    updateState({\r\n                        type: \"UPDATE_LIKES\", \r\n                        payload: querySnapshot.size\r\n                    });\r\n                }\r\n            }\r\n        }); */\r\n\r\n        auth.onAuthStateChanged((user) => {\r\n            if (user !== null) {\r\n                var userLikesBuild = state.likes.includes(user.uid);\r\n  \r\n                if (state.isLiked !== userLikesBuild) {\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\",\r\n                        payload: {\r\n                            isLiked: userLikesBuild,\r\n                            likes: state.likes\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n  \r\n        });\r\n\r\n        return (<div className=\"build-information-container read-only-container border-02 background-18\">\r\n                    <div><span>Created by</span><Link to={'/user/' + state.userId + '/view'}>{state.username}</Link></div>\r\n                    <div><span>Patch</span><span>{state.patch}</span></div>\r\n                    <div class=\"build-like-container\">\r\n                        <i class=\"material-icons like-icon\" onClick={this.handleLikeBuild.bind(this)}>star_border</i>\r\n                        <i class=\"material-icons unlike-icon\" onClick={this.handleUnlikeBuild.bind(this)}>star</i>\r\n                        <span>{state.likes.length}</span>\r\n                    </div>\r\n                </div>);\r\n    }\r\n}\r\n\r\nexport default BuildInformation;"]},"metadata":{},"sourceType":"module"}