{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\components\\\\users\\\\UserPageContainer.js\";\nimport React, { useContext } from 'react';\nimport { Route, Switch, useParams, useRouteMatch } from 'react-router';\nimport { UserViewContext } from '../../stores/UserViewStore';\nimport { auth, db } from '../../utils/Firebase';\nimport UserEditPage from './UserEditPage';\nimport UserPage from './UserPage';\nimport './UserPage.css';\n\nfunction UserPageContainer() {\n  const [state, updateState] = useContext(UserViewContext);\n  const {\n    path\n  } = useRouteMatch();\n  let params = useParams();\n  console.log('rendering user page for uid ' + params.userId);\n\n  if (state.userId !== params.userId) {\n    var userId = params.userId;\n    db.collection('users').doc(userId).get().then(doc => {\n      //console.log(\"Document data:\", doc.data());\n      updateState({\n        type: \"UPDATE_USER_INFO\",\n        payload: {\n          userId: userId,\n          username: doc.data().username,\n          steam: doc.data().steam,\n          twitch: doc.data().twitch,\n          dateCreated: doc.data().dateCreated,\n          dateModified: doc.data().dateModified\n        }\n      });\n      db.collection('builds').where(\"userId\", \"==\", userId).orderBy('dateModified').limit(10).get().then(querySnapshot => {\n        var userBuilds = [];\n        querySnapshot.forEach(build => {\n          userBuilds.push({\n            id: build.id,\n            data: build.data()\n          });\n        });\n        alert('user builds size ' + querySnapshot.size);\n        updateState({\n          type: \"UPDATE_USER_BUILDS\",\n          payload: {\n            builds: userBuilds,\n            lastDoc: querySnapshot.docs[querySnapshot.docs.length - 1],\n            currentPage: 1,\n            totalPages: querySnapshot.size / 10\n          }\n        });\n      });\n\n      if (auth.currentUser.uid === userId) {\n        console.log('Authed user is user page user');\n        db.collection('builds').where(\"likes\", \"array-contains\", userId).orderBy('dateModified').limit(10).get().then(querySnapshot => {\n          var likedBuilds = [];\n          querySnapshot.forEach(build => {\n            likedBuilds.push({\n              id: build.id,\n              data: build.data()\n            });\n          });\n          updateState({\n            type: \"UPDATE_LIKED_BUILDS\",\n            payload: {\n              builds: likedBuilds,\n              lastDoc: querySnapshot.docs[querySnapshot.docs.length - 1],\n              currentPage: 1,\n              totalPages: querySnapshot.size / 10\n            }\n          });\n        });\n      }\n    });\n    /*     auth.onAuthStateChanged((user) => {\r\n          if (user !== null) {        \r\n            console.log('Authed user detected, getting liked builds');\r\n    \r\n            if (user.uid === state.userId) {\r\n              console.log('Authed user is user page user');\r\n    \r\n              db.collection('builds').where(\"likes\", \"array-contains\", userId).get().then((querySnapshot) => {\r\n                var likedBuilds = [];\r\n                querySnapshot.forEach((build) => {\r\n                  likedBuilds.push({ id: build.id, data: build.data()});\r\n                });\r\n      \r\n                updateState({\r\n                  type: \"UPDATE_LIKED_BUILDS\", \r\n                  payload: likedBuilds\r\n                }); \r\n              });\r\n            }        \r\n          }\r\n        }); */\n  }\n\n  var root = document.getElementById('root');\n  root.dataset.pageName = 'userPage'; //console.log('params uid: ' + state.userId);\n\n  return /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: `${path}/view`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(UserPage, {\n    userId: state.userId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: `${path}/edit`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(UserEditPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default UserPageContainer;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/users/UserPageContainer.js"],"names":["React","useContext","Route","Switch","useParams","useRouteMatch","UserViewContext","auth","db","UserEditPage","UserPage","UserPageContainer","state","updateState","path","params","console","log","userId","collection","doc","get","then","type","payload","username","data","steam","twitch","dateCreated","dateModified","where","orderBy","limit","querySnapshot","userBuilds","forEach","build","push","id","alert","size","builds","lastDoc","docs","length","currentPage","totalPages","currentUser","uid","likedBuilds","root","document","getElementById","dataset","pageName"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport { Route, Switch, useParams, useRouteMatch } from 'react-router';\r\nimport { UserViewContext } from '../../stores/UserViewStore';\r\nimport { auth, db } from '../../utils/Firebase';\r\nimport UserEditPage from './UserEditPage';\r\nimport UserPage from './UserPage';\r\nimport './UserPage.css';\r\n\r\nfunction UserPageContainer() {\r\n  const [state, updateState] = useContext(UserViewContext);\r\n\r\n  const { path } = useRouteMatch();\r\n  let params = useParams();\r\n\r\n  console.log('rendering user page for uid ' + params.userId);\r\n\r\n  if (state.userId !== params.userId) {\r\n    var userId = params.userId;\r\n\r\n    db.collection('users').doc(userId).get().then((doc) => {\r\n      //console.log(\"Document data:\", doc.data());\r\n\r\n      updateState({\r\n        type: \"UPDATE_USER_INFO\", \r\n        payload: { \r\n          userId: userId,\r\n          username: doc.data().username,\r\n          steam: doc.data().steam,\r\n          twitch: doc.data().twitch,\r\n          dateCreated: doc.data().dateCreated,\r\n          dateModified: doc.data().dateModified\r\n        }\r\n      });\r\n      \r\n      db.collection('builds').where(\"userId\", \"==\", userId).orderBy('dateModified').limit(10).get().then((querySnapshot) => {\r\n        var userBuilds = [];\r\n        querySnapshot.forEach((build) => {\r\n          userBuilds.push({ id: build.id, data: build.data()});\r\n        });\r\n\r\n        alert('user builds size ' + querySnapshot.size);\r\n\r\n        updateState({\r\n          type: \"UPDATE_USER_BUILDS\", \r\n          payload: {\r\n            builds: userBuilds,\r\n            lastDoc: querySnapshot.docs[querySnapshot.docs.length-1],\r\n            currentPage: 1,\r\n            totalPages: querySnapshot.size / 10\r\n          }\r\n        }); \r\n      });\r\n\r\n      if (auth.currentUser.uid === userId) {\r\n        console.log('Authed user is user page user');\r\n\r\n        db.collection('builds').where(\"likes\", \"array-contains\", userId).orderBy('dateModified').limit(10).get().then((querySnapshot) => {\r\n          var likedBuilds = [];\r\n          querySnapshot.forEach((build) => {\r\n            likedBuilds.push({ id: build.id, data: build.data()});\r\n          });\r\n\r\n          updateState({\r\n            type: \"UPDATE_LIKED_BUILDS\", \r\n            payload: {\r\n              builds: likedBuilds,\r\n              lastDoc: querySnapshot.docs[querySnapshot.docs.length-1],\r\n              currentPage: 1,\r\n              totalPages: querySnapshot.size / 10\r\n            }\r\n          }); \r\n        });\r\n      }\r\n    });\r\n\r\n/*     auth.onAuthStateChanged((user) => {\r\n      if (user !== null) {        \r\n        console.log('Authed user detected, getting liked builds');\r\n\r\n        if (user.uid === state.userId) {\r\n          console.log('Authed user is user page user');\r\n\r\n          db.collection('builds').where(\"likes\", \"array-contains\", userId).get().then((querySnapshot) => {\r\n            var likedBuilds = [];\r\n            querySnapshot.forEach((build) => {\r\n              likedBuilds.push({ id: build.id, data: build.data()});\r\n            });\r\n  \r\n            updateState({\r\n              type: \"UPDATE_LIKED_BUILDS\", \r\n              payload: likedBuilds\r\n            }); \r\n          });\r\n        }        \r\n      }\r\n    }); */\r\n  }\r\n\r\n    var root = document.getElementById('root');\r\n    root.dataset.pageName = 'userPage';\r\n\r\n    //console.log('params uid: ' + state.userId);\r\n\r\n    return (\r\n      <Switch>\r\n        <Route path={`${path}/view`}>\r\n          <UserPage userId={state.userId}></UserPage>\r\n        </Route>\r\n        <Route path={`${path}/edit`}>\r\n          <UserEditPage></UserEditPage>\r\n        </Route>\r\n      </Switch>\r\n    );\r\n  }\r\n\r\nexport default UserPageContainer;"]},"metadata":{},"sourceType":"module"}