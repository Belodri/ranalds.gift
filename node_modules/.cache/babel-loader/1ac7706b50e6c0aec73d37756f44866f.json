{"ast":null,"code":"var buildSearchMethod = require('./buildSearchMethod.js');\n\nvar deprecate = require('./deprecate.js');\n\nvar deprecatedMessage = require('./deprecatedMessage.js');\n\nmodule.exports = IndexCore;\n/*\r\n* Index class constructor.\r\n* You should not use this method directly but use initIndex() function\r\n*/\n\nfunction IndexCore(algoliasearch, indexName) {\n  this.indexName = indexName;\n  this.as = algoliasearch;\n  this.typeAheadArgs = null;\n  this.typeAheadValueOption = null; // make sure every index instance has it's own cache\n\n  this.cache = {};\n}\n/*\r\n* Clear all queries in cache\r\n*/\n\n\nIndexCore.prototype.clearCache = function () {\n  this.cache = {};\n};\n/*\r\n* Search inside the index using XMLHttpRequest request (Using a POST query to\r\n* minimize number of OPTIONS queries: Cross-Origin Resource Sharing).\r\n*\r\n* @param {string} [query] the full text query\r\n* @param {object} [args] (optional) if set, contains an object with query parameters:\r\n* - page: (integer) Pagination parameter used to select the page to retrieve.\r\n*                   Page is zero-based and defaults to 0. Thus,\r\n*                   to retrieve the 10th page you need to set page=9\r\n* - hitsPerPage: (integer) Pagination parameter used to select the number of hits per page. Defaults to 20.\r\n* - attributesToRetrieve: a string that contains the list of object attributes\r\n* you want to retrieve (let you minimize the answer size).\r\n*   Attributes are separated with a comma (for example \"name,address\").\r\n*   You can also use an array (for example [\"name\",\"address\"]).\r\n*   By default, all attributes are retrieved. You can also use '*' to retrieve all\r\n*   values when an attributesToRetrieve setting is specified for your index.\r\n* - attributesToHighlight: a string that contains the list of attributes you\r\n*   want to highlight according to the query.\r\n*   Attributes are separated by a comma. You can also use an array (for example [\"name\",\"address\"]).\r\n*   If an attribute has no match for the query, the raw value is returned.\r\n*   By default all indexed text attributes are highlighted.\r\n*   You can use `*` if you want to highlight all textual attributes.\r\n*   Numerical attributes are not highlighted.\r\n*   A matchLevel is returned for each highlighted attribute and can contain:\r\n*      - full: if all the query terms were found in the attribute,\r\n*      - partial: if only some of the query terms were found,\r\n*      - none: if none of the query terms were found.\r\n* - attributesToSnippet: a string that contains the list of attributes to snippet alongside\r\n* the number of words to return (syntax is `attributeName:nbWords`).\r\n*    Attributes are separated by a comma (Example: attributesToSnippet=name:10,content:10).\r\n*    You can also use an array (Example: attributesToSnippet: ['name:10','content:10']).\r\n*    By default no snippet is computed.\r\n* - minWordSizefor1Typo: the minimum number of characters in a query word to accept one typo in this word.\r\n* Defaults to 3.\r\n* - minWordSizefor2Typos: the minimum number of characters in a query word\r\n* to accept two typos in this word. Defaults to 7.\r\n* - getRankingInfo: if set to 1, the result hits will contain ranking\r\n* information in _rankingInfo attribute.\r\n* - aroundLatLng: search for entries around a given\r\n* latitude/longitude (specified as two floats separated by a comma).\r\n*   For example aroundLatLng=47.316669,5.016670).\r\n*   You can specify the maximum distance in meters with the aroundRadius parameter (in meters)\r\n*   and the precision for ranking with aroundPrecision\r\n*   (for example if you set aroundPrecision=100, two objects that are distant of\r\n*   less than 100m will be considered as identical for \"geo\" ranking parameter).\r\n*   At indexing, you should specify geoloc of an object with the _geoloc attribute\r\n*   (in the form {\"_geoloc\":{\"lat\":48.853409, \"lng\":2.348800}})\r\n* - insideBoundingBox: search entries inside a given area defined by the two extreme points\r\n* of a rectangle (defined by 4 floats: p1Lat,p1Lng,p2Lat,p2Lng).\r\n*   For example insideBoundingBox=47.3165,4.9665,47.3424,5.0201).\r\n*   At indexing, you should specify geoloc of an object with the _geoloc attribute\r\n*   (in the form {\"_geoloc\":{\"lat\":48.853409, \"lng\":2.348800}})\r\n* - numericFilters: a string that contains the list of numeric filters you want to\r\n* apply separated by a comma.\r\n*   The syntax of one filter is `attributeName` followed by `operand` followed by `value`.\r\n*   Supported operands are `<`, `<=`, `=`, `>` and `>=`.\r\n*   You can have multiple conditions on one attribute like for example numericFilters=price>100,price<1000.\r\n*   You can also use an array (for example numericFilters: [\"price>100\",\"price<1000\"]).\r\n* - tagFilters: filter the query by a set of tags. You can AND tags by separating them by commas.\r\n*   To OR tags, you must add parentheses. For example, tags=tag1,(tag2,tag3) means tag1 AND (tag2 OR tag3).\r\n*   You can also use an array, for example tagFilters: [\"tag1\",[\"tag2\",\"tag3\"]]\r\n*   means tag1 AND (tag2 OR tag3).\r\n*   At indexing, tags should be added in the _tags** attribute\r\n*   of objects (for example {\"_tags\":[\"tag1\",\"tag2\"]}).\r\n* - facetFilters: filter the query by a list of facets.\r\n*   Facets are separated by commas and each facet is encoded as `attributeName:value`.\r\n*   For example: `facetFilters=category:Book,author:John%20Doe`.\r\n*   You can also use an array (for example `[\"category:Book\",\"author:John%20Doe\"]`).\r\n* - facets: List of object attributes that you want to use for faceting.\r\n*   Comma separated list: `\"category,author\"` or array `['category','author']`\r\n*   Only attributes that have been added in **attributesForFaceting** index setting\r\n*   can be used in this parameter.\r\n*   You can also use `*` to perform faceting on all attributes specified in **attributesForFaceting**.\r\n* - queryType: select how the query words are interpreted, it can be one of the following value:\r\n*    - prefixAll: all query words are interpreted as prefixes,\r\n*    - prefixLast: only the last word is interpreted as a prefix (default behavior),\r\n*    - prefixNone: no query word is interpreted as a prefix. This option is not recommended.\r\n* - optionalWords: a string that contains the list of words that should\r\n* be considered as optional when found in the query.\r\n*   Comma separated and array are accepted.\r\n* - distinct: If set to 1, enable the distinct feature (disabled by default)\r\n* if the attributeForDistinct index setting is set.\r\n*   This feature is similar to the SQL \"distinct\" keyword: when enabled\r\n*   in a query with the distinct=1 parameter,\r\n*   all hits containing a duplicate value for the attributeForDistinct attribute are removed from results.\r\n*   For example, if the chosen attribute is show_name and several hits have\r\n*   the same value for show_name, then only the best\r\n*   one is kept and others are removed.\r\n* - restrictSearchableAttributes: List of attributes you want to use for\r\n* textual search (must be a subset of the attributesToIndex index setting)\r\n* either comma separated or as an array\r\n* @param {function} [callback] the result callback called with two arguments:\r\n*  error: null or Error('message'). If false, the content contains the error.\r\n*  content: the server answer that contains the list of results.\r\n*/\n\n\nIndexCore.prototype.search = buildSearchMethod('query');\n/*\r\n* -- BETA --\r\n* Search a record similar to the query inside the index using XMLHttpRequest request (Using a POST query to\r\n* minimize number of OPTIONS queries: Cross-Origin Resource Sharing).\r\n*\r\n* @param {string} [query] the similar query\r\n* @param {object} [args] (optional) if set, contains an object with query parameters.\r\n*   All search parameters are supported (see search function), restrictSearchableAttributes and facetFilters\r\n*   are the two most useful to restrict the similar results and get more relevant content\r\n*/\n\nIndexCore.prototype.similarSearch = deprecate(buildSearchMethod('similarQuery'), deprecatedMessage('index.similarSearch(query[, callback])', 'index.search({ similarQuery: query }[, callback])'));\n/*\r\n* Browse index content. The response content will have a `cursor` property that you can use\r\n* to browse subsequent pages for this query. Use `index.browseFrom(cursor)` when you want.\r\n*\r\n* @param {string} query - The full text query\r\n* @param {Object} [queryParameters] - Any search query parameter\r\n* @param {Function} [callback] - The result callback called with two arguments\r\n*   error: null or Error('message')\r\n*   content: the server answer with the browse result\r\n* @return {Promise|undefined} Returns a promise if no callback given\r\n* @example\r\n* index.browse('cool songs', {\r\n*   tagFilters: 'public,comments',\r\n*   hitsPerPage: 500\r\n* }, callback);\r\n* @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}\r\n*/\n\nIndexCore.prototype.browse = function (query, queryParameters, callback) {\n  var merge = require('./merge.js');\n\n  var indexObj = this;\n  var page;\n  var hitsPerPage; // we check variadic calls that are not the one defined\n  // .browse()/.browse(fn)\n  // => page = 0\n\n  if (arguments.length === 0 || arguments.length === 1 && typeof arguments[0] === 'function') {\n    page = 0;\n    callback = arguments[0];\n    query = undefined;\n  } else if (typeof arguments[0] === 'number') {\n    // .browse(2)/.browse(2, 10)/.browse(2, fn)/.browse(2, 10, fn)\n    page = arguments[0];\n\n    if (typeof arguments[1] === 'number') {\n      hitsPerPage = arguments[1];\n    } else if (typeof arguments[1] === 'function') {\n      callback = arguments[1];\n      hitsPerPage = undefined;\n    }\n\n    query = undefined;\n    queryParameters = undefined;\n  } else if (typeof arguments[0] === 'object') {\n    // .browse(queryParameters)/.browse(queryParameters, cb)\n    if (typeof arguments[1] === 'function') {\n      callback = arguments[1];\n    }\n\n    queryParameters = arguments[0];\n    query = undefined;\n  } else if (typeof arguments[0] === 'string' && typeof arguments[1] === 'function') {\n    // .browse(query, cb)\n    callback = arguments[1];\n    queryParameters = undefined;\n  } // otherwise it's a .browse(query)/.browse(query, queryParameters)/.browse(query, queryParameters, cb)\n  // get search query parameters combining various possible calls\n  // to .browse();\n\n\n  queryParameters = merge({}, queryParameters || {}, {\n    page: page,\n    hitsPerPage: hitsPerPage,\n    query: query\n  });\n\n  var params = this.as._getSearchParams(queryParameters, '');\n\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/browse',\n    body: {\n      params: params\n    },\n    hostType: 'read',\n    callback: callback\n  });\n};\n/*\r\n* Continue browsing from a previous position (cursor), obtained via a call to `.browse()`.\r\n*\r\n* @param {string} query - The full text query\r\n* @param {Object} [queryParameters] - Any search query parameter\r\n* @param {Function} [callback] - The result callback called with two arguments\r\n*   error: null or Error('message')\r\n*   content: the server answer with the browse result\r\n* @return {Promise|undefined} Returns a promise if no callback given\r\n* @example\r\n* index.browseFrom('14lkfsakl32', callback);\r\n* @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}\r\n*/\n\n\nIndexCore.prototype.browseFrom = function (cursor, callback) {\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/browse',\n    body: {\n      cursor: cursor\n    },\n    hostType: 'read',\n    callback: callback\n  });\n};\n/*\r\n* Search for facet values\r\n* https://www.algolia.com/doc/rest-api/search#search-for-facet-values\r\n*\r\n* @param {string} params.facetName Facet name, name of the attribute to search for values in.\r\n* Must be declared as a facet\r\n* @param {string} params.facetQuery Query for the facet search\r\n* @param {string} [params.*] Any search parameter of Algolia,\r\n* see https://www.algolia.com/doc/api-client/javascript/search#search-parameters\r\n* Pagination is not supported. The page and hitsPerPage parameters will be ignored.\r\n* @param callback (optional)\r\n*/\n\n\nIndexCore.prototype.searchForFacetValues = function (params, callback) {\n  var clone = require('./clone.js');\n\n  var omit = require('./omit.js');\n\n  var usage = 'Usage: index.searchForFacetValues({facetName, facetQuery, ...params}[, callback])';\n\n  if (params.facetName === undefined || params.facetQuery === undefined) {\n    throw new Error(usage);\n  }\n\n  var facetName = params.facetName;\n  var filteredParams = omit(clone(params), function (keyName) {\n    return keyName === 'facetName';\n  });\n\n  var searchParameters = this.as._getSearchParams(filteredParams, '');\n\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/facets/' + encodeURIComponent(facetName) + '/query',\n    hostType: 'read',\n    body: {\n      params: searchParameters\n    },\n    callback: callback\n  });\n};\n\nIndexCore.prototype.searchFacet = deprecate(function (params, callback) {\n  return this.searchForFacetValues(params, callback);\n}, deprecatedMessage('index.searchFacet(params[, callback])', 'index.searchForFacetValues(params[, callback])'));\n\nIndexCore.prototype._search = function (params, url, callback, additionalUA) {\n  return this.as._jsonRequest({\n    cache: this.cache,\n    method: 'POST',\n    url: url || '/1/indexes/' + encodeURIComponent(this.indexName) + '/query',\n    body: {\n      params: params\n    },\n    hostType: 'read',\n    fallback: {\n      method: 'GET',\n      url: '/1/indexes/' + encodeURIComponent(this.indexName),\n      body: {\n        params: params\n      }\n    },\n    callback: callback,\n    additionalUA: additionalUA\n  });\n};\n/*\r\n* Get an object from this index\r\n*\r\n* @param objectID the unique identifier of the object to retrieve\r\n* @param attrs (optional) if set, contains the array of attribute names to retrieve\r\n* @param callback (optional) the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the object to retrieve or the error message if a failure occurred\r\n*/\n\n\nIndexCore.prototype.getObject = function (objectID, attrs, callback) {\n  var indexObj = this;\n\n  if (arguments.length === 1 || typeof attrs === 'function') {\n    callback = attrs;\n    attrs = undefined;\n  }\n\n  var params = '';\n\n  if (attrs !== undefined) {\n    params = '?attributes=';\n\n    for (var i = 0; i < attrs.length; ++i) {\n      if (i !== 0) {\n        params += ',';\n      }\n\n      params += attrs[i];\n    }\n  }\n\n  return this.as._jsonRequest({\n    method: 'GET',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(objectID) + params,\n    hostType: 'read',\n    callback: callback\n  });\n};\n/*\r\n* Get several objects from this index\r\n*\r\n* @param objectIDs the array of unique identifier of objects to retrieve\r\n*/\n\n\nIndexCore.prototype.getObjects = function (objectIDs, attributesToRetrieve, callback) {\n  var isArray = require('isarray');\n\n  var map = require('./map.js');\n\n  var usage = 'Usage: index.getObjects(arrayOfObjectIDs[, callback])';\n\n  if (!isArray(objectIDs)) {\n    throw new Error(usage);\n  }\n\n  var indexObj = this;\n\n  if (arguments.length === 1 || typeof attributesToRetrieve === 'function') {\n    callback = attributesToRetrieve;\n    attributesToRetrieve = undefined;\n  }\n\n  var body = {\n    requests: map(objectIDs, function prepareRequest(objectID) {\n      var request = {\n        indexName: indexObj.indexName,\n        objectID: objectID\n      };\n\n      if (attributesToRetrieve) {\n        request.attributesToRetrieve = attributesToRetrieve.join(',');\n      }\n\n      return request;\n    })\n  };\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/*/objects',\n    hostType: 'read',\n    body: body,\n    callback: callback\n  });\n};\n\nIndexCore.prototype.as = null;\nIndexCore.prototype.indexName = null;\nIndexCore.prototype.typeAheadArgs = null;\nIndexCore.prototype.typeAheadValueOption = null;","map":{"version":3,"sources":["C:/dev/New folder/rg/node_modules/algoliasearch/src/IndexCore.js"],"names":["buildSearchMethod","require","deprecate","deprecatedMessage","module","exports","IndexCore","algoliasearch","indexName","as","typeAheadArgs","typeAheadValueOption","cache","prototype","clearCache","search","similarSearch","browse","query","queryParameters","callback","merge","indexObj","page","hitsPerPage","arguments","length","undefined","params","_getSearchParams","_jsonRequest","method","url","encodeURIComponent","body","hostType","browseFrom","cursor","searchForFacetValues","clone","omit","usage","facetName","facetQuery","Error","filteredParams","keyName","searchParameters","searchFacet","_search","additionalUA","fallback","getObject","objectID","attrs","i","getObjects","objectIDs","attributesToRetrieve","isArray","map","requests","prepareRequest","request","join"],"mappings":"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","sourcesContent":["var buildSearchMethod = require('./buildSearchMethod.js');\r\nvar deprecate = require('./deprecate.js');\r\nvar deprecatedMessage = require('./deprecatedMessage.js');\r\n\r\nmodule.exports = IndexCore;\r\n\r\n/*\r\n* Index class constructor.\r\n* You should not use this method directly but use initIndex() function\r\n*/\r\nfunction IndexCore(algoliasearch, indexName) {\r\n  this.indexName = indexName;\r\n  this.as = algoliasearch;\r\n  this.typeAheadArgs = null;\r\n  this.typeAheadValueOption = null;\r\n\r\n  // make sure every index instance has it's own cache\r\n  this.cache = {};\r\n}\r\n\r\n/*\r\n* Clear all queries in cache\r\n*/\r\nIndexCore.prototype.clearCache = function() {\r\n  this.cache = {};\r\n};\r\n\r\n/*\r\n* Search inside the index using XMLHttpRequest request (Using a POST query to\r\n* minimize number of OPTIONS queries: Cross-Origin Resource Sharing).\r\n*\r\n* @param {string} [query] the full text query\r\n* @param {object} [args] (optional) if set, contains an object with query parameters:\r\n* - page: (integer) Pagination parameter used to select the page to retrieve.\r\n*                   Page is zero-based and defaults to 0. Thus,\r\n*                   to retrieve the 10th page you need to set page=9\r\n* - hitsPerPage: (integer) Pagination parameter used to select the number of hits per page. Defaults to 20.\r\n* - attributesToRetrieve: a string that contains the list of object attributes\r\n* you want to retrieve (let you minimize the answer size).\r\n*   Attributes are separated with a comma (for example \"name,address\").\r\n*   You can also use an array (for example [\"name\",\"address\"]).\r\n*   By default, all attributes are retrieved. You can also use '*' to retrieve all\r\n*   values when an attributesToRetrieve setting is specified for your index.\r\n* - attributesToHighlight: a string that contains the list of attributes you\r\n*   want to highlight according to the query.\r\n*   Attributes are separated by a comma. You can also use an array (for example [\"name\",\"address\"]).\r\n*   If an attribute has no match for the query, the raw value is returned.\r\n*   By default all indexed text attributes are highlighted.\r\n*   You can use `*` if you want to highlight all textual attributes.\r\n*   Numerical attributes are not highlighted.\r\n*   A matchLevel is returned for each highlighted attribute and can contain:\r\n*      - full: if all the query terms were found in the attribute,\r\n*      - partial: if only some of the query terms were found,\r\n*      - none: if none of the query terms were found.\r\n* - attributesToSnippet: a string that contains the list of attributes to snippet alongside\r\n* the number of words to return (syntax is `attributeName:nbWords`).\r\n*    Attributes are separated by a comma (Example: attributesToSnippet=name:10,content:10).\r\n*    You can also use an array (Example: attributesToSnippet: ['name:10','content:10']).\r\n*    By default no snippet is computed.\r\n* - minWordSizefor1Typo: the minimum number of characters in a query word to accept one typo in this word.\r\n* Defaults to 3.\r\n* - minWordSizefor2Typos: the minimum number of characters in a query word\r\n* to accept two typos in this word. Defaults to 7.\r\n* - getRankingInfo: if set to 1, the result hits will contain ranking\r\n* information in _rankingInfo attribute.\r\n* - aroundLatLng: search for entries around a given\r\n* latitude/longitude (specified as two floats separated by a comma).\r\n*   For example aroundLatLng=47.316669,5.016670).\r\n*   You can specify the maximum distance in meters with the aroundRadius parameter (in meters)\r\n*   and the precision for ranking with aroundPrecision\r\n*   (for example if you set aroundPrecision=100, two objects that are distant of\r\n*   less than 100m will be considered as identical for \"geo\" ranking parameter).\r\n*   At indexing, you should specify geoloc of an object with the _geoloc attribute\r\n*   (in the form {\"_geoloc\":{\"lat\":48.853409, \"lng\":2.348800}})\r\n* - insideBoundingBox: search entries inside a given area defined by the two extreme points\r\n* of a rectangle (defined by 4 floats: p1Lat,p1Lng,p2Lat,p2Lng).\r\n*   For example insideBoundingBox=47.3165,4.9665,47.3424,5.0201).\r\n*   At indexing, you should specify geoloc of an object with the _geoloc attribute\r\n*   (in the form {\"_geoloc\":{\"lat\":48.853409, \"lng\":2.348800}})\r\n* - numericFilters: a string that contains the list of numeric filters you want to\r\n* apply separated by a comma.\r\n*   The syntax of one filter is `attributeName` followed by `operand` followed by `value`.\r\n*   Supported operands are `<`, `<=`, `=`, `>` and `>=`.\r\n*   You can have multiple conditions on one attribute like for example numericFilters=price>100,price<1000.\r\n*   You can also use an array (for example numericFilters: [\"price>100\",\"price<1000\"]).\r\n* - tagFilters: filter the query by a set of tags. You can AND tags by separating them by commas.\r\n*   To OR tags, you must add parentheses. For example, tags=tag1,(tag2,tag3) means tag1 AND (tag2 OR tag3).\r\n*   You can also use an array, for example tagFilters: [\"tag1\",[\"tag2\",\"tag3\"]]\r\n*   means tag1 AND (tag2 OR tag3).\r\n*   At indexing, tags should be added in the _tags** attribute\r\n*   of objects (for example {\"_tags\":[\"tag1\",\"tag2\"]}).\r\n* - facetFilters: filter the query by a list of facets.\r\n*   Facets are separated by commas and each facet is encoded as `attributeName:value`.\r\n*   For example: `facetFilters=category:Book,author:John%20Doe`.\r\n*   You can also use an array (for example `[\"category:Book\",\"author:John%20Doe\"]`).\r\n* - facets: List of object attributes that you want to use for faceting.\r\n*   Comma separated list: `\"category,author\"` or array `['category','author']`\r\n*   Only attributes that have been added in **attributesForFaceting** index setting\r\n*   can be used in this parameter.\r\n*   You can also use `*` to perform faceting on all attributes specified in **attributesForFaceting**.\r\n* - queryType: select how the query words are interpreted, it can be one of the following value:\r\n*    - prefixAll: all query words are interpreted as prefixes,\r\n*    - prefixLast: only the last word is interpreted as a prefix (default behavior),\r\n*    - prefixNone: no query word is interpreted as a prefix. This option is not recommended.\r\n* - optionalWords: a string that contains the list of words that should\r\n* be considered as optional when found in the query.\r\n*   Comma separated and array are accepted.\r\n* - distinct: If set to 1, enable the distinct feature (disabled by default)\r\n* if the attributeForDistinct index setting is set.\r\n*   This feature is similar to the SQL \"distinct\" keyword: when enabled\r\n*   in a query with the distinct=1 parameter,\r\n*   all hits containing a duplicate value for the attributeForDistinct attribute are removed from results.\r\n*   For example, if the chosen attribute is show_name and several hits have\r\n*   the same value for show_name, then only the best\r\n*   one is kept and others are removed.\r\n* - restrictSearchableAttributes: List of attributes you want to use for\r\n* textual search (must be a subset of the attributesToIndex index setting)\r\n* either comma separated or as an array\r\n* @param {function} [callback] the result callback called with two arguments:\r\n*  error: null or Error('message'). If false, the content contains the error.\r\n*  content: the server answer that contains the list of results.\r\n*/\r\nIndexCore.prototype.search = buildSearchMethod('query');\r\n\r\n/*\r\n* -- BETA --\r\n* Search a record similar to the query inside the index using XMLHttpRequest request (Using a POST query to\r\n* minimize number of OPTIONS queries: Cross-Origin Resource Sharing).\r\n*\r\n* @param {string} [query] the similar query\r\n* @param {object} [args] (optional) if set, contains an object with query parameters.\r\n*   All search parameters are supported (see search function), restrictSearchableAttributes and facetFilters\r\n*   are the two most useful to restrict the similar results and get more relevant content\r\n*/\r\nIndexCore.prototype.similarSearch = deprecate(\r\n  buildSearchMethod('similarQuery'),\r\n  deprecatedMessage(\r\n    'index.similarSearch(query[, callback])',\r\n    'index.search({ similarQuery: query }[, callback])'\r\n  )\r\n);\r\n\r\n/*\r\n* Browse index content. The response content will have a `cursor` property that you can use\r\n* to browse subsequent pages for this query. Use `index.browseFrom(cursor)` when you want.\r\n*\r\n* @param {string} query - The full text query\r\n* @param {Object} [queryParameters] - Any search query parameter\r\n* @param {Function} [callback] - The result callback called with two arguments\r\n*   error: null or Error('message')\r\n*   content: the server answer with the browse result\r\n* @return {Promise|undefined} Returns a promise if no callback given\r\n* @example\r\n* index.browse('cool songs', {\r\n*   tagFilters: 'public,comments',\r\n*   hitsPerPage: 500\r\n* }, callback);\r\n* @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}\r\n*/\r\nIndexCore.prototype.browse = function(query, queryParameters, callback) {\r\n  var merge = require('./merge.js');\r\n\r\n  var indexObj = this;\r\n\r\n  var page;\r\n  var hitsPerPage;\r\n\r\n  // we check variadic calls that are not the one defined\r\n  // .browse()/.browse(fn)\r\n  // => page = 0\r\n  if (arguments.length === 0 || arguments.length === 1 && typeof arguments[0] === 'function') {\r\n    page = 0;\r\n    callback = arguments[0];\r\n    query = undefined;\r\n  } else if (typeof arguments[0] === 'number') {\r\n    // .browse(2)/.browse(2, 10)/.browse(2, fn)/.browse(2, 10, fn)\r\n    page = arguments[0];\r\n    if (typeof arguments[1] === 'number') {\r\n      hitsPerPage = arguments[1];\r\n    } else if (typeof arguments[1] === 'function') {\r\n      callback = arguments[1];\r\n      hitsPerPage = undefined;\r\n    }\r\n    query = undefined;\r\n    queryParameters = undefined;\r\n  } else if (typeof arguments[0] === 'object') {\r\n    // .browse(queryParameters)/.browse(queryParameters, cb)\r\n    if (typeof arguments[1] === 'function') {\r\n      callback = arguments[1];\r\n    }\r\n    queryParameters = arguments[0];\r\n    query = undefined;\r\n  } else if (typeof arguments[0] === 'string' && typeof arguments[1] === 'function') {\r\n    // .browse(query, cb)\r\n    callback = arguments[1];\r\n    queryParameters = undefined;\r\n  }\r\n\r\n  // otherwise it's a .browse(query)/.browse(query, queryParameters)/.browse(query, queryParameters, cb)\r\n\r\n  // get search query parameters combining various possible calls\r\n  // to .browse();\r\n  queryParameters = merge({}, queryParameters || {}, {\r\n    page: page,\r\n    hitsPerPage: hitsPerPage,\r\n    query: query\r\n  });\r\n\r\n  var params = this.as._getSearchParams(queryParameters, '');\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/browse',\r\n    body: {params: params},\r\n    hostType: 'read',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Continue browsing from a previous position (cursor), obtained via a call to `.browse()`.\r\n*\r\n* @param {string} query - The full text query\r\n* @param {Object} [queryParameters] - Any search query parameter\r\n* @param {Function} [callback] - The result callback called with two arguments\r\n*   error: null or Error('message')\r\n*   content: the server answer with the browse result\r\n* @return {Promise|undefined} Returns a promise if no callback given\r\n* @example\r\n* index.browseFrom('14lkfsakl32', callback);\r\n* @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}\r\n*/\r\nIndexCore.prototype.browseFrom = function(cursor, callback) {\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/browse',\r\n    body: {cursor: cursor},\r\n    hostType: 'read',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Search for facet values\r\n* https://www.algolia.com/doc/rest-api/search#search-for-facet-values\r\n*\r\n* @param {string} params.facetName Facet name, name of the attribute to search for values in.\r\n* Must be declared as a facet\r\n* @param {string} params.facetQuery Query for the facet search\r\n* @param {string} [params.*] Any search parameter of Algolia,\r\n* see https://www.algolia.com/doc/api-client/javascript/search#search-parameters\r\n* Pagination is not supported. The page and hitsPerPage parameters will be ignored.\r\n* @param callback (optional)\r\n*/\r\nIndexCore.prototype.searchForFacetValues = function(params, callback) {\r\n  var clone = require('./clone.js');\r\n  var omit = require('./omit.js');\r\n  var usage = 'Usage: index.searchForFacetValues({facetName, facetQuery, ...params}[, callback])';\r\n\r\n  if (params.facetName === undefined || params.facetQuery === undefined) {\r\n    throw new Error(usage);\r\n  }\r\n\r\n  var facetName = params.facetName;\r\n  var filteredParams = omit(clone(params), function(keyName) {\r\n    return keyName === 'facetName';\r\n  });\r\n  var searchParameters = this.as._getSearchParams(filteredParams, '');\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' +\r\n      encodeURIComponent(this.indexName) + '/facets/' + encodeURIComponent(facetName) + '/query',\r\n    hostType: 'read',\r\n    body: {params: searchParameters},\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndexCore.prototype.searchFacet = deprecate(function(params, callback) {\r\n  return this.searchForFacetValues(params, callback);\r\n}, deprecatedMessage(\r\n  'index.searchFacet(params[, callback])',\r\n  'index.searchForFacetValues(params[, callback])'\r\n));\r\n\r\nIndexCore.prototype._search = function(params, url, callback, additionalUA) {\r\n  return this.as._jsonRequest({\r\n    cache: this.cache,\r\n    method: 'POST',\r\n    url: url || '/1/indexes/' + encodeURIComponent(this.indexName) + '/query',\r\n    body: {params: params},\r\n    hostType: 'read',\r\n    fallback: {\r\n      method: 'GET',\r\n      url: '/1/indexes/' + encodeURIComponent(this.indexName),\r\n      body: {params: params}\r\n    },\r\n    callback: callback,\r\n    additionalUA: additionalUA\r\n  });\r\n};\r\n\r\n/*\r\n* Get an object from this index\r\n*\r\n* @param objectID the unique identifier of the object to retrieve\r\n* @param attrs (optional) if set, contains the array of attribute names to retrieve\r\n* @param callback (optional) the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the object to retrieve or the error message if a failure occurred\r\n*/\r\nIndexCore.prototype.getObject = function(objectID, attrs, callback) {\r\n  var indexObj = this;\r\n\r\n  if (arguments.length === 1 || typeof attrs === 'function') {\r\n    callback = attrs;\r\n    attrs = undefined;\r\n  }\r\n\r\n  var params = '';\r\n  if (attrs !== undefined) {\r\n    params = '?attributes=';\r\n    for (var i = 0; i < attrs.length; ++i) {\r\n      if (i !== 0) {\r\n        params += ',';\r\n      }\r\n      params += attrs[i];\r\n    }\r\n  }\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'GET',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(objectID) + params,\r\n    hostType: 'read',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Get several objects from this index\r\n*\r\n* @param objectIDs the array of unique identifier of objects to retrieve\r\n*/\r\nIndexCore.prototype.getObjects = function(objectIDs, attributesToRetrieve, callback) {\r\n  var isArray = require('isarray');\r\n  var map = require('./map.js');\r\n\r\n  var usage = 'Usage: index.getObjects(arrayOfObjectIDs[, callback])';\r\n\r\n  if (!isArray(objectIDs)) {\r\n    throw new Error(usage);\r\n  }\r\n\r\n  var indexObj = this;\r\n\r\n  if (arguments.length === 1 || typeof attributesToRetrieve === 'function') {\r\n    callback = attributesToRetrieve;\r\n    attributesToRetrieve = undefined;\r\n  }\r\n\r\n  var body = {\r\n    requests: map(objectIDs, function prepareRequest(objectID) {\r\n      var request = {\r\n        indexName: indexObj.indexName,\r\n        objectID: objectID\r\n      };\r\n\r\n      if (attributesToRetrieve) {\r\n        request.attributesToRetrieve = attributesToRetrieve.join(',');\r\n      }\r\n\r\n      return request;\r\n    })\r\n  };\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/*/objects',\r\n    hostType: 'read',\r\n    body: body,\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndexCore.prototype.as = null;\r\nIndexCore.prototype.indexName = null;\r\nIndexCore.prototype.typeAheadArgs = null;\r\nIndexCore.prototype.typeAheadValueOption = null;\r\n"]},"metadata":{},"sourceType":"script"}