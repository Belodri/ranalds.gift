{"ast":null,"code":"'use strict';\n\nmodule.exports = jsonpRequest;\n\nvar errors = require('../errors');\n\nvar JSONPCounter = 0;\n\nfunction jsonpRequest(url, opts, cb) {\n  if (opts.method !== 'GET') {\n    cb(new Error('Method ' + opts.method + ' ' + url + ' is not supported by JSONP.'));\n    return;\n  }\n\n  opts.debug('JSONP: start');\n  var cbCalled = false;\n  var timedOut = false;\n  JSONPCounter += 1;\n  var head = document.getElementsByTagName('head')[0];\n  var script = document.createElement('script');\n  var cbName = 'algoliaJSONP_' + JSONPCounter;\n  var done = false;\n\n  window[cbName] = function (data) {\n    removeGlobals();\n\n    if (timedOut) {\n      opts.debug('JSONP: Late answer, ignoring');\n      return;\n    }\n\n    cbCalled = true;\n    clean();\n    cb(null, {\n      body: data,\n      responseText: JSON.stringify(data)\n      /* ,\r\n      // We do not send the statusCode, there's no statusCode in JSONP, it will be\r\n      // computed using data.status && data.message like with XDR\r\n      statusCode*/\n\n    });\n  }; // add callback by hand\n\n\n  url += '&callback=' + cbName; // add body params manually\n\n  if (opts.jsonBody && opts.jsonBody.params) {\n    url += '&' + opts.jsonBody.params;\n  }\n\n  var ontimeout = setTimeout(timeout, opts.timeouts.complete); // script onreadystatechange needed only for\n  // <= IE8\n  // https://github.com/angular/angular.js/issues/4523\n\n  script.onreadystatechange = readystatechange;\n  script.onload = success;\n  script.onerror = error;\n  script.async = true;\n  script.defer = true;\n  script.src = url;\n  head.appendChild(script);\n\n  function success() {\n    opts.debug('JSONP: success');\n\n    if (done || timedOut) {\n      return;\n    }\n\n    done = true; // script loaded but did not call the fn => script loading error\n\n    if (!cbCalled) {\n      opts.debug('JSONP: Fail. Script loaded but did not call the callback');\n      clean();\n      cb(new errors.JSONPScriptFail());\n    }\n  }\n\n  function readystatechange() {\n    if (this.readyState === 'loaded' || this.readyState === 'complete') {\n      success();\n    }\n  }\n\n  function clean() {\n    clearTimeout(ontimeout);\n    script.onload = null;\n    script.onreadystatechange = null;\n    script.onerror = null;\n    head.removeChild(script);\n  }\n\n  function removeGlobals() {\n    try {\n      delete window[cbName];\n      delete window[cbName + '_loaded'];\n    } catch (e) {\n      window[cbName] = window[cbName + '_loaded'] = undefined;\n    }\n  }\n\n  function timeout() {\n    opts.debug('JSONP: Script timeout');\n    timedOut = true;\n    clean();\n    cb(new errors.RequestTimeout());\n  }\n\n  function error() {\n    opts.debug('JSONP: Script error');\n\n    if (done || timedOut) {\n      return;\n    }\n\n    clean();\n    cb(new errors.JSONPScriptError());\n  }\n}","map":{"version":3,"sources":["C:/dev/New folder/rg/node_modules/algoliasearch/src/browser/jsonp-request.js"],"names":["module","exports","jsonpRequest","errors","require","JSONPCounter","url","opts","cb","method","Error","debug","cbCalled","timedOut","head","document","getElementsByTagName","script","createElement","cbName","done","window","data","removeGlobals","clean","body","responseText","JSON","stringify","jsonBody","params","ontimeout","setTimeout","timeout","timeouts","complete","onreadystatechange","readystatechange","onload","success","onerror","error","async","defer","src","appendChild","JSONPScriptFail","readyState","clearTimeout","removeChild","e","undefined","RequestTimeout","JSONPScriptError"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;;AAEA,IAAIC,YAAY,GAAG,CAAnB;;AAEA,SAASH,YAAT,CAAsBI,GAAtB,EAA2BC,IAA3B,EAAiCC,EAAjC,EAAqC;AACnC,MAAID,IAAI,CAACE,MAAL,KAAgB,KAApB,EAA2B;AACzBD,IAAAA,EAAE,CAAC,IAAIE,KAAJ,CAAU,YAAYH,IAAI,CAACE,MAAjB,GAA0B,GAA1B,GAAgCH,GAAhC,GAAsC,6BAAhD,CAAD,CAAF;AACA;AACD;;AAEDC,EAAAA,IAAI,CAACI,KAAL,CAAW,cAAX;AAEA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,QAAQ,GAAG,KAAf;AAEAR,EAAAA,YAAY,IAAI,CAAhB;AACA,MAAIS,IAAI,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAAX;AACA,MAAIC,MAAM,GAAGF,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAb;AACA,MAAIC,MAAM,GAAG,kBAAkBd,YAA/B;AACA,MAAIe,IAAI,GAAG,KAAX;;AAEAC,EAAAA,MAAM,CAACF,MAAD,CAAN,GAAiB,UAASG,IAAT,EAAe;AAC9BC,IAAAA,aAAa;;AAEb,QAAIV,QAAJ,EAAc;AACZN,MAAAA,IAAI,CAACI,KAAL,CAAW,8BAAX;AACA;AACD;;AAEDC,IAAAA,QAAQ,GAAG,IAAX;AAEAY,IAAAA,KAAK;AAELhB,IAAAA,EAAE,CAAC,IAAD,EAAO;AACPiB,MAAAA,IAAI,EAAEH,IADC;AAEPI,MAAAA,YAAY,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AAAoB;;;;;AAF3B,KAAP,CAAF;AAOD,GAnBD,CAjBmC,CAsCnC;;;AACAhB,EAAAA,GAAG,IAAI,eAAea,MAAtB,CAvCmC,CAyCnC;;AACA,MAAIZ,IAAI,CAACsB,QAAL,IAAiBtB,IAAI,CAACsB,QAAL,CAAcC,MAAnC,EAA2C;AACzCxB,IAAAA,GAAG,IAAI,MAAMC,IAAI,CAACsB,QAAL,CAAcC,MAA3B;AACD;;AAED,MAAIC,SAAS,GAAGC,UAAU,CAACC,OAAD,EAAU1B,IAAI,CAAC2B,QAAL,CAAcC,QAAxB,CAA1B,CA9CmC,CAgDnC;AACA;AACA;;AACAlB,EAAAA,MAAM,CAACmB,kBAAP,GAA4BC,gBAA5B;AACApB,EAAAA,MAAM,CAACqB,MAAP,GAAgBC,OAAhB;AACAtB,EAAAA,MAAM,CAACuB,OAAP,GAAiBC,KAAjB;AAEAxB,EAAAA,MAAM,CAACyB,KAAP,GAAe,IAAf;AACAzB,EAAAA,MAAM,CAAC0B,KAAP,GAAe,IAAf;AACA1B,EAAAA,MAAM,CAAC2B,GAAP,GAAatC,GAAb;AACAQ,EAAAA,IAAI,CAAC+B,WAAL,CAAiB5B,MAAjB;;AAEA,WAASsB,OAAT,GAAmB;AACjBhC,IAAAA,IAAI,CAACI,KAAL,CAAW,gBAAX;;AAEA,QAAIS,IAAI,IAAIP,QAAZ,EAAsB;AACpB;AACD;;AAEDO,IAAAA,IAAI,GAAG,IAAP,CAPiB,CASjB;;AACA,QAAI,CAACR,QAAL,EAAe;AACbL,MAAAA,IAAI,CAACI,KAAL,CAAW,0DAAX;AACAa,MAAAA,KAAK;AACLhB,MAAAA,EAAE,CAAC,IAAIL,MAAM,CAAC2C,eAAX,EAAD,CAAF;AACD;AACF;;AAED,WAAST,gBAAT,GAA4B;AAC1B,QAAI,KAAKU,UAAL,KAAoB,QAApB,IAAgC,KAAKA,UAAL,KAAoB,UAAxD,EAAoE;AAClER,MAAAA,OAAO;AACR;AACF;;AAED,WAASf,KAAT,GAAiB;AACfwB,IAAAA,YAAY,CAACjB,SAAD,CAAZ;AACAd,IAAAA,MAAM,CAACqB,MAAP,GAAgB,IAAhB;AACArB,IAAAA,MAAM,CAACmB,kBAAP,GAA4B,IAA5B;AACAnB,IAAAA,MAAM,CAACuB,OAAP,GAAiB,IAAjB;AACA1B,IAAAA,IAAI,CAACmC,WAAL,CAAiBhC,MAAjB;AACD;;AAED,WAASM,aAAT,GAAyB;AACvB,QAAI;AACF,aAAOF,MAAM,CAACF,MAAD,CAAb;AACA,aAAOE,MAAM,CAACF,MAAM,GAAG,SAAV,CAAb;AACD,KAHD,CAGE,OAAO+B,CAAP,EAAU;AACV7B,MAAAA,MAAM,CAACF,MAAD,CAAN,GAAiBE,MAAM,CAACF,MAAM,GAAG,SAAV,CAAN,GAA6BgC,SAA9C;AACD;AACF;;AAED,WAASlB,OAAT,GAAmB;AACjB1B,IAAAA,IAAI,CAACI,KAAL,CAAW,uBAAX;AACAE,IAAAA,QAAQ,GAAG,IAAX;AACAW,IAAAA,KAAK;AACLhB,IAAAA,EAAE,CAAC,IAAIL,MAAM,CAACiD,cAAX,EAAD,CAAF;AACD;;AAED,WAASX,KAAT,GAAiB;AACflC,IAAAA,IAAI,CAACI,KAAL,CAAW,qBAAX;;AAEA,QAAIS,IAAI,IAAIP,QAAZ,EAAsB;AACpB;AACD;;AAEDW,IAAAA,KAAK;AACLhB,IAAAA,EAAE,CAAC,IAAIL,MAAM,CAACkD,gBAAX,EAAD,CAAF;AACD;AACF","sourcesContent":["'use strict';\r\n\r\nmodule.exports = jsonpRequest;\r\n\r\nvar errors = require('../errors');\r\n\r\nvar JSONPCounter = 0;\r\n\r\nfunction jsonpRequest(url, opts, cb) {\r\n  if (opts.method !== 'GET') {\r\n    cb(new Error('Method ' + opts.method + ' ' + url + ' is not supported by JSONP.'));\r\n    return;\r\n  }\r\n\r\n  opts.debug('JSONP: start');\r\n\r\n  var cbCalled = false;\r\n  var timedOut = false;\r\n\r\n  JSONPCounter += 1;\r\n  var head = document.getElementsByTagName('head')[0];\r\n  var script = document.createElement('script');\r\n  var cbName = 'algoliaJSONP_' + JSONPCounter;\r\n  var done = false;\r\n\r\n  window[cbName] = function(data) {\r\n    removeGlobals();\r\n\r\n    if (timedOut) {\r\n      opts.debug('JSONP: Late answer, ignoring');\r\n      return;\r\n    }\r\n\r\n    cbCalled = true;\r\n\r\n    clean();\r\n\r\n    cb(null, {\r\n      body: data,\r\n      responseText: JSON.stringify(data)/* ,\r\n      // We do not send the statusCode, there's no statusCode in JSONP, it will be\r\n      // computed using data.status && data.message like with XDR\r\n      statusCode*/\r\n    });\r\n  };\r\n\r\n  // add callback by hand\r\n  url += '&callback=' + cbName;\r\n\r\n  // add body params manually\r\n  if (opts.jsonBody && opts.jsonBody.params) {\r\n    url += '&' + opts.jsonBody.params;\r\n  }\r\n\r\n  var ontimeout = setTimeout(timeout, opts.timeouts.complete);\r\n\r\n  // script onreadystatechange needed only for\r\n  // <= IE8\r\n  // https://github.com/angular/angular.js/issues/4523\r\n  script.onreadystatechange = readystatechange;\r\n  script.onload = success;\r\n  script.onerror = error;\r\n\r\n  script.async = true;\r\n  script.defer = true;\r\n  script.src = url;\r\n  head.appendChild(script);\r\n\r\n  function success() {\r\n    opts.debug('JSONP: success');\r\n\r\n    if (done || timedOut) {\r\n      return;\r\n    }\r\n\r\n    done = true;\r\n\r\n    // script loaded but did not call the fn => script loading error\r\n    if (!cbCalled) {\r\n      opts.debug('JSONP: Fail. Script loaded but did not call the callback');\r\n      clean();\r\n      cb(new errors.JSONPScriptFail());\r\n    }\r\n  }\r\n\r\n  function readystatechange() {\r\n    if (this.readyState === 'loaded' || this.readyState === 'complete') {\r\n      success();\r\n    }\r\n  }\r\n\r\n  function clean() {\r\n    clearTimeout(ontimeout);\r\n    script.onload = null;\r\n    script.onreadystatechange = null;\r\n    script.onerror = null;\r\n    head.removeChild(script);\r\n  }\r\n\r\n  function removeGlobals() {\r\n    try {\r\n      delete window[cbName];\r\n      delete window[cbName + '_loaded'];\r\n    } catch (e) {\r\n      window[cbName] = window[cbName + '_loaded'] = undefined;\r\n    }\r\n  }\r\n\r\n  function timeout() {\r\n    opts.debug('JSONP: Script timeout');\r\n    timedOut = true;\r\n    clean();\r\n    cb(new errors.RequestTimeout());\r\n  }\r\n\r\n  function error() {\r\n    opts.debug('JSONP: Script error');\r\n\r\n    if (done || timedOut) {\r\n      return;\r\n    }\r\n\r\n    clean();\r\n    cb(new errors.JSONPScriptError());\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}