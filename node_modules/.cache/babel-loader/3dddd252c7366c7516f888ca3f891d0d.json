{"ast":null,"code":"'use strict'; // This file hosts our error definitions\n// We use custom error \"types\" so that we can act on them when we need it\n// e.g.: if error instanceof errors.UnparsableJSON then..\n\nvar inherits = require('inherits');\n\nfunction AlgoliaSearchError(message, extraProperties) {\n  var forEach = require('foreach');\n\n  var error = this; // try to get a stacktrace\n\n  if (typeof Error.captureStackTrace === 'function') {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    error.stack = new Error().stack || 'Cannot get a stacktrace, browser is too old';\n  }\n\n  this.name = 'AlgoliaSearchError';\n  this.message = message || 'Unknown error';\n\n  if (extraProperties) {\n    forEach(extraProperties, function addToErrorObject(value, key) {\n      error[key] = value;\n    });\n  }\n}\n\ninherits(AlgoliaSearchError, Error);\n\nfunction createCustomError(name, message) {\n  function AlgoliaSearchCustomError() {\n    var args = Array.prototype.slice.call(arguments, 0); // custom message not set, use default\n\n    if (typeof args[0] !== 'string') {\n      args.unshift(message);\n    }\n\n    AlgoliaSearchError.apply(this, args);\n    this.name = 'AlgoliaSearch' + name + 'Error';\n  }\n\n  inherits(AlgoliaSearchCustomError, AlgoliaSearchError);\n  return AlgoliaSearchCustomError;\n} // late exports to let various fn defs and inherits take place\n\n\nmodule.exports = {\n  AlgoliaSearchError: AlgoliaSearchError,\n  UnparsableJSON: createCustomError('UnparsableJSON', 'Could not parse the incoming response as JSON, see err.more for details'),\n  RequestTimeout: createCustomError('RequestTimeout', 'Request timed out before getting a response'),\n  Network: createCustomError('Network', 'Network issue, see err.more for details'),\n  JSONPScriptFail: createCustomError('JSONPScriptFail', '<script> was loaded but did not call our provided callback'),\n  ValidUntilNotFound: createCustomError('ValidUntilNotFound', 'The SecuredAPIKey does not have a validUntil parameter.'),\n  JSONPScriptError: createCustomError('JSONPScriptError', '<script> unable to load due to an `error` event on it'),\n  ObjectNotFound: createCustomError('ObjectNotFound', 'Object not found'),\n  Unknown: createCustomError('Unknown', 'Unknown error occured')\n};","map":{"version":3,"sources":["C:/dev/New folder/rg/node_modules/algoliasearch/src/errors.js"],"names":["inherits","require","AlgoliaSearchError","message","extraProperties","forEach","error","Error","captureStackTrace","constructor","stack","name","addToErrorObject","value","key","createCustomError","AlgoliaSearchCustomError","args","Array","prototype","slice","call","arguments","unshift","apply","module","exports","UnparsableJSON","RequestTimeout","Network","JSONPScriptFail","ValidUntilNotFound","JSONPScriptError","ObjectNotFound","Unknown"],"mappings":"AAAA,a,CAEA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,eAArC,EAAsD;AACpD,MAAIC,OAAO,GAAGJ,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAIK,KAAK,GAAG,IAAZ,CAHoD,CAKpD;;AACA,MAAI,OAAOC,KAAK,CAACC,iBAAb,KAAmC,UAAvC,EAAmD;AACjDD,IAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC;AACD,GAFD,MAEO;AACLH,IAAAA,KAAK,CAACI,KAAN,GAAe,IAAIH,KAAJ,EAAD,CAAcG,KAAd,IAAuB,6CAArC;AACD;;AAED,OAAKC,IAAL,GAAY,oBAAZ;AACA,OAAKR,OAAL,GAAeA,OAAO,IAAI,eAA1B;;AAEA,MAAIC,eAAJ,EAAqB;AACnBC,IAAAA,OAAO,CAACD,eAAD,EAAkB,SAASQ,gBAAT,CAA0BC,KAA1B,EAAiCC,GAAjC,EAAsC;AAC7DR,MAAAA,KAAK,CAACQ,GAAD,CAAL,GAAaD,KAAb;AACD,KAFM,CAAP;AAGD;AACF;;AAEDb,QAAQ,CAACE,kBAAD,EAAqBK,KAArB,CAAR;;AAEA,SAASQ,iBAAT,CAA2BJ,IAA3B,EAAiCR,OAAjC,EAA0C;AACxC,WAASa,wBAAT,GAAoC;AAClC,QAAIC,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAX,CADkC,CAGlC;;AACA,QAAI,OAAOL,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC/BA,MAAAA,IAAI,CAACM,OAAL,CAAapB,OAAb;AACD;;AAEDD,IAAAA,kBAAkB,CAACsB,KAAnB,CAAyB,IAAzB,EAA+BP,IAA/B;AACA,SAAKN,IAAL,GAAY,kBAAkBA,IAAlB,GAAyB,OAArC;AACD;;AAEDX,EAAAA,QAAQ,CAACgB,wBAAD,EAA2Bd,kBAA3B,CAAR;AAEA,SAAOc,wBAAP;AACD,C,CAED;;;AACAS,MAAM,CAACC,OAAP,GAAiB;AACfxB,EAAAA,kBAAkB,EAAEA,kBADL;AAEfyB,EAAAA,cAAc,EAAEZ,iBAAiB,CAC/B,gBAD+B,EAE/B,yEAF+B,CAFlB;AAMfa,EAAAA,cAAc,EAAEb,iBAAiB,CAC/B,gBAD+B,EAE/B,6CAF+B,CANlB;AAUfc,EAAAA,OAAO,EAAEd,iBAAiB,CACxB,SADwB,EAExB,yCAFwB,CAVX;AAcfe,EAAAA,eAAe,EAAEf,iBAAiB,CAChC,iBADgC,EAEhC,4DAFgC,CAdnB;AAkBfgB,EAAAA,kBAAkB,EAAEhB,iBAAiB,CACnC,oBADmC,EAEnC,yDAFmC,CAlBtB;AAsBfiB,EAAAA,gBAAgB,EAAEjB,iBAAiB,CACjC,kBADiC,EAEjC,uDAFiC,CAtBpB;AA0BfkB,EAAAA,cAAc,EAAElB,iBAAiB,CAC/B,gBAD+B,EAE/B,kBAF+B,CA1BlB;AA8BfmB,EAAAA,OAAO,EAAEnB,iBAAiB,CACxB,SADwB,EAExB,uBAFwB;AA9BX,CAAjB","sourcesContent":["'use strict';\r\n\r\n// This file hosts our error definitions\r\n// We use custom error \"types\" so that we can act on them when we need it\r\n// e.g.: if error instanceof errors.UnparsableJSON then..\r\n\r\nvar inherits = require('inherits');\r\n\r\nfunction AlgoliaSearchError(message, extraProperties) {\r\n  var forEach = require('foreach');\r\n\r\n  var error = this;\r\n\r\n  // try to get a stacktrace\r\n  if (typeof Error.captureStackTrace === 'function') {\r\n    Error.captureStackTrace(this, this.constructor);\r\n  } else {\r\n    error.stack = (new Error()).stack || 'Cannot get a stacktrace, browser is too old';\r\n  }\r\n\r\n  this.name = 'AlgoliaSearchError';\r\n  this.message = message || 'Unknown error';\r\n\r\n  if (extraProperties) {\r\n    forEach(extraProperties, function addToErrorObject(value, key) {\r\n      error[key] = value;\r\n    });\r\n  }\r\n}\r\n\r\ninherits(AlgoliaSearchError, Error);\r\n\r\nfunction createCustomError(name, message) {\r\n  function AlgoliaSearchCustomError() {\r\n    var args = Array.prototype.slice.call(arguments, 0);\r\n\r\n    // custom message not set, use default\r\n    if (typeof args[0] !== 'string') {\r\n      args.unshift(message);\r\n    }\r\n\r\n    AlgoliaSearchError.apply(this, args);\r\n    this.name = 'AlgoliaSearch' + name + 'Error';\r\n  }\r\n\r\n  inherits(AlgoliaSearchCustomError, AlgoliaSearchError);\r\n\r\n  return AlgoliaSearchCustomError;\r\n}\r\n\r\n// late exports to let various fn defs and inherits take place\r\nmodule.exports = {\r\n  AlgoliaSearchError: AlgoliaSearchError,\r\n  UnparsableJSON: createCustomError(\r\n    'UnparsableJSON',\r\n    'Could not parse the incoming response as JSON, see err.more for details'\r\n  ),\r\n  RequestTimeout: createCustomError(\r\n    'RequestTimeout',\r\n    'Request timed out before getting a response'\r\n  ),\r\n  Network: createCustomError(\r\n    'Network',\r\n    'Network issue, see err.more for details'\r\n  ),\r\n  JSONPScriptFail: createCustomError(\r\n    'JSONPScriptFail',\r\n    '<script> was loaded but did not call our provided callback'\r\n  ),\r\n  ValidUntilNotFound: createCustomError(\r\n    'ValidUntilNotFound',\r\n    'The SecuredAPIKey does not have a validUntil parameter.'\r\n  ),\r\n  JSONPScriptError: createCustomError(\r\n    'JSONPScriptError',\r\n    '<script> unable to load due to an `error` event on it'\r\n  ),\r\n  ObjectNotFound: createCustomError(\r\n    'ObjectNotFound',\r\n    'Object not found'\r\n  ),\r\n  Unknown: createCustomError(\r\n    'Unknown',\r\n    'Unknown error occured'\r\n  )\r\n};\r\n"]},"metadata":{},"sourceType":"script"}