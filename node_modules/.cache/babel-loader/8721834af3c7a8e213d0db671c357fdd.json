{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\components\\\\buildList\\\\BuildsList.js\";\nimport React, { Component, useEffect, useRef } from 'react';\nimport './BuildList.css';\nimport './BuildListItem.css';\nimport BuildListItem from './BuildListItem';\nimport 'simplebar/dist/simplebar.min.css';\nimport BuildsListStore from '../../stores/PagedBuildListStore';\nimport { db } from '../../utils/Firebase';\nimport { AppContext } from '../../stores/Store'; // accept a userid, if no id provided get all builds with page limits\n// if an id is passed, get the builds for this user only\n\nclass BuildsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      builds: [],\n      careerId: 0,\n      isDataLoaded: false,\n      isLoadingData: false\n    };\n  } //current page index and total pages from props\n  //specify the type of build list... or make specific types of build lists...\n  //filters based on properties: userid, careerid, patch\n  //static contextType = AppContext;\n  //accept props: \n  //filters\n  //current page number\n  //last build document\n\n\n  render() {\n    //get filters from props\n    //alert('rendering builds list');\n    console.log(this.state);\n    let isLoadingData = false;\n\n    if (!this.state.isDataLoaded || this.state.careerId !== this.props.careerId) {\n      this.state.isLoadingData = true;\n      let buildList = [];\n      let buildsQuery = db.collection(\"builds\");\n      let filters = [];\n\n      if (this.props.careerId) {\n        console.log('builds list received career id ' + this.props.careerId);\n        filters.push({\n          field: 'careerId',\n          comparison: '==',\n          value: this.props.careerId\n        });\n      }\n\n      if (this.props.filters) {\n        filters = this.props.filters;\n      }\n\n      filters.forEach(filter => {\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\n      });\n      buildsQuery.limit(10).get().then(querySnapshot => {\n        querySnapshot.forEach(build => {\n          buildList.push({\n            id: build.id,\n            data: build.data()\n          });\n        });\n        console.log('updating builds list state');\n        console.log(buildList);\n        this.setState({\n          builds: buildList,\n          careerId: this.props.careerId,\n          isDataLoaded: true,\n          isLoadingData: false\n        });\n      });\n    }\n\n    if (this.state.isLoadingData) {\n      console.log('builds list data is still loading');\n      return /*#__PURE__*/React.createElement(\"div\", {\n        \"data-page-number\": 1,\n        \"data-last-page\": false,\n        className: \"build-list border-01 background-16\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        class: \"build-list-header header-underline\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, \"List\"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-page-number\": 1,\n      \"data-last-page\": false,\n      className: \"build-list border-01 background-16\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"build-list-header header-underline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, \"List\"), this.renderBuilds(this.state.builds));\n  }\n\n  renderBuilds(builds) {\n    console.log('list of builds to render');\n    console.log(builds);\n\n    if (!builds || builds.length === 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 14\n        }\n      }, \"No builds in database.\");\n    }\n\n    var buildsHtml = [];\n    builds.forEach(build => {\n      buildsHtml.push( /*#__PURE__*/React.createElement(BuildListItem, {\n        key: build.id,\n        buildId: build.id,\n        buildData: build.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 23\n        }\n      }));\n    });\n    return buildsHtml;\n  }\n\n}\n\nexport default BuildsList;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildList/BuildsList.js"],"names":["React","Component","useEffect","useRef","BuildListItem","BuildsListStore","db","AppContext","BuildsList","constructor","props","state","builds","careerId","isDataLoaded","isLoadingData","render","console","log","buildList","buildsQuery","collection","filters","push","field","comparison","value","forEach","filter","where","limit","get","then","querySnapshot","build","id","data","setState","renderBuilds","length","buildsHtml"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useRef} from 'react';\r\nimport './BuildList.css';\r\nimport './BuildListItem.css';\r\nimport BuildListItem from './BuildListItem';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport BuildsListStore from '../../stores/PagedBuildListStore';\r\nimport { db } from '../../utils/Firebase';\r\nimport { AppContext } from '../../stores/Store';\r\n\r\n// accept a userid, if no id provided get all builds with page limits\r\n// if an id is passed, get the builds for this user only\r\n\r\nclass BuildsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n      builds: [],\r\n      careerId: 0,\r\n      isDataLoaded: false,\r\n      isLoadingData: false\r\n    };\r\n  }\r\n\r\n  //current page index and total pages from props\r\n\r\n  //specify the type of build list... or make specific types of build lists...\r\n  //filters based on properties: userid, careerid, patch\r\n\r\n  //static contextType = AppContext;\r\n\r\n\r\n  //accept props: \r\n  //filters\r\n  //current page number\r\n  //last build document\r\n\r\n  render() {\r\n    //get filters from props\r\n    //alert('rendering builds list');\r\n    console.log(this.state);\r\n\r\n    let isLoadingData = false;\r\n\r\n    if (!this.state.isDataLoaded ||\r\n        this.state.careerId !== this.props.careerId) {\r\n\r\n      this.state.isLoadingData = true;\r\n\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = db.collection(\"builds\");\r\n  \r\n      let filters = [];\r\n\r\n      if (this.props.careerId) {\r\n        console.log('builds list received career id ' + this.props.careerId);\r\n        filters.push({ field: 'careerId', comparison: '==', value: this.props.careerId });\r\n      }\r\n  \r\n      if (this.props.filters) {\r\n        filters = this.props.filters;\r\n      }\r\n  \r\n      filters.forEach((filter) => {\r\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n      });\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n        console.log('updating builds list state');\r\n        console.log(buildList);\r\n        this.setState({builds: buildList, careerId: this.props.careerId, isDataLoaded: true, isLoadingData: false})\r\n      });\r\n    }\r\n\r\n    if (this.state.isLoadingData) {\r\n      console.log('builds list data is still loading');\r\n      \r\n      return (\r\n        <div data-page-number={1} data-last-page={false} className=\"build-list border-01 background-16\">\r\n          <span class=\"build-list-header header-underline\">List</span>\r\n          {/* <button className=\"build-list-page-button\" onClick={this.props.handleNextPage}>Next Page</button> */}\r\n        </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n          <div data-page-number={1} data-last-page={false} className=\"build-list border-01 background-16\">\r\n            <span class=\"build-list-header header-underline\">List</span>\r\n            {/* <button className=\"build-list-page-button\" onClick={this.props.handleNextPage}>Next Page</button> */}\r\n            {this.renderBuilds(this.state.builds)}\r\n          </div>\r\n    );\r\n  }\r\n\r\n  renderBuilds(builds) {\r\n    console.log('list of builds to render');\r\n    console.log(builds);\r\n    if (!builds || builds.length === 0) {\r\n      return <p>No builds in database.</p>;\r\n    }\r\n    var buildsHtml = [];\r\n    builds.forEach((build) => {\r\n      buildsHtml.push(<BuildListItem key={build.id} buildId={build.id} buildData={build.data}></BuildListItem>)\r\n    });\r\n    return buildsHtml;\r\n  }\r\n}\r\n\r\nexport default BuildsList;"]},"metadata":{},"sourceType":"module"}