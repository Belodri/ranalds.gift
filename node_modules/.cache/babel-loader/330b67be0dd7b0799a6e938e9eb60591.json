{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\utils\\\\DataHelper.js\";\nimport { heroesData } from '../data/Heroes';\nimport { meleeWeaponsData } from '../data/MeleeWeapons';\nimport { rangeWeaponsData } from '../data/RangeWeapons';\nimport { weaponsData } from '../data/Weapons';\nimport { traitsData } from '../data/Traits';\nimport { propertiesData } from '../data/Properties';\nimport { PatchList } from '../data/PatchList';\nimport { missionData } from '../data/Missions';\nimport { difficultyData } from '../data/Difficulties';\nimport { potionData } from '../data/Potions';\nimport { roleData } from '../data/Roles';\nimport { bookData } from '../data/Books';\nimport React from 'react';\nimport { db } from './Firebase';\nexport class DataHelper {}\n\nDataHelper.getCareers = () => {\n  return heroesData;\n};\n\nDataHelper.getCareer = careerId => {\n  for (var i = 0; i < heroesData.length; i++) {\n    if (heroesData[i].id === parseInt(careerId)) {\n      return heroesData[i];\n    }\n  }\n\n  return null;\n};\n\nDataHelper.getMeleeData = (careerId, id) => {\n  console.log('getting melee data for id ' + id);\n  return meleeWeaponsData.find(weapon => {\n    return parseInt(weapon.id) === parseInt(id);\n  });\n};\n\nDataHelper.getRangeData = (careerId, id) => {\n  if (parseInt(careerId) !== 6 && parseInt(careerId) !== 16) {\n    return rangeWeaponsData.find(weapon => {\n      return parseInt(weapon.id) === parseInt(id);\n    });\n  }\n\n  return meleeWeaponsData.find(weapon => {\n    return parseInt(weapon.id) === parseInt(id);\n  });\n};\n\nDataHelper.getTraitData = (id, type) => {\n  switch (type) {\n    case 'melee':\n      return traitsData.melee.find(trait => {\n        return parseInt(trait.id) === parseInt(id);\n      });\n\n    case 'range':\n      return traitsData.range.find(trait => {\n        return parseInt(trait.id) === parseInt(id);\n      });\n      ;\n\n    case 'necklace':\n      return traitsData.necklace.find(trait => {\n        return parseInt(trait.id) === parseInt(id);\n      });\n      ;\n\n    case 'charm':\n      return traitsData.charm.find(trait => {\n        return parseInt(trait.id) === parseInt(id);\n      });\n      ;\n\n    case 'trinket':\n      return traitsData.trinket.find(trait => {\n        return parseInt(trait.id) === parseInt(id);\n      });\n      ;\n\n    default:\n      return null;\n  }\n};\n\nDataHelper.getPropertyData = (id, type) => {\n  return propertiesData.find(trait => {\n    return parseInt(trait.id) === parseInt(id);\n  });\n};\n\nDataHelper.getPatchFromDate = date => {\n  var filteredPatchList = PatchList.filter(patch => {\n    return patch.date < date;\n  });\n  return filteredPatchList[filteredPatchList.length - 1];\n};\n\nDataHelper.getDaysSinceDate = date => {\n  var millisecondsPerDay = 24 * 60 * 60 * 1000;\n  return Math.floor((Date.parse(new Date()) - Date.parse(date)) / millisecondsPerDay);\n};\n\nDataHelper.getPatchFromDateForType = (date, updateType) => {\n  var filteredPatchList = PatchList.filter(patch => {\n    return patch.date < date && patch.type === updateType;\n  });\n  return filteredPatchList[filteredPatchList.length - 1];\n};\n\nDataHelper.getDataByIds = (data, ids) => {\n  return data.filter(item => {\n    return ids.includes(item.id);\n  });\n};\n\nDataHelper.getDifficultiesByIds = ids => {\n  return DataHelper.getDataByIds(difficultyData, ids);\n};\n\nDataHelper.getMissionsByIds = ids => {\n  return DataHelper.getDataByIds(missionData, ids);\n};\n\nDataHelper.getPotionsByIds = ids => {\n  return DataHelper.getDataByIds(potionData, ids);\n};\n\nDataHelper.getRolesByIds = ids => {\n  return DataHelper.getDataByIds(roleData, ids);\n};\n\nDataHelper.getBooksByIds = ids => {\n  return DataHelper.getDataByIds(bookData, ids);\n};\n\nDataHelper.getMissionData = () => {\n  return missionData;\n};\n\nDataHelper.getDifficultyData = () => {\n  return difficultyData;\n};\n\nDataHelper.getPotionData = () => {\n  return potionData;\n};\n\nDataHelper.getRoleData = () => {\n  return roleData;\n};\n\nDataHelper.getBookData = () => {\n  return bookData;\n};\n\nDataHelper.renderListOptions = data => {\n  let html = [];\n  data.forEach(item => {\n    html.push( /*#__PURE__*/React.createElement(\"option\", {\n      key: item.id,\n      value: item.id,\n      __self: DataHelper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, item.name));\n  });\n  return html;\n};\n\nDataHelper.getPropertiesForCategory = category => {\n  switch (category) {\n    case \"melee\":\n      return propertiesData.melee;\n\n    case \"range\":\n      return propertiesData.range;\n\n    case \"necklace\":\n      return propertiesData.necklace;\n\n    case \"charm\":\n      return propertiesData.charm;\n\n    case \"trinket\":\n      return propertiesData.trinket;\n  }\n};\n\nDataHelper.getPropertyFromCategory = (category, propertyId) => {\n  switch (category) {\n    case \"melee\":\n      return propertiesData.melee.find(property => {\n        return parseInt(property.id) === parseInt(propertyId);\n      });\n\n    case \"range\":\n      return propertiesData.range.find(property => {\n        return parseInt(property.id) === parseInt(propertyId);\n      });\n\n    case \"necklace\":\n      return propertiesData.necklace.find(property => {\n        return parseInt(property.id) === parseInt(propertyId);\n      });\n\n    case \"charm\":\n      return propertiesData.charm.find(property => {\n        return parseInt(property.id) === parseInt(propertyId);\n      });\n\n    case \"trinket\":\n      return propertiesData.trinket.find(property => {\n        return parseInt(property.id) === parseInt(propertyId);\n      });\n\n    default:\n      return null;\n  }\n};\n\nDataHelper.getTraitFromCategory = (category, traitId) => {\n  switch (category) {\n    case \"melee\":\n      return traitsData.melee.find(property => {\n        return parseInt(property.id) === parseInt(traitId);\n      });\n\n    case \"range\":\n      return traitsData.range.find(property => {\n        return parseInt(property.id) === parseInt(traitId);\n      });\n\n    case \"magic\":\n      return traitsData.magic.find(property => {\n        return parseInt(property.id) === parseInt(traitId);\n      });\n\n    case \"necklace\":\n      return traitsData.necklace.find(property => {\n        return parseInt(property.id) === parseInt(traitId);\n      });\n\n    case \"charm\":\n      return traitsData.charm.find(property => {\n        return parseInt(property.id) === parseInt(traitId);\n      });\n\n    case \"trinket\":\n      return traitsData.trinket.find(property => {\n        return parseInt(property.id) === parseInt(traitId);\n      });\n\n    default:\n      return null;\n  }\n};\n\nDataHelper.getTraitsForCategory = category => {\n  switch (category) {\n    case \"melee\":\n      return traitsData.melee;\n\n    case \"range\":\n      return traitsData.range;\n\n    case \"magic\":\n      return traitsData.magic;\n\n    case \"necklace\":\n      return traitsData.necklace;\n\n    case \"charm\":\n      return traitsData.charm;\n\n    case \"trinket\":\n      return traitsData.trinket;\n  }\n};\n\nDataHelper.getWeapon = weaponId => {\n  //alert(weaponId);\n  return weaponsData.find(weapon => {\n    return weapon.id === parseInt(weaponId);\n  });\n};\n\nDataHelper.getTraitFromWeapon = (weaponId, traitId) => {\n  var weapon = DataHelper.getWeapon(weaponId);\n\n  if (!weapon) {\n    return;\n  }\n\n  return DataHelper.getTraitFromCategory(weapon.propertyCategory, traitId);\n};\n\nDataHelper.getPropertyFromWeapon = (weaponId, propertyId) => {\n  var weapon = DataHelper.getWeapon(weaponId);\n\n  if (!weapon) {\n    return;\n  }\n\n  return DataHelper.getPropertyFromCategory(weapon.propertyCategory, propertyId);\n};\n\nDataHelper.getPrimaryWeaponsForCareer = careerId => {\n  return weaponsData.filter(weapon => {\n    return weapon.canWieldPrimary.includes(parseInt(careerId));\n  });\n};\n\nDataHelper.getSecondaryWeaponsForCareer = careerId => {\n  return weaponsData.filter(weapon => {\n    return weapon.canWieldSecondary.includes(parseInt(careerId));\n  });\n};\n\nDataHelper.getBuildStats = () => {\n  let careers = [];\n  DataHelper.getCareers().forEach(career => {\n    let primaryWeapons = DataHelper.getPrimaryWeaponsForCareer(career.id);\n    let secondaryWeapons = DataHelper.getSecondaryWeaponsForCareer(career.id);\n    let weaponData = [];\n    primaryWeapons.forEach(weapon => {\n      let properties = DataHelper.getPropertiesForCategory(weapon.propertyCategory);\n      let propertyData = [];\n      properties.forEach(property => {\n        propertyData.push({\n          id: property.id,\n          count: 0\n        });\n      });\n      let traits = DataHelper.getTraitsForCategory(weapon.traitCategory);\n      let traitData = [];\n      traits.forEach(trait => {\n        traitData.push({\n          id: trait.id,\n          count: 0\n        });\n      });\n      weaponData.push({\n        id: weapon.id,\n        count: 0,\n        properties: propertyData,\n        traits: traitData\n      });\n    });\n    secondaryWeapons.forEach(weapon => {\n      let properties = DataHelper.getPropertiesForCategory(weapon.propertyCategory);\n      let propertyData = [];\n      properties.forEach(property => {\n        propertyData.push({\n          id: property.id,\n          count: 0\n        });\n      });\n      let traits = DataHelper.getTraitsForCategory(weapon.traitCategory);\n      let traitData = [];\n      traits.forEach(trait => {\n        traitData.push({\n          id: trait.id,\n          count: 0\n        });\n      });\n      weaponData.push({\n        id: weapon.id,\n        count: 0,\n        properties: propertyData,\n        traits: traitData\n      });\n    });\n    let careerData = {\n      id: career.id,\n      count: 0,\n      weapons: weaponData\n    };\n    careers.push(careerData);\n  });\n  console.log(careers);\n  /* \r\n        db.collection('builds').doc('stats').get().then((document) => {\r\n          console.log(document.data());\r\n        }); */\n};","map":{"version":3,"sources":["C:/dev/New folder/rg/src/utils/DataHelper.js"],"names":["heroesData","meleeWeaponsData","rangeWeaponsData","weaponsData","traitsData","propertiesData","PatchList","missionData","difficultyData","potionData","roleData","bookData","React","db","DataHelper","getCareers","getCareer","careerId","i","length","id","parseInt","getMeleeData","console","log","find","weapon","getRangeData","getTraitData","type","melee","trait","range","necklace","charm","trinket","getPropertyData","getPatchFromDate","date","filteredPatchList","filter","patch","getDaysSinceDate","millisecondsPerDay","Math","floor","Date","parse","getPatchFromDateForType","updateType","getDataByIds","data","ids","item","includes","getDifficultiesByIds","getMissionsByIds","getPotionsByIds","getRolesByIds","getBooksByIds","getMissionData","getDifficultyData","getPotionData","getRoleData","getBookData","renderListOptions","html","forEach","push","name","getPropertiesForCategory","category","getPropertyFromCategory","propertyId","property","getTraitFromCategory","traitId","magic","getTraitsForCategory","getWeapon","weaponId","getTraitFromWeapon","propertyCategory","getPropertyFromWeapon","getPrimaryWeaponsForCareer","canWieldPrimary","getSecondaryWeaponsForCareer","canWieldSecondary","getBuildStats","careers","career","primaryWeapons","secondaryWeapons","weaponData","properties","propertyData","count","traits","traitCategory","traitData","careerData","weapons"],"mappings":"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","sourcesContent":["import {heroesData} from '../data/Heroes'\r\nimport {meleeWeaponsData} from '../data/MeleeWeapons'\r\nimport {rangeWeaponsData} from '../data/RangeWeapons'\r\nimport {weaponsData} from '../data/Weapons'\r\nimport {traitsData} from '../data/Traits'\r\nimport {propertiesData} from '../data/Properties'\r\nimport { PatchList } from '../data/PatchList'\r\nimport {missionData} from '../data/Missions'\r\nimport {difficultyData} from '../data/Difficulties'\r\nimport {potionData} from '../data/Potions'\r\nimport {roleData} from '../data/Roles'\r\nimport {bookData} from '../data/Books'\r\nimport React from 'react';\r\nimport { db } from './Firebase'\r\n\r\nexport class DataHelper {\r\n    static getCareers = () => {\r\n      return heroesData;  \r\n    }\r\n    static getCareer = (careerId) => {\r\n        for (var i = 0; i < heroesData.length; i++) {\r\n            if (heroesData[i].id === parseInt(careerId)) {\r\n              return heroesData[i];\r\n            }\r\n          }\r\n        return null;\r\n    }\r\n    static getMeleeData = (careerId, id) => {  \r\n      console.log('getting melee data for id ' + id);\r\n      return meleeWeaponsData.find((weapon) => { return parseInt(weapon.id) === parseInt(id); });\r\n    }\r\n    static getRangeData = (careerId, id) => {\r\n      if ((parseInt(careerId) !== 6 && parseInt(careerId) !== 16)) {\r\n        return rangeWeaponsData.find((weapon) => { return parseInt(weapon.id) === parseInt(id); });\r\n      }\r\n      return meleeWeaponsData.find((weapon) => { return parseInt(weapon.id) === parseInt(id); });\r\n    }\r\n    static getTraitData = (id, type) => {\r\n      switch (type) {\r\n        case 'melee':\r\n          return traitsData.melee.find((trait) => { return parseInt(trait.id) === parseInt(id); });\r\n        case 'range':\r\n          return traitsData.range.find((trait) => { return parseInt(trait.id) === parseInt(id); });;\r\n        case 'necklace':\r\n          return traitsData.necklace.find((trait) => { return parseInt(trait.id) === parseInt(id); });;\r\n        case 'charm':\r\n          return traitsData.charm.find((trait) => { return parseInt(trait.id) === parseInt(id); });;\r\n        case 'trinket':\r\n          return traitsData.trinket.find((trait) => { return parseInt(trait.id) === parseInt(id); });;  \r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n    static getPropertyData = (id, type) => {\r\n      return propertiesData.find((trait) => { return parseInt(trait.id) === parseInt(id); });\r\n    }\r\n    static getPatchFromDate = (date) => {\r\n      var filteredPatchList = PatchList.filter((patch) => {\r\n          return patch.date < date;\r\n      });\r\n\r\n      return filteredPatchList[filteredPatchList.length - 1];\r\n    }\r\n\r\n    static getDaysSinceDate = (date) => {\r\n      var millisecondsPerDay = 24 * 60 * 60 * 1000;\r\n      return Math.floor((Date.parse(new Date()) - Date.parse(date)) / millisecondsPerDay);\r\n    }\r\n    \r\n    static getPatchFromDateForType = (date, updateType) => {\r\n      var filteredPatchList = PatchList.filter((patch) => {\r\n          return patch.date < date && patch.type === updateType;\r\n      });\r\n\r\n      return filteredPatchList[filteredPatchList.length - 1];\r\n    }\r\n\r\n    static getDataByIds = (data, ids) => {\r\n      return data.filter((item) => { return ids.includes(item.id); });\r\n    }\r\n\r\n    static getDifficultiesByIds = (ids) => {\r\n      return this.getDataByIds(difficultyData, ids);\r\n    }\r\n\r\n    static getMissionsByIds = (ids) => {\r\n      return this.getDataByIds(missionData, ids);\r\n    }\r\n\r\n    static getPotionsByIds = (ids) => {\r\n      return this.getDataByIds(potionData, ids);\r\n    }\r\n\r\n    static getRolesByIds = (ids) => {\r\n      return this.getDataByIds(roleData, ids);\r\n    }\r\n\r\n    static getBooksByIds = (ids) => {\r\n      return this.getDataByIds(bookData, ids);\r\n    }\r\n\r\n    static getMissionData = () => {\r\n      return missionData;\r\n    }\r\n    \r\n    static getDifficultyData = () => {\r\n      return difficultyData;\r\n    }\r\n    \r\n    static getPotionData = () => {\r\n      return potionData;\r\n    }\r\n    \r\n    static getRoleData = () => {\r\n      return roleData;\r\n    }\r\n\r\n    static getBookData = () => {\r\n      return bookData;\r\n    }\r\n\r\n    static renderListOptions = (data) => {\r\n      let html = [];\r\n      data.forEach(item => {\r\n          html.push(<option key={item.id} value={item.id}>{item.name}</option>);\r\n      });\r\n      return html;\r\n    }\r\n\r\n    static getPropertiesForCategory = (category) => {\r\n      switch (category) {\r\n        case \"melee\":\r\n          return propertiesData.melee;\r\n        case \"range\":\r\n          return propertiesData.range;\r\n        case \"necklace\":\r\n          return propertiesData.necklace;\r\n        case \"charm\":\r\n          return propertiesData.charm;\r\n        case \"trinket\":\r\n          return propertiesData.trinket;\r\n      }\r\n    }\r\n\r\n    static getPropertyFromCategory = (category, propertyId) => {\r\n      switch (category) {\r\n        case \"melee\":\r\n          return propertiesData.melee.find((property) => { return parseInt(property.id) === parseInt(propertyId); });\r\n        case \"range\":\r\n          return propertiesData.range.find((property) => { return parseInt(property.id) === parseInt(propertyId); });\r\n        case \"necklace\":\r\n          return propertiesData.necklace.find((property) => { return parseInt(property.id) === parseInt(propertyId); });\r\n        case \"charm\":\r\n          return propertiesData.charm.find((property) => { return parseInt(property.id) === parseInt(propertyId); });\r\n        case \"trinket\":\r\n          return propertiesData.trinket.find((property) => { return parseInt(property.id) === parseInt(propertyId); });\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n\r\n    static getTraitFromCategory = (category, traitId) => {\r\n      switch (category) {\r\n        case \"melee\":\r\n          return traitsData.melee.find((property) => { return parseInt(property.id) === parseInt(traitId); });\r\n        case \"range\":\r\n          return traitsData.range.find((property) => { return parseInt(property.id) === parseInt(traitId); });\r\n        case \"magic\":\r\n          return traitsData.magic.find((property) => { return parseInt(property.id) === parseInt(traitId); });\r\n        case \"necklace\":\r\n          return traitsData.necklace.find((property) => { return parseInt(property.id) === parseInt(traitId); });\r\n        case \"charm\":\r\n          return traitsData.charm.find((property) => { return parseInt(property.id) === parseInt(traitId); });\r\n        case \"trinket\":\r\n          return traitsData.trinket.find((property) => { return parseInt(property.id) === parseInt(traitId); });\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n\r\n    static getTraitsForCategory = (category) => {\r\n      switch (category) {\r\n        case \"melee\":\r\n          return traitsData.melee;\r\n        case \"range\":\r\n          return traitsData.range;\r\n        case \"magic\":\r\n          return traitsData.magic;\r\n        case \"necklace\":\r\n          return traitsData.necklace;\r\n        case \"charm\":\r\n          return traitsData.charm;\r\n        case \"trinket\":\r\n          return traitsData.trinket;   \r\n      }\r\n    }\r\n\r\n    static getWeapon = (weaponId) => {\r\n      //alert(weaponId);\r\n      return weaponsData.find((weapon) => { return weapon.id === parseInt(weaponId); });\r\n    }\r\n\r\n    static getTraitFromWeapon = (weaponId, traitId) => {\r\n      var weapon = this.getWeapon(weaponId);\r\n      if (!weapon) {\r\n        return;\r\n      }\r\n      return this.getTraitFromCategory(weapon.propertyCategory, traitId);\r\n    }\r\n\r\n    static getPropertyFromWeapon = (weaponId, propertyId) => {\r\n      var weapon = this.getWeapon(weaponId);\r\n      if (!weapon) {\r\n        return;\r\n      }\r\n      return this.getPropertyFromCategory(weapon.propertyCategory, propertyId);\r\n    }\r\n\r\n    static getPrimaryWeaponsForCareer = (careerId) => {\r\n      return weaponsData.filter((weapon) => { return weapon.canWieldPrimary.includes(parseInt(careerId)); });\r\n    }\r\n\r\n    static getSecondaryWeaponsForCareer = (careerId) => {\r\n      return weaponsData.filter((weapon) => { return weapon.canWieldSecondary.includes(parseInt(careerId)); });\r\n    }\r\n\r\n    static getBuildStats = () => {\r\n      let careers = [];\r\n\r\n      this.getCareers().forEach((career) => {\r\n        let primaryWeapons = this.getPrimaryWeaponsForCareer(career.id);\r\n        let secondaryWeapons = this.getSecondaryWeaponsForCareer(career.id);\r\n\r\n        let weaponData = [];\r\n\r\n        primaryWeapons.forEach((weapon) => {\r\n          let properties = this.getPropertiesForCategory(weapon.propertyCategory)\r\n\r\n          let propertyData = [];\r\n          properties.forEach((property) => {\r\n            propertyData.push({\r\n              id: property.id,\r\n              count: 0\r\n            });\r\n          });\r\n\r\n          let traits = this.getTraitsForCategory(weapon.traitCategory);\r\n\r\n          let traitData = [];\r\n          traits.forEach((trait) => {\r\n            traitData.push({\r\n              id: trait.id,\r\n              count: 0\r\n            });\r\n          });\r\n\r\n          weaponData.push({\r\n            id: weapon.id,\r\n            count: 0,\r\n            properties: propertyData,\r\n            traits: traitData\r\n          });\r\n        });\r\n\r\n        secondaryWeapons.forEach((weapon) => {\r\n          let properties = this.getPropertiesForCategory(weapon.propertyCategory)\r\n\r\n          let propertyData = [];\r\n          properties.forEach((property) => {\r\n            propertyData.push({\r\n              id: property.id,\r\n              count: 0\r\n            });\r\n          });\r\n\r\n          let traits = this.getTraitsForCategory(weapon.traitCategory);\r\n\r\n          let traitData = [];\r\n          traits.forEach((trait) => {\r\n            traitData.push({\r\n              id: trait.id,\r\n              count: 0\r\n            });\r\n          });\r\n\r\n          weaponData.push({\r\n            id: weapon.id,\r\n            count: 0,\r\n            properties: propertyData,\r\n            traits: traitData\r\n          });\r\n        });\r\n\r\n        let careerData = {\r\n          id: career.id,\r\n          count: 0,\r\n          weapons: weaponData\r\n        };\r\n\r\n        careers.push(careerData);\r\n      });\r\n      console.log(careers);\r\n/* \r\n      db.collection('builds').doc('stats').get().then((document) => {\r\n        console.log(document.data());\r\n      }); */\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}