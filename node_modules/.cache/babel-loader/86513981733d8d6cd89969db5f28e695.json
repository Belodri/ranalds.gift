{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\components\\\\buildList\\\\PagedBuildList.js\";\nimport React, { Component } from 'react';\nimport './BuildList.css';\nimport './BuildListItem.css';\nimport BuildListItem from './BuildListItem';\nimport 'simplebar/dist/simplebar.min.css';\nimport BuildsListStore from '../../stores/PagedBuildListStore';\nimport { db } from '../../utils/Firebase';\nimport { AppContext } from '../../stores/Store';\nimport BuildList from './BuildList';\nimport BuildListContainer from './BuildListContainer';\nimport PagedBuildListStore from '../../stores/PagedBuildListStore'; // accept a userid, if no id provided get all builds with page limits\n// if an id is passed, get the builds for this user only\n\nclass PagedBuildList extends Component {\n  constructor(props) {\n    super(props);\n    /* \r\n        this.state = {\r\n          builds: [],\r\n          isDataLoaded: false\r\n        }; */\n  } //current page index and total pages from props\n  //specify the type of build list... or make specific types of build lists...\n  //filters based on properties: userid, careerid, patch\n  //static contextType = AppContext;\n\n\n  render() {\n    //const [state, updateState] = this.context;\n\n    /*     if (!this.state.isDataLoaded) {\r\n          let buildList = [];\r\n      \r\n          let buildsQuery = db.collection(\"builds\");\r\n      \r\n          var filters = [{ field: 'userId', comparison: '==', value: 'il853JiLs8VoxVPRU97p0kxp8Ks2' }];\r\n      \r\n          if (this.props.filters) {\r\n            filters = this.props.filters;\r\n          }\r\n      \r\n          filters.forEach((filter) => {\r\n            buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n          });\r\n      \r\n          buildsQuery.limit(10).get().then((querySnapshot) => {\r\n            querySnapshot.forEach((build) => {\r\n              buildList.push({ id: build.id, data: build.data()});\r\n            });\r\n      \r\n            this.setState({builds: buildList, isDataLoaded: true})\r\n          });\r\n        } */\n    return /*#__PURE__*/React.createElement(PagedBuildListStore, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(BuildListContainer, {\n      filters: this.props.filters,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default PagedBuildList;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildList/PagedBuildList.js"],"names":["React","Component","BuildListItem","BuildsListStore","db","AppContext","BuildList","BuildListContainer","PagedBuildListStore","PagedBuildList","constructor","props","render","filters"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,iBAAP;AACA,OAAO,qBAAP;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,kCAAP;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,SAASC,EAAT,QAAmB,sBAAnB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,mBAAP,MAAgC,kCAAhC,C,CAEA;AACA;;AAEA,MAAMC,cAAN,SAA6BR,SAA7B,CAAuC;AACrCS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEJ;;;;;AAKG,GAToC,CAYrC;AAEA;AACA;AAEA;;;AAEAC,EAAAA,MAAM,GAAG;AACP;;AAGJ;;;;;;;;;;;;;;;;;;;;;;;AAwBI,wBACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,kBAAD;AAAoB,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AApDoC;;AAuDvC,eAAeJ,cAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport './BuildList.css';\r\nimport './BuildListItem.css';\r\nimport BuildListItem from './BuildListItem';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport BuildsListStore from '../../stores/PagedBuildListStore';\r\nimport { db } from '../../utils/Firebase';\r\nimport { AppContext } from '../../stores/Store';\r\nimport BuildList from './BuildList';\r\nimport BuildListContainer from './BuildListContainer';\r\nimport PagedBuildListStore from '../../stores/PagedBuildListStore';\r\n\r\n// accept a userid, if no id provided get all builds with page limits\r\n// if an id is passed, get the builds for this user only\r\n\r\nclass PagedBuildList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n/* \r\n    this.state = {\r\n      builds: [],\r\n      isDataLoaded: false\r\n    }; */\r\n  }\r\n\r\n\r\n  //current page index and total pages from props\r\n\r\n  //specify the type of build list... or make specific types of build lists...\r\n  //filters based on properties: userid, careerid, patch\r\n\r\n  //static contextType = AppContext;\r\n\r\n  render() {\r\n    //const [state, updateState] = this.context;\r\n\r\n\r\n/*     if (!this.state.isDataLoaded) {\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = db.collection(\"builds\");\r\n  \r\n      var filters = [{ field: 'userId', comparison: '==', value: 'il853JiLs8VoxVPRU97p0kxp8Ks2' }];\r\n  \r\n      if (this.props.filters) {\r\n        filters = this.props.filters;\r\n      }\r\n  \r\n      filters.forEach((filter) => {\r\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n      });\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n  \r\n        this.setState({builds: buildList, isDataLoaded: true})\r\n      });\r\n    } */\r\n\r\n    return (\r\n      <PagedBuildListStore>\r\n        <BuildListContainer filters={this.props.filters}></BuildListContainer>\r\n      </PagedBuildListStore>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PagedBuildList;"]},"metadata":{},"sourceType":"module"}