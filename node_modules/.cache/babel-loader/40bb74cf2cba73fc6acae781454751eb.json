{"ast":null,"code":"import _classCallCheck from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import'./BuildList.css';import'./BuildListItem.css';import BuildListItem from'./BuildListItem';import'simplebar/dist/simplebar.min.css';import BuildsListStore from'../../stores/PagedBuildListStore';import{db}from'../../utils/Firebase';import{AppContext}from'../../stores/Store';import BuildList from'./BuildList';import BuildListContainer from'./BuildListContainer';import PagedBuildListStore from'../../stores/PagedBuildListStore';// accept a userid, if no id provided get all builds with page limits\n// if an id is passed, get the builds for this user only\nvar PagedBuildList=/*#__PURE__*/function(_Component){_inherits(PagedBuildList,_Component);var _super=_createSuper(PagedBuildList);function PagedBuildList(props){_classCallCheck(this,PagedBuildList);return _super.call(this,props);/* \r\n    this.state = {\r\n      builds: [],\r\n      isDataLoaded: false\r\n    }; */}//current page index and total pages from props\n//specify the type of build list... or make specific types of build lists...\n//filters based on properties: userid, careerid, patch\n//static contextType = AppContext;\n_createClass(PagedBuildList,[{key:\"render\",value:function render(){//const [state, updateState] = this.context;\n/*     if (!this.state.isDataLoaded) {\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = db.collection(\"builds\");\r\n  \r\n      var filters = [{ field: 'userId', comparison: '==', value: 'il853JiLs8VoxVPRU97p0kxp8Ks2' }];\r\n  \r\n      if (this.props.filters) {\r\n        filters = this.props.filters;\r\n      }\r\n  \r\n      filters.forEach((filter) => {\r\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n      });\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n  \r\n        this.setState({builds: buildList, isDataLoaded: true})\r\n      });\r\n    } */return/*#__PURE__*/React.createElement(PagedBuildListStore,null,/*#__PURE__*/React.createElement(BuildListContainer,null));}}]);return PagedBuildList;}(Component);export default PagedBuildList;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildList/PagedBuildList.js"],"names":["React","Component","BuildListItem","BuildsListStore","db","AppContext","BuildList","BuildListContainer","PagedBuildListStore","PagedBuildList","props"],"mappings":"4jBAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,MAAO,iBAAP,CACA,MAAO,qBAAP,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAO,kCAAP,CACA,MAAOC,CAAAA,eAAP,KAA4B,kCAA5B,CACA,OAASC,EAAT,KAAmB,sBAAnB,CACA,OAASC,UAAT,KAA2B,oBAA3B,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,sBAA/B,CACA,MAAOC,CAAAA,mBAAP,KAAgC,kCAAhC,CAEA;AACA;GAEMC,CAAAA,c,gHACJ,wBAAYC,KAAZ,CAAmB,8DACXA,KADW,EAGrB;;;;SAKG,CAGD;AAEA;AACA;AAEA;kEAES,CACP;AAGJ;;;;;;;;;;;;;;;;;;;;;;QAwBI,mBACE,oBAAC,mBAAD,mBACE,oBAAC,kBAAD,MADF,CADF,CAKD,C,4BApD0BT,S,EAuD7B,cAAeQ,CAAAA,cAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport './BuildList.css';\r\nimport './BuildListItem.css';\r\nimport BuildListItem from './BuildListItem';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport BuildsListStore from '../../stores/PagedBuildListStore';\r\nimport { db } from '../../utils/Firebase';\r\nimport { AppContext } from '../../stores/Store';\r\nimport BuildList from './BuildList';\r\nimport BuildListContainer from './BuildListContainer';\r\nimport PagedBuildListStore from '../../stores/PagedBuildListStore';\r\n\r\n// accept a userid, if no id provided get all builds with page limits\r\n// if an id is passed, get the builds for this user only\r\n\r\nclass PagedBuildList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n/* \r\n    this.state = {\r\n      builds: [],\r\n      isDataLoaded: false\r\n    }; */\r\n  }\r\n\r\n\r\n  //current page index and total pages from props\r\n\r\n  //specify the type of build list... or make specific types of build lists...\r\n  //filters based on properties: userid, careerid, patch\r\n\r\n  //static contextType = AppContext;\r\n\r\n  render() {\r\n    //const [state, updateState] = this.context;\r\n\r\n\r\n/*     if (!this.state.isDataLoaded) {\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = db.collection(\"builds\");\r\n  \r\n      var filters = [{ field: 'userId', comparison: '==', value: 'il853JiLs8VoxVPRU97p0kxp8Ks2' }];\r\n  \r\n      if (this.props.filters) {\r\n        filters = this.props.filters;\r\n      }\r\n  \r\n      filters.forEach((filter) => {\r\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n      });\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n  \r\n        this.setState({builds: buildList, isDataLoaded: true})\r\n      });\r\n    } */\r\n\r\n    return (\r\n      <PagedBuildListStore>\r\n        <BuildListContainer></BuildListContainer>\r\n      </PagedBuildListStore>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PagedBuildList;"]},"metadata":{},"sourceType":"module"}