{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\components\\\\buildList\\\\BuildsList.js\";\nimport React, { Component, useEffect, useRef } from 'react';\nimport './BuildList.css';\nimport './BuildListItem.css';\nimport BuildListItem from './BuildListItem';\nimport 'simplebar/dist/simplebar.min.css';\nimport BuildsListStore from '../../stores/PagedBuildListStore';\nimport { db } from '../../utils/Firebase';\nimport { AppContext } from '../../stores/Store';\nimport { DataHelper } from '../../utils/DataHelper';\nimport MissionSelect from '../select/MissionSelect';\nimport DifficultySelect from '../select/DifficultySelect';\nimport RoleSelect from '../select/RoleSelect';\nimport PotionSelect from '../select/PotionSelect';\nimport HeroSelect from '../heroSelect/HeroSelect'; // accept a userid, if no id provided get all builds with page limits\n// if an id is passed, get the builds for this user only\n\nclass BuildsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      builds: [],\n      careerId: 0,\n      careers: [],\n      difficulties: [],\n      missions: [],\n      potions: [],\n      roles: [],\n      isDataLoaded: false,\n      isLoadingData: false,\n      filters: []\n    };\n  } //current page index and total pages from props\n  //specify the type of build list... or make specific types of build lists...\n  //filters based on properties: userid, careerid, patch\n  //static contextType = AppContext;\n  //accept props: \n  //filters\n  //current page number\n  //last build document\n\n\n  render() {\n    //get filters from props\n    //alert('rendering builds list');\n    console.log(this.state);\n\n    if (!this.state.isDataLoaded || this.state.careerId !== this.props.careerId) {\n      this.state.isLoadingData = true;\n      let buildList = [];\n      let buildsQuery = db.collection(\"builds\");\n      let filters = [];\n\n      if (this.props.careerId) {\n        console.log('builds list received career id ' + this.props.careerId);\n        filters.push({\n          field: 'careerId',\n          comparison: '==',\n          value: this.props.careerId\n        });\n      }\n\n      if (this.props.filters) {\n        filters = this.props.filters;\n      }\n\n      filters.forEach(filter => {\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\n      });\n      buildsQuery.limit(10).get().then(querySnapshot => {\n        querySnapshot.forEach(build => {\n          buildList.push({\n            id: build.id,\n            data: build.data()\n          });\n        });\n        console.log('updating builds list state');\n        console.log(buildList);\n        this.setState({\n          builds: buildList,\n          careerId: this.props.careerId,\n          isDataLoaded: true,\n          isLoadingData: false\n        });\n      });\n    }\n\n    if (this.state.isLoadingData) {\n      console.log('builds list data is still loading');\n      return /*#__PURE__*/React.createElement(\"div\", {\n        \"data-page-number\": 1,\n        \"data-last-page\": false,\n        className: \"build-list border-01 background-16\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        class: \"build-list-header header-underline\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }, \"List\"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-page-number\": 1,\n      \"data-last-page\": false,\n      className: \"build-list border-01 background-16\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, this.renderFilters(this.state.filters), /*#__PURE__*/React.createElement(\"span\", {\n      class: \"build-list-header header-underline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, \"List\"), this.renderBuilds(this.state.builds));\n  }\n\n  updateHeroSelect(e) {\n    var careerId = parseInt(e.target.dataset.career);\n\n    if (e.target.classList.contains('selected')) {\n      var careers = this.state.careers;\n      const index = careers.indexOf(careerId);\n\n      if (index > -1) {\n        careers.splice(index, 1);\n      }\n\n      this.setState({\n        careers: careers\n      });\n    } else {\n      var careers = this.state.careers;\n      careers.push(careerId);\n      this.setState({\n        careers: careers\n      });\n    }\n  }\n\n  renderFilters(filters) {\n    let filtersHtml = []; //handlers get passed to change the state\n    //state changed refreshes page\n\n    filtersHtml.push( /*#__PURE__*/React.createElement(HeroSelect, {\n      selectedValues: this.state.careers,\n      onSelect: this.updateHeroSelect.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(DifficultySelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(MissionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(PotionSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 22\n      }\n    }));\n    filtersHtml.push( /*#__PURE__*/React.createElement(RoleSelect, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 22\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"filter-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, filtersHtml);\n  }\n\n  renderBuilds(builds) {\n    console.log('list of builds to render');\n    console.log(builds);\n\n    if (!builds || builds.length === 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 14\n        }\n      }, \"No builds in database.\");\n    }\n\n    var buildsHtml = [];\n    builds.forEach(build => {\n      buildsHtml.push( /*#__PURE__*/React.createElement(BuildListItem, {\n        key: build.id,\n        buildId: build.id,\n        buildData: build.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 23\n        }\n      }));\n    });\n    return buildsHtml;\n  }\n\n}\n\nexport default BuildsList;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildList/BuildsList.js"],"names":["React","Component","useEffect","useRef","BuildListItem","BuildsListStore","db","AppContext","DataHelper","MissionSelect","DifficultySelect","RoleSelect","PotionSelect","HeroSelect","BuildsList","constructor","props","state","builds","careerId","careers","difficulties","missions","potions","roles","isDataLoaded","isLoadingData","filters","render","console","log","buildList","buildsQuery","collection","push","field","comparison","value","forEach","filter","where","limit","get","then","querySnapshot","build","id","data","setState","renderFilters","renderBuilds","updateHeroSelect","e","parseInt","target","dataset","career","classList","contains","index","indexOf","splice","filtersHtml","bind","length","buildsHtml"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useRef} from 'react';\r\nimport './BuildList.css';\r\nimport './BuildListItem.css';\r\nimport BuildListItem from './BuildListItem';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport BuildsListStore from '../../stores/PagedBuildListStore';\r\nimport { db } from '../../utils/Firebase';\r\nimport { AppContext } from '../../stores/Store';\r\nimport { DataHelper } from '../../utils/DataHelper';\r\nimport MissionSelect from '../select/MissionSelect';\r\nimport DifficultySelect from '../select/DifficultySelect';\r\nimport RoleSelect from '../select/RoleSelect';\r\nimport PotionSelect from '../select/PotionSelect';\r\nimport HeroSelect from '../heroSelect/HeroSelect';\r\n\r\n// accept a userid, if no id provided get all builds with page limits\r\n// if an id is passed, get the builds for this user only\r\n\r\nclass BuildsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n      builds: [],\r\n      careerId: 0,\r\n      careers: [],\r\n      difficulties: [],\r\n      missions: [],\r\n      potions: [],\r\n      roles: [],\r\n      isDataLoaded: false,\r\n      isLoadingData: false,\r\n      filters: []\r\n    };\r\n  }\r\n\r\n  //current page index and total pages from props\r\n\r\n  //specify the type of build list... or make specific types of build lists...\r\n  //filters based on properties: userid, careerid, patch\r\n\r\n  //static contextType = AppContext;\r\n\r\n\r\n  //accept props: \r\n  //filters\r\n  //current page number\r\n  //last build document\r\n\r\n  render() {\r\n    //get filters from props\r\n    //alert('rendering builds list');\r\n    console.log(this.state);\r\n\r\n    if (!this.state.isDataLoaded ||\r\n        this.state.careerId !== this.props.careerId) {\r\n\r\n      this.state.isLoadingData = true;\r\n\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = db.collection(\"builds\");\r\n  \r\n      let filters = [];\r\n\r\n      if (this.props.careerId) {\r\n        console.log('builds list received career id ' + this.props.careerId);\r\n        filters.push({ field: 'careerId', comparison: '==', value: this.props.careerId });\r\n      }\r\n  \r\n      if (this.props.filters) {\r\n        filters = this.props.filters;\r\n      }\r\n  \r\n      filters.forEach((filter) => {\r\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n      });\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n        console.log('updating builds list state');\r\n        console.log(buildList);\r\n        this.setState({builds: buildList, careerId: this.props.careerId, isDataLoaded: true, isLoadingData: false})\r\n      });\r\n    }\r\n\r\n    if (this.state.isLoadingData) {\r\n      console.log('builds list data is still loading');\r\n      \r\n      return (\r\n        <div data-page-number={1} data-last-page={false} className=\"build-list border-01 background-16\">\r\n          <span class=\"build-list-header header-underline\">List</span>\r\n          {/* <button className=\"build-list-page-button\" onClick={this.props.handleNextPage}>Next Page</button> */}\r\n        </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n          <div data-page-number={1} data-last-page={false} className=\"build-list border-01 background-16\">\r\n            {this.renderFilters(this.state.filters)}\r\n            <span class=\"build-list-header header-underline\">List</span>\r\n            {/* <button className=\"build-list-page-button\" onClick={this.props.handleNextPage}>Next Page</button> */}\r\n            {this.renderBuilds(this.state.builds)}\r\n          </div>\r\n    );\r\n  }\r\n\r\n  updateHeroSelect(e) {\r\n    var careerId = parseInt(e.target.dataset.career);\r\n    if (e.target.classList.contains('selected')) {\r\n      var careers = this.state.careers;\r\n      const index = careers.indexOf(careerId);\r\n      if (index > -1) {\r\n        careers.splice(index, 1);\r\n      }\r\n      this.setState({ careers: careers})\r\n    } else {\r\n      var careers = this.state.careers;\r\n      careers.push(careerId);\r\n      this.setState({ careers: careers})\r\n    }\r\n  }\r\n\r\n  renderFilters(filters) {\r\n    let filtersHtml = [];\r\n\r\n    //handlers get passed to change the state\r\n    //state changed refreshes page\r\n    filtersHtml.push(<HeroSelect selectedValues={this.state.careers} onSelect={this.updateHeroSelect.bind(this)}></HeroSelect>);\r\n    filtersHtml.push(<DifficultySelect></DifficultySelect>);\r\n    filtersHtml.push(<MissionSelect></MissionSelect>);\r\n    filtersHtml.push(<PotionSelect></PotionSelect>);\r\n    filtersHtml.push(<RoleSelect></RoleSelect>);\r\n\r\n\r\n    return (\r\n      <div class=\"filter-container\">\r\n        {filtersHtml}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderBuilds(builds) {\r\n    console.log('list of builds to render');\r\n    console.log(builds);\r\n    if (!builds || builds.length === 0) {\r\n      return <p>No builds in database.</p>;\r\n    }\r\n    var buildsHtml = [];\r\n    builds.forEach((build) => {\r\n      buildsHtml.push(<BuildListItem key={build.id} buildId={build.id} buildData={build.data}></BuildListItem>)\r\n    });\r\n    return buildsHtml;\r\n  }\r\n}\r\n\r\nexport default BuildsList;"]},"metadata":{},"sourceType":"module"}