{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\components\\\\select\\\\DifficultySelect.js\";\nimport React, { Component } from 'react';\nimport { DataHelper } from '../../utils/DataHelper';\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport { AppContext } from '../../stores/Store';\n\nclass DifficultySelect extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let onChangeHandler = this.props.onChangeHandler ? this.props.onChangeHandler : this.selectChangeHandler;\n    return /*#__PURE__*/React.createElement(Multiselect, {\n      closeIcon: \"cancel\",\n      closeOnSelect: false,\n      options: DataHelper.getDifficultyData(),\n      selectedValues: this.props.selectedValues,\n      displayValue: \"name\",\n      placeholder: \"Difficulty\",\n      hidePlaceholder: \"true\",\n      onSelect: onChangeHandler.bind(this),\n      onRemove: onChangeHandler.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    });\n  }\n\n  selectChangeHandler(selectedList, item) {\n    const [state, updateState] = this.context;\n    selectedValues = [];\n    selectedList.forEach(item => {\n      selectedValues.push(item.id);\n    });\n    updateState({\n      type: \"UPDATE_DIFFICULTY\",\n      payload: selectedValues\n    });\n  }\n\n}\n\nDifficultySelect.contextType = AppContext;\nexport default DifficultySelect;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/select/DifficultySelect.js"],"names":["React","Component","DataHelper","Multiselect","AppContext","DifficultySelect","constructor","props","render","onChangeHandler","selectChangeHandler","getDifficultyData","selectedValues","bind","selectedList","item","state","updateState","context","forEach","push","id","type","payload","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,UAAT,QAA2B,oBAA3B;;AAEA,MAAMC,gBAAN,SAA+BJ,SAA/B,CAAyC;AAGrCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AAEHC,EAAAA,MAAM,GAAG;AACL,QAAIC,eAAe,GAAG,KAAKF,KAAL,CAAWE,eAAX,GAA6B,KAAKF,KAAL,CAAWE,eAAxC,GAA0D,KAAKC,mBAArF;AAEA,wBACE,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,QAAvB;AAAgC,MAAA,aAAa,EAAE,KAA/C;AAAsD,MAAA,OAAO,EAAER,UAAU,CAACS,iBAAX,EAA/D;AAA+F,MAAA,cAAc,EAAE,KAAKJ,KAAL,CAAWK,cAA1H;AACC,MAAA,YAAY,EAAC,MADd;AACqB,MAAA,WAAW,EAAC,YADjC;AAC8C,MAAA,eAAe,EAAC,MAD9D;AAEC,MAAA,QAAQ,EAAEH,eAAe,CAACI,IAAhB,CAAqB,IAArB,CAFX;AAEuC,MAAA,QAAQ,EAAEJ,eAAe,CAACI,IAAhB,CAAqB,IAArB,CAFjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKH;;AAEDH,EAAAA,mBAAmB,CAACI,YAAD,EAAeC,IAAf,EAAsB;AACvC,UAAM,CAACC,KAAD,EAAQC,WAAR,IAAuB,KAAKC,OAAlC;AACAN,IAAAA,cAAc,GAAG,EAAjB;AACAE,IAAAA,YAAY,CAACK,OAAb,CAAsBJ,IAAD,IAAU;AAAEH,MAAAA,cAAc,CAACQ,IAAf,CAAoBL,IAAI,CAACM,EAAzB;AAA+B,KAAhE;AAEAJ,IAAAA,WAAW,CAAC;AACRK,MAAAA,IAAI,EAAE,mBADE;AAERC,MAAAA,OAAO,EAAEX;AAFD,KAAD,CAAX;AAID;;AA1BsC;;AAAnCP,gB,CACGmB,W,GAAcpB,U;AA4BvB,eAAeC,gBAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport { DataHelper } from '../../utils/DataHelper';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport { AppContext } from '../../stores/Store';\r\n\r\nclass DifficultySelect extends Component {\r\n  static contextType = AppContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n  render() {\r\n      let onChangeHandler = this.props.onChangeHandler ? this.props.onChangeHandler : this.selectChangeHandler;\r\n\r\n      return (\r\n        <Multiselect closeIcon=\"cancel\" closeOnSelect={false} options={DataHelper.getDifficultyData()} selectedValues={this.props.selectedValues}\r\n         displayValue=\"name\" placeholder=\"Difficulty\" hidePlaceholder=\"true\"\r\n         onSelect={onChangeHandler.bind(this)} onRemove={onChangeHandler.bind(this)}></Multiselect>\r\n    );\r\n  }\r\n\r\n  selectChangeHandler(selectedList, item)  {\r\n    const [state, updateState] = this.context;\r\n    selectedValues = [];\r\n    selectedList.forEach((item) => { selectedValues.push(item.id); });\r\n\r\n    updateState({\r\n        type: \"UPDATE_DIFFICULTY\", \r\n        payload: selectedValues\r\n    });\r\n  }\r\n}\r\n\r\nexport default DifficultySelect;"]},"metadata":{},"sourceType":"module"}