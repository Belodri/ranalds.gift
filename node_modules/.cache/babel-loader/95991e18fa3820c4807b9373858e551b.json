{"ast":null,"code":"import _slicedToArray from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useContext}from'react';import{Route,Switch,useParams,useRouteMatch}from'react-router';import{UserViewContext}from'../../stores/UserViewStore';import{auth,db}from'../../utils/Firebase';import UserEditPage from'./UserEditPage';import UserPage from'./UserPage';import'./UserPage.css';function UserPageContainer(){var _useContext=useContext(UserViewContext),_useContext2=_slicedToArray(_useContext,2),state=_useContext2[0],updateState=_useContext2[1];var _useRouteMatch=useRouteMatch(),path=_useRouteMatch.path;var params=useParams();console.log('rendering user page for uid '+params.userId);if(state.userId!==params.userId){var userId=params.userId;db.collection('users').doc(userId).get().then(function(doc){//console.log(\"Document data:\", doc.data());\nupdateState({type:\"UPDATE_USER_INFO\",payload:{userId:userId,username:doc.data().username,steam:doc.data().steam,twitch:doc.data().twitch,dateCreated:doc.data().dateCreated,dateModified:doc.data().dateModified}});db.collection('builds').where(\"userId\",\"==\",userId).get().then(function(querySnapshot){var userBuilds=[];querySnapshot.forEach(function(build){userBuilds.push({id:build.id,data:build.data()});});updateState({type:\"UPDATE_USER_BUILDS\",payload:userBuilds});});if(auth.currentUser.uid===userId){console.log('Authed user is user page user');db.collection('builds').where(\"likes\",\"array-contains\",userId).get().then(function(querySnapshot){var likedBuilds=[];querySnapshot.forEach(function(build){likedBuilds.push({id:build.id,data:build.data()});});updateState({type:\"UPDATE_LIKED_BUILDS\",payload:likedBuilds});});}});/*     auth.onAuthStateChanged((user) => {\r\n      if (user !== null) {        \r\n        console.log('Authed user detected, getting liked builds');\r\n\r\n        if (user.uid === state.userId) {\r\n          console.log('Authed user is user page user');\r\n\r\n          db.collection('builds').where(\"likes\", \"array-contains\", userId).get().then((querySnapshot) => {\r\n            var likedBuilds = [];\r\n            querySnapshot.forEach((build) => {\r\n              likedBuilds.push({ id: build.id, data: build.data()});\r\n            });\r\n  \r\n            updateState({\r\n              type: \"UPDATE_LIKED_BUILDS\", \r\n              payload: likedBuilds\r\n            }); \r\n          });\r\n        }        \r\n      }\r\n    }); */}var root=document.getElementById('root');root.dataset.pageName='userPage';//console.log('params uid: ' + state.userId);\nreturn/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{path:\"\".concat(path,\"/view\")},/*#__PURE__*/React.createElement(UserPage,{userId:state.userId})),/*#__PURE__*/React.createElement(Route,{path:\"\".concat(path,\"/edit\")},/*#__PURE__*/React.createElement(UserEditPage,null)));}export default UserPageContainer;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/users/UserPageContainer.js"],"names":["React","useContext","Route","Switch","useParams","useRouteMatch","UserViewContext","auth","db","UserEditPage","UserPage","UserPageContainer","state","updateState","path","params","console","log","userId","collection","doc","get","then","type","payload","username","data","steam","twitch","dateCreated","dateModified","where","querySnapshot","userBuilds","forEach","build","push","id","currentUser","uid","likedBuilds","root","document","getElementById","dataset","pageName"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport { Route, Switch, useParams, useRouteMatch } from 'react-router';\r\nimport { UserViewContext } from '../../stores/UserViewStore';\r\nimport { auth, db } from '../../utils/Firebase';\r\nimport UserEditPage from './UserEditPage';\r\nimport UserPage from './UserPage';\r\nimport './UserPage.css';\r\n\r\nfunction UserPageContainer() {\r\n  const [state, updateState] = useContext(UserViewContext);\r\n\r\n  const { path } = useRouteMatch();\r\n  let params = useParams();\r\n\r\n  console.log('rendering user page for uid ' + params.userId);\r\n\r\n  if (state.userId !== params.userId) {\r\n    var userId = params.userId;\r\n\r\n    db.collection('users').doc(userId).get().then((doc) => {\r\n      //console.log(\"Document data:\", doc.data());\r\n\r\n      updateState({\r\n        type: \"UPDATE_USER_INFO\", \r\n        payload: { \r\n          userId: userId,\r\n          username: doc.data().username,\r\n          steam: doc.data().steam,\r\n          twitch: doc.data().twitch,\r\n          dateCreated: doc.data().dateCreated,\r\n          dateModified: doc.data().dateModified\r\n        }\r\n      });\r\n      \r\n      db.collection('builds').where(\"userId\", \"==\", userId).get().then((querySnapshot) => {\r\n        var userBuilds = [];\r\n        querySnapshot.forEach((build) => {\r\n          userBuilds.push({ id: build.id, data: build.data()});\r\n        });\r\n\r\n        updateState({\r\n          type: \"UPDATE_USER_BUILDS\", \r\n          payload: userBuilds\r\n        }); \r\n      });\r\n\r\n      if (auth.currentUser.uid === userId) {\r\n        console.log('Authed user is user page user');\r\n\r\n        db.collection('builds').where(\"likes\", \"array-contains\", userId).get().then((querySnapshot) => {\r\n          var likedBuilds = [];\r\n          querySnapshot.forEach((build) => {\r\n            likedBuilds.push({ id: build.id, data: build.data()});\r\n          });\r\n\r\n          updateState({\r\n            type: \"UPDATE_LIKED_BUILDS\", \r\n            payload: likedBuilds\r\n          }); \r\n        });\r\n      }\r\n    });\r\n\r\n/*     auth.onAuthStateChanged((user) => {\r\n      if (user !== null) {        \r\n        console.log('Authed user detected, getting liked builds');\r\n\r\n        if (user.uid === state.userId) {\r\n          console.log('Authed user is user page user');\r\n\r\n          db.collection('builds').where(\"likes\", \"array-contains\", userId).get().then((querySnapshot) => {\r\n            var likedBuilds = [];\r\n            querySnapshot.forEach((build) => {\r\n              likedBuilds.push({ id: build.id, data: build.data()});\r\n            });\r\n  \r\n            updateState({\r\n              type: \"UPDATE_LIKED_BUILDS\", \r\n              payload: likedBuilds\r\n            }); \r\n          });\r\n        }        \r\n      }\r\n    }); */\r\n  }\r\n\r\n    var root = document.getElementById('root');\r\n    root.dataset.pageName = 'userPage';\r\n\r\n    //console.log('params uid: ' + state.userId);\r\n\r\n    return (\r\n      <Switch>\r\n        <Route path={`${path}/view`}>\r\n          <UserPage userId={state.userId}></UserPage>\r\n        </Route>\r\n        <Route path={`${path}/edit`}>\r\n          <UserEditPage></UserEditPage>\r\n        </Route>\r\n      </Switch>\r\n    );\r\n  }\r\n\r\nexport default UserPageContainer;"]},"metadata":{},"sourceType":"module"}