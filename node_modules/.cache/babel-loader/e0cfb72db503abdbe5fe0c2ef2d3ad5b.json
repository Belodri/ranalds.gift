{"ast":null,"code":"import _classCallCheck from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component,useEffect,useRef}from'react';import'./BuildList.css';import'./BuildListItem.css';import BuildListItem from'./BuildListItem';import'simplebar/dist/simplebar.min.css';import BuildsListStore from'../../stores/PagedBuildListStore';import{db}from'../../utils/Firebase';import{AppContext}from'../../stores/Store';// accept a userid, if no id provided get all builds with page limits\n// if an id is passed, get the builds for this user only\nvar BuildList=/*#__PURE__*/function(_Component){_inherits(BuildList,_Component);var _super=_createSuper(BuildList);function BuildList(props){_classCallCheck(this,BuildList);return _super.call(this,props);/*     this.state = {\r\n      builds: [],\r\n      isDataLoaded: false\r\n    }; */}//current page index and total pages from props\n//specify the type of build list... or make specific types of build lists...\n//filters based on properties: userid, careerid, patch\n//static contextType = AppContext;\n_createClass(BuildList,[{key:\"render\",value:function render(){//const [state, updateState] = this.context;\n/*     if (!this.state.isDataLoaded) {\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = db.collection(\"builds\");\r\n  \r\n      var filters = [{ field: 'userId', comparison: '==', value: 'il853JiLs8VoxVPRU97p0kxp8Ks2' }];\r\n  \r\n      if (this.props.filters) {\r\n        filters = this.props.filters;\r\n      }\r\n  \r\n      filters.forEach((filter) => {\r\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n      });\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n  \r\n        var builds = [];\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n  \r\n        this.setState({builds: buildList, isDataLoaded: true})\r\n      });\r\n    } */ /* \r\n     if (!this.state.isDataLoaded) {\r\n    this.setState({isDataLoaded: true})\r\n     } */return/*#__PURE__*/React.createElement(\"div\",{\"data-page-number\":1,\"data-last-page\":false,className:\"build-list border-01 background-16\"},/*#__PURE__*/React.createElement(\"span\",{class:\"build-list-header header-underline\"},this.props.name),this.renderBuilds(this.props.builds));}},{key:\"renderBuilds\",value:function renderBuilds(builds){console.log('list of builds to render');console.log(builds);if(!builds||builds.length===0){return/*#__PURE__*/React.createElement(\"p\",null,\"No \",this.props.name,\" in database.\");}var buildsHtml=[];builds.forEach(function(build){buildsHtml.push(/*#__PURE__*/React.createElement(BuildListItem,{key:build.id,buildId:build.id,buildData:build.data}));});return buildsHtml;}}]);return BuildList;}(Component);export default BuildList;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildList/BuildList.js"],"names":["React","Component","useEffect","useRef","BuildListItem","BuildsListStore","db","AppContext","BuildList","props","name","renderBuilds","builds","console","log","length","buildsHtml","forEach","build","push","id","data"],"mappings":"4jBAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,SAA1B,CAAqCC,MAArC,KAAkD,OAAlD,CACA,MAAO,iBAAP,CACA,MAAO,qBAAP,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAO,kCAAP,CACA,MAAOC,CAAAA,eAAP,KAA4B,kCAA5B,CACA,OAASC,EAAT,KAAmB,sBAAnB,CACA,OAASC,UAAT,KAA2B,oBAA3B,CAEA;AACA;GAEMC,CAAAA,S,sGACJ,mBAAYC,KAAZ,CAAmB,yDACXA,KADW,EAIrB;;;SAIG,CAED;AAEA;AACA;AAEA;6DAES,CACP;AAGJ;;;;;;;;;;;;;;;;;;;;;;;;QAJW,CA6BP;;;SAKA,mBACM,2BAAK,mBAAkB,CAAvB,CAA0B,iBAAgB,KAA1C,CAAiD,SAAS,CAAC,oCAA3D,eACE,4BAAM,KAAK,CAAC,oCAAZ,EAAkD,KAAKA,KAAL,CAAWC,IAA7D,CADF,CAGG,KAAKC,YAAL,CAAkB,KAAKF,KAAL,CAAWG,MAA7B,CAHH,CADN,CAOD,C,kDAEYA,M,CAAQ,CACnBC,OAAO,CAACC,GAAR,CAAY,0BAAZ,EACAD,OAAO,CAACC,GAAR,CAAYF,MAAZ,EACA,GAAI,CAACA,MAAD,EAAWA,MAAM,CAACG,MAAP,GAAkB,CAAjC,CAAoC,CAClC,mBAAO,mCAAO,KAAKN,KAAL,CAAWC,IAAlB,iBAAP,CACD,CACD,GAAIM,CAAAA,UAAU,CAAG,EAAjB,CACAJ,MAAM,CAACK,OAAP,CAAe,SAACC,KAAD,CAAW,CACxBF,UAAU,CAACG,IAAX,cAAgB,oBAAC,aAAD,EAAe,GAAG,CAAED,KAAK,CAACE,EAA1B,CAA8B,OAAO,CAAEF,KAAK,CAACE,EAA7C,CAAiD,SAAS,CAAEF,KAAK,CAACG,IAAlE,EAAhB,EACD,CAFD,EAGA,MAAOL,CAAAA,UAAP,CACD,C,uBAxEqBf,S,EA2ExB,cAAeO,CAAAA,SAAf","sourcesContent":["import React, {Component, useEffect, useRef} from 'react';\r\nimport './BuildList.css';\r\nimport './BuildListItem.css';\r\nimport BuildListItem from './BuildListItem';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport BuildsListStore from '../../stores/PagedBuildListStore';\r\nimport { db } from '../../utils/Firebase';\r\nimport { AppContext } from '../../stores/Store';\r\n\r\n// accept a userid, if no id provided get all builds with page limits\r\n// if an id is passed, get the builds for this user only\r\n\r\nclass BuildList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n/*     this.state = {\r\n      builds: [],\r\n      isDataLoaded: false\r\n    }; */\r\n  }\r\n\r\n  //current page index and total pages from props\r\n\r\n  //specify the type of build list... or make specific types of build lists...\r\n  //filters based on properties: userid, careerid, patch\r\n\r\n  //static contextType = AppContext;\r\n\r\n  render() {\r\n    //const [state, updateState] = this.context;\r\n\r\n\r\n/*     if (!this.state.isDataLoaded) {\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = db.collection(\"builds\");\r\n  \r\n      var filters = [{ field: 'userId', comparison: '==', value: 'il853JiLs8VoxVPRU97p0kxp8Ks2' }];\r\n  \r\n      if (this.props.filters) {\r\n        filters = this.props.filters;\r\n      }\r\n  \r\n      filters.forEach((filter) => {\r\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n      });\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n  \r\n        var builds = [];\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n  \r\n        this.setState({builds: buildList, isDataLoaded: true})\r\n      });\r\n    } */\r\n    /* \r\n     if (!this.state.isDataLoaded) {\r\n    this.setState({isDataLoaded: true})\r\n     } */\r\n\r\n    return (\r\n          <div data-page-number={1} data-last-page={false} className=\"build-list border-01 background-16\">\r\n            <span class=\"build-list-header header-underline\">{this.props.name}</span>\r\n            {/* <button className=\"build-list-page-button\" onClick={this.props.handleNextPage}>Next Page</button> */}\r\n            {this.renderBuilds(this.props.builds)}\r\n          </div>\r\n    );\r\n  }\r\n\r\n  renderBuilds(builds) {\r\n    console.log('list of builds to render');\r\n    console.log(builds);\r\n    if (!builds || builds.length === 0) {\r\n      return <p>No {this.props.name} in database.</p>;\r\n    }\r\n    var buildsHtml = [];\r\n    builds.forEach((build) => {\r\n      buildsHtml.push(<BuildListItem key={build.id} buildId={build.id} buildData={build.data}></BuildListItem>)\r\n    });\r\n    return buildsHtml;\r\n  }\r\n}\r\n\r\nexport default BuildList;"]},"metadata":{},"sourceType":"module"}