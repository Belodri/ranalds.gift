{"ast":null,"code":"/**\n * SimpleBar.js - v4.2.3\n * Scrollbars, simpler.\n * https://grsmto.github.io/simplebar/\n *\n * Made by Adrien Denat from a fork by Jonathan Nicol\n * Under MIT License\n */\nimport 'core-js/modules/es.string.replace';\nimport throttle from 'lodash.throttle';\nimport debounce from 'lodash.debounce';\nimport memoize from 'lodash.memoize';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport canUseDOM from 'can-use-dom';\n\nfunction scrollbarWidth() {\n  if (typeof document === 'undefined') {\n    return 0;\n  }\n\n  var body = document.body;\n  var box = document.createElement('div');\n  var boxStyle = box.style;\n  boxStyle.position = 'fixed';\n  boxStyle.left = 0;\n  boxStyle.visibility = 'hidden';\n  boxStyle.overflowY = 'scroll';\n  body.appendChild(box);\n  var width = box.getBoundingClientRect().right;\n  body.removeChild(box);\n  return width;\n}\n\nvar SimpleBar = /*#__PURE__*/function () {\n  function SimpleBar(element, options) {\n    var _this = this;\n\n    this.onScroll = function () {\n      if (!_this.scrollXTicking) {\n        window.requestAnimationFrame(_this.scrollX);\n        _this.scrollXTicking = true;\n      }\n\n      if (!_this.scrollYTicking) {\n        window.requestAnimationFrame(_this.scrollY);\n        _this.scrollYTicking = true;\n      }\n    };\n\n    this.scrollX = function () {\n      if (_this.axis.x.isOverflowing) {\n        _this.showScrollbar('x');\n\n        _this.positionScrollbar('x');\n      }\n\n      _this.scrollXTicking = false;\n    };\n\n    this.scrollY = function () {\n      if (_this.axis.y.isOverflowing) {\n        _this.showScrollbar('y');\n\n        _this.positionScrollbar('y');\n      }\n\n      _this.scrollYTicking = false;\n    };\n\n    this.onMouseEnter = function () {\n      _this.showScrollbar('x');\n\n      _this.showScrollbar('y');\n    };\n\n    this.onMouseMove = function (e) {\n      _this.mouseX = e.clientX;\n      _this.mouseY = e.clientY;\n\n      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n        _this.onMouseMoveForAxis('x');\n      }\n\n      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n        _this.onMouseMoveForAxis('y');\n      }\n    };\n\n    this.onMouseLeave = function () {\n      _this.onMouseMove.cancel();\n\n      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n        _this.onMouseLeaveForAxis('x');\n      }\n\n      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n        _this.onMouseLeaveForAxis('y');\n      }\n\n      _this.mouseX = -1;\n      _this.mouseY = -1;\n    };\n\n    this.onWindowResize = function () {\n      // Recalculate scrollbarWidth in case it's a zoom\n      _this.scrollbarWidth = scrollbarWidth();\n\n      _this.hideNativeScrollbar();\n    };\n\n    this.hideScrollbars = function () {\n      _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();\n      _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();\n\n      if (!_this.isWithinBounds(_this.axis.y.track.rect)) {\n        _this.axis.y.scrollbar.el.classList.remove(_this.classNames.visible);\n\n        _this.axis.y.isVisible = false;\n      }\n\n      if (!_this.isWithinBounds(_this.axis.x.track.rect)) {\n        _this.axis.x.scrollbar.el.classList.remove(_this.classNames.visible);\n\n        _this.axis.x.isVisible = false;\n      }\n    };\n\n    this.onPointerEvent = function (e) {\n      var isWithinBoundsY, isWithinBoundsX;\n      _this.axis.x.scrollbar.rect = _this.axis.x.scrollbar.el.getBoundingClientRect();\n      _this.axis.y.scrollbar.rect = _this.axis.y.scrollbar.el.getBoundingClientRect();\n\n      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n        isWithinBoundsX = _this.isWithinBounds(_this.axis.x.scrollbar.rect);\n      }\n\n      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n        isWithinBoundsY = _this.isWithinBounds(_this.axis.y.scrollbar.rect);\n      } // If any pointer event is called on the scrollbar\n\n\n      if (isWithinBoundsY || isWithinBoundsX) {\n        // Preventing the event's default action stops text being\n        // selectable during the drag.\n        e.preventDefault(); // Prevent event leaking\n\n        e.stopPropagation();\n\n        if (e.type === 'mousedown') {\n          if (isWithinBoundsY) {\n            _this.onDragStart(e, 'y');\n          }\n\n          if (isWithinBoundsX) {\n            _this.onDragStart(e, 'x');\n          }\n        }\n      }\n    };\n\n    this.drag = function (e) {\n      var eventOffset;\n      var track = _this.axis[_this.draggedAxis].track;\n      var trackSize = track.rect[_this.axis[_this.draggedAxis].sizeAttr];\n      var scrollbar = _this.axis[_this.draggedAxis].scrollbar;\n      var contentSize = _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollSizeAttr];\n      var hostSize = parseInt(_this.elStyles[_this.axis[_this.draggedAxis].sizeAttr], 10);\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (_this.draggedAxis === 'y') {\n        eventOffset = e.pageY;\n      } else {\n        eventOffset = e.pageX;\n      } // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\n\n\n      var dragPos = eventOffset - track.rect[_this.axis[_this.draggedAxis].offsetAttr] - _this.axis[_this.draggedAxis].dragOffset; // Convert the mouse position into a percentage of the scrollbar height/width.\n\n      var dragPerc = dragPos / (trackSize - scrollbar.size); // Scroll the content by the same percentage.\n\n      var scrollPos = dragPerc * (contentSize - hostSize); // Fix browsers inconsistency on RTL\n\n      if (_this.draggedAxis === 'x') {\n        scrollPos = _this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollbarInverted ? scrollPos - (trackSize + scrollbar.size) : scrollPos;\n        scrollPos = _this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollingInverted ? -scrollPos : scrollPos;\n      }\n\n      _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollOffsetAttr] = scrollPos;\n    };\n\n    this.onEndDrag = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this.el.classList.remove(_this.classNames.dragging);\n\n      document.removeEventListener('mousemove', _this.drag, true);\n      document.removeEventListener('mouseup', _this.onEndDrag, true);\n      _this.removePreventClickId = window.setTimeout(function () {\n        // Remove these asynchronously so we still suppress click events\n        // generated simultaneously with mouseup.\n        document.removeEventListener('click', _this.preventClick, true);\n        document.removeEventListener('dblclick', _this.preventClick, true);\n        _this.removePreventClickId = null;\n      });\n    };\n\n    this.preventClick = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    };\n\n    this.el = element;\n    this.flashTimeout;\n    this.contentEl;\n    this.contentWrapperEl;\n    this.offsetEl;\n    this.maskEl;\n    this.globalObserver;\n    this.mutationObserver;\n    this.resizeObserver;\n    this.scrollbarWidth;\n    this.minScrollbarWidth = 20;\n    this.options = Object.assign({}, SimpleBar.defaultOptions, options);\n    this.classNames = Object.assign({}, SimpleBar.defaultOptions.classNames, this.options.classNames);\n    this.isRtl;\n    this.axis = {\n      x: {\n        scrollOffsetAttr: 'scrollLeft',\n        sizeAttr: 'width',\n        scrollSizeAttr: 'scrollWidth',\n        offsetAttr: 'left',\n        overflowAttr: 'overflowX',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      },\n      y: {\n        scrollOffsetAttr: 'scrollTop',\n        sizeAttr: 'height',\n        scrollSizeAttr: 'scrollHeight',\n        offsetAttr: 'top',\n        overflowAttr: 'overflowY',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      }\n    };\n    this.removePreventClickId = null; // Don't re-instantiate over an existing one\n\n    if (this.el.SimpleBar) {\n      return;\n    }\n\n    this.recalculate = throttle(this.recalculate.bind(this), 64);\n    this.onMouseMove = throttle(this.onMouseMove.bind(this), 64);\n    this.hideScrollbars = debounce(this.hideScrollbars.bind(this), this.options.timeout);\n    this.onWindowResize = debounce(this.onWindowResize.bind(this), 64, {\n      leading: true\n    });\n    SimpleBar.getRtlHelpers = memoize(SimpleBar.getRtlHelpers);\n    this.init();\n  }\n  /**\n   * Static properties\n   */\n\n  /**\n   * Helper to fix browsers inconsistency on RTL:\n   *  - Firefox inverts the scrollbar initial position\n   *  - IE11 inverts both scrollbar position and scrolling offset\n   * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\n   */\n\n\n  SimpleBar.getRtlHelpers = function getRtlHelpers() {\n    var dummyDiv = document.createElement('div');\n    dummyDiv.innerHTML = '<div class=\"hs-dummy-scrollbar-size\"><div style=\"height: 200%; width: 200%; margin: 10px 0;\"></div></div>';\n    var scrollbarDummyEl = dummyDiv.firstElementChild;\n    document.body.appendChild(scrollbarDummyEl);\n    var dummyContainerChild = scrollbarDummyEl.firstElementChild;\n    scrollbarDummyEl.scrollLeft = 0;\n    var dummyContainerOffset = SimpleBar.getOffset(scrollbarDummyEl);\n    var dummyContainerChildOffset = SimpleBar.getOffset(dummyContainerChild);\n    scrollbarDummyEl.scrollLeft = 999;\n    var dummyContainerScrollOffsetAfterScroll = SimpleBar.getOffset(dummyContainerChild);\n    return {\n      // determines if the scrolling is responding with negative values\n      isRtlScrollingInverted: dummyContainerOffset.left !== dummyContainerChildOffset.left && dummyContainerChildOffset.left - dummyContainerScrollOffsetAfterScroll.left !== 0,\n      // determines if the origin scrollbar position is inverted or not (positioned on left or right)\n      isRtlScrollbarInverted: dummyContainerOffset.left !== dummyContainerChildOffset.left\n    };\n  };\n\n  SimpleBar.initHtmlApi = function initHtmlApi() {\n    this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this); // MutationObserver is IE11+\n\n    if (typeof MutationObserver !== 'undefined') {\n      // Mutation observer to observe dynamically added elements\n      this.globalObserver = new MutationObserver(function (mutations) {\n        mutations.forEach(function (mutation) {\n          Array.prototype.forEach.call(mutation.addedNodes, function (addedNode) {\n            if (addedNode.nodeType === 1) {\n              if (addedNode.hasAttribute('data-simplebar')) {\n                !addedNode.SimpleBar && new SimpleBar(addedNode, SimpleBar.getElOptions(addedNode));\n              } else {\n                Array.prototype.forEach.call(addedNode.querySelectorAll('[data-simplebar]'), function (el) {\n                  !el.SimpleBar && new SimpleBar(el, SimpleBar.getElOptions(el));\n                });\n              }\n            }\n          });\n          Array.prototype.forEach.call(mutation.removedNodes, function (removedNode) {\n            if (removedNode.nodeType === 1) {\n              if (removedNode.hasAttribute('data-simplebar')) {\n                removedNode.SimpleBar && removedNode.SimpleBar.unMount();\n              } else {\n                Array.prototype.forEach.call(removedNode.querySelectorAll('[data-simplebar]'), function (el) {\n                  el.SimpleBar && el.SimpleBar.unMount();\n                });\n              }\n            }\n          });\n        });\n      });\n      this.globalObserver.observe(document, {\n        childList: true,\n        subtree: true\n      });\n    } // Taken from jQuery `ready` function\n    // Instantiate elements already present on the page\n\n\n    if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {\n      // Handle it asynchronously to allow scripts the opportunity to delay init\n      window.setTimeout(this.initDOMLoadedElements);\n    } else {\n      document.addEventListener('DOMContentLoaded', this.initDOMLoadedElements);\n      window.addEventListener('load', this.initDOMLoadedElements);\n    }\n  } // Helper function to retrieve options from element attributes\n  ;\n\n  SimpleBar.getElOptions = function getElOptions(el) {\n    var options = Array.prototype.reduce.call(el.attributes, function (acc, attribute) {\n      var option = attribute.name.match(/data-simplebar-(.+)/);\n\n      if (option) {\n        var key = option[1].replace(/\\W+(.)/g, function (x, chr) {\n          return chr.toUpperCase();\n        });\n\n        switch (attribute.value) {\n          case 'true':\n            acc[key] = true;\n            break;\n\n          case 'false':\n            acc[key] = false;\n            break;\n\n          case undefined:\n            acc[key] = true;\n            break;\n\n          default:\n            acc[key] = attribute.value;\n        }\n      }\n\n      return acc;\n    }, {});\n    return options;\n  };\n\n  SimpleBar.removeObserver = function removeObserver() {\n    this.globalObserver.disconnect();\n  };\n\n  SimpleBar.initDOMLoadedElements = function initDOMLoadedElements() {\n    document.removeEventListener('DOMContentLoaded', this.initDOMLoadedElements);\n    window.removeEventListener('load', this.initDOMLoadedElements);\n    Array.prototype.forEach.call(document.querySelectorAll('[data-simplebar]'), function (el) {\n      if (!el.SimpleBar) new SimpleBar(el, SimpleBar.getElOptions(el));\n    });\n  };\n\n  SimpleBar.getOffset = function getOffset(el) {\n    var rect = el.getBoundingClientRect();\n    return {\n      top: rect.top + (window.pageYOffset || document.documentElement.scrollTop),\n      left: rect.left + (window.pageXOffset || document.documentElement.scrollLeft)\n    };\n  };\n\n  var _proto = SimpleBar.prototype;\n\n  _proto.init = function init() {\n    // Save a reference to the instance, so we know this DOM node has already been instancied\n    this.el.SimpleBar = this; // We stop here on server-side\n\n    if (canUseDOM) {\n      this.initDOM();\n      this.scrollbarWidth = scrollbarWidth();\n      this.recalculate();\n      this.initListeners();\n    }\n  };\n\n  _proto.initDOM = function initDOM() {\n    var _this2 = this; // make sure this element doesn't have the elements yet\n\n\n    if (Array.prototype.filter.call(this.el.children, function (child) {\n      return child.classList.contains(_this2.classNames.wrapper);\n    }).length) {\n      // assume that element has his DOM already initiated\n      this.wrapperEl = this.el.querySelector(\".\" + this.classNames.wrapper);\n      this.contentWrapperEl = this.el.querySelector(\".\" + this.classNames.contentWrapper);\n      this.offsetEl = this.el.querySelector(\".\" + this.classNames.offset);\n      this.maskEl = this.el.querySelector(\".\" + this.classNames.mask);\n      this.contentEl = this.el.querySelector(\".\" + this.classNames.contentEl);\n      this.placeholderEl = this.el.querySelector(\".\" + this.classNames.placeholder);\n      this.heightAutoObserverWrapperEl = this.el.querySelector(\".\" + this.classNames.heightAutoObserverWrapperEl);\n      this.heightAutoObserverEl = this.el.querySelector(\".\" + this.classNames.heightAutoObserverEl);\n      this.axis.x.track.el = this.findChild(this.el, \".\" + this.classNames.track + \".\" + this.classNames.horizontal);\n      this.axis.y.track.el = this.findChild(this.el, \".\" + this.classNames.track + \".\" + this.classNames.vertical);\n    } else {\n      // Prepare DOM\n      this.wrapperEl = document.createElement('div');\n      this.contentWrapperEl = document.createElement('div');\n      this.offsetEl = document.createElement('div');\n      this.maskEl = document.createElement('div');\n      this.contentEl = document.createElement('div');\n      this.placeholderEl = document.createElement('div');\n      this.heightAutoObserverWrapperEl = document.createElement('div');\n      this.heightAutoObserverEl = document.createElement('div');\n      this.wrapperEl.classList.add(this.classNames.wrapper);\n      this.contentWrapperEl.classList.add(this.classNames.contentWrapper);\n      this.offsetEl.classList.add(this.classNames.offset);\n      this.maskEl.classList.add(this.classNames.mask);\n      this.contentEl.classList.add(this.classNames.contentEl);\n      this.placeholderEl.classList.add(this.classNames.placeholder);\n      this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl);\n      this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl);\n\n      while (this.el.firstChild) {\n        this.contentEl.appendChild(this.el.firstChild);\n      }\n\n      this.contentWrapperEl.appendChild(this.contentEl);\n      this.offsetEl.appendChild(this.contentWrapperEl);\n      this.maskEl.appendChild(this.offsetEl);\n      this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);\n      this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);\n      this.wrapperEl.appendChild(this.maskEl);\n      this.wrapperEl.appendChild(this.placeholderEl);\n      this.el.appendChild(this.wrapperEl);\n    }\n\n    if (!this.axis.x.track.el || !this.axis.y.track.el) {\n      var track = document.createElement('div');\n      var scrollbar = document.createElement('div');\n      track.classList.add(this.classNames.track);\n      scrollbar.classList.add(this.classNames.scrollbar);\n      track.appendChild(scrollbar);\n      this.axis.x.track.el = track.cloneNode(true);\n      this.axis.x.track.el.classList.add(this.classNames.horizontal);\n      this.axis.y.track.el = track.cloneNode(true);\n      this.axis.y.track.el.classList.add(this.classNames.vertical);\n      this.el.appendChild(this.axis.x.track.el);\n      this.el.appendChild(this.axis.y.track.el);\n    }\n\n    this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector(\".\" + this.classNames.scrollbar);\n    this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector(\".\" + this.classNames.scrollbar);\n\n    if (!this.options.autoHide) {\n      this.axis.x.scrollbar.el.classList.add(this.classNames.visible);\n      this.axis.y.scrollbar.el.classList.add(this.classNames.visible);\n    }\n\n    this.el.setAttribute('data-simplebar', 'init');\n  };\n\n  _proto.initListeners = function initListeners() {\n    var _this3 = this; // Event listeners\n\n\n    if (this.options.autoHide) {\n      this.el.addEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(function (e) {\n      _this3.el.addEventListener(e, _this3.onPointerEvent, true);\n    });\n    ['touchstart', 'touchend', 'touchmove'].forEach(function (e) {\n      _this3.el.addEventListener(e, _this3.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n    this.el.addEventListener('mousemove', this.onMouseMove);\n    this.el.addEventListener('mouseleave', this.onMouseLeave);\n    this.contentWrapperEl.addEventListener('scroll', this.onScroll); // Browser zoom triggers a window resize\n\n    window.addEventListener('resize', this.onWindowResize);\n    this.resizeObserver = new ResizeObserver(this.recalculate);\n    this.resizeObserver.observe(this.el);\n    this.resizeObserver.observe(this.contentEl);\n  };\n\n  _proto.recalculate = function recalculate() {\n    var isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\n    var isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1;\n    this.elStyles = window.getComputedStyle(this.el);\n    this.isRtl = this.elStyles.direction === 'rtl';\n    this.contentEl.style.padding = this.elStyles.paddingTop + \" \" + this.elStyles.paddingRight + \" \" + this.elStyles.paddingBottom + \" \" + this.elStyles.paddingLeft;\n    this.wrapperEl.style.margin = \"-\" + this.elStyles.paddingTop + \" -\" + this.elStyles.paddingRight + \" -\" + this.elStyles.paddingBottom + \" -\" + this.elStyles.paddingLeft;\n    this.contentWrapperEl.style.height = isHeightAuto ? 'auto' : '100%'; // Determine placeholder size\n\n    this.placeholderEl.style.width = isWidthAuto ? this.contentEl.offsetWidth + \"px\" : 'auto';\n    this.placeholderEl.style.height = this.contentEl.scrollHeight + \"px\"; // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\n\n    this.axis.x.isOverflowing = this.contentWrapperEl.scrollWidth > this.contentWrapperEl.offsetWidth;\n    this.axis.y.isOverflowing = this.contentWrapperEl.scrollHeight > this.contentWrapperEl.offsetHeight; // Set isOverflowing to false if user explicitely set hidden overflow\n\n    this.axis.x.isOverflowing = this.elStyles.overflowX === 'hidden' ? false : this.axis.x.isOverflowing;\n    this.axis.y.isOverflowing = this.elStyles.overflowY === 'hidden' ? false : this.axis.y.isOverflowing;\n    this.axis.x.forceVisible = this.options.forceVisible === 'x' || this.options.forceVisible === true;\n    this.axis.y.forceVisible = this.options.forceVisible === 'y' || this.options.forceVisible === true;\n    this.hideNativeScrollbar();\n    this.axis.x.track.rect = this.axis.x.track.el.getBoundingClientRect();\n    this.axis.y.track.rect = this.axis.y.track.el.getBoundingClientRect();\n    this.axis.x.scrollbar.size = this.getScrollbarSize('x');\n    this.axis.y.scrollbar.size = this.getScrollbarSize('y');\n    this.axis.x.scrollbar.el.style.width = this.axis.x.scrollbar.size + \"px\";\n    this.axis.y.scrollbar.el.style.height = this.axis.y.scrollbar.size + \"px\";\n    this.positionScrollbar('x');\n    this.positionScrollbar('y');\n    this.toggleTrackVisibility('x');\n    this.toggleTrackVisibility('y');\n  }\n  /**\n   * Calculate scrollbar size\n   */\n  ;\n\n  _proto.getScrollbarSize = function getScrollbarSize(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    var contentSize = this.scrollbarWidth ? this.contentWrapperEl[this.axis[axis].scrollSizeAttr] : this.contentWrapperEl[this.axis[axis].scrollSizeAttr] - this.minScrollbarWidth;\n    var trackSize = this.axis[axis].track.rect[this.axis[axis].sizeAttr];\n    var scrollbarSize;\n\n    if (!this.axis[axis].isOverflowing) {\n      return;\n    }\n\n    var scrollbarRatio = trackSize / contentSize; // Calculate new height/position of drag handle.\n\n    scrollbarSize = Math.max(~~(scrollbarRatio * trackSize), this.options.scrollbarMinSize);\n\n    if (this.options.scrollbarMaxSize) {\n      scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\n    }\n\n    return scrollbarSize;\n  };\n\n  _proto.positionScrollbar = function positionScrollbar(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    var contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\n    var trackSize = this.axis[axis].track.rect[this.axis[axis].sizeAttr];\n    var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    var scrollbar = this.axis[axis].scrollbar;\n    var scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    scrollOffset = axis === 'x' && this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollingInverted ? -scrollOffset : scrollOffset;\n    var scrollPourcent = scrollOffset / (contentSize - hostSize);\n    var handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\n    handleOffset = axis === 'x' && this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollbarInverted ? handleOffset + (trackSize - scrollbar.size) : handleOffset;\n    scrollbar.el.style.transform = axis === 'x' ? \"translate3d(\" + handleOffset + \"px, 0, 0)\" : \"translate3d(0, \" + handleOffset + \"px, 0)\";\n  };\n\n  _proto.toggleTrackVisibility = function toggleTrackVisibility(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    var track = this.axis[axis].track.el;\n    var scrollbar = this.axis[axis].scrollbar.el;\n\n    if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\n      track.style.visibility = 'visible';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'scroll';\n    } else {\n      track.style.visibility = 'hidden';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'hidden';\n    } // Even if forceVisible is enabled, scrollbar itself should be hidden\n\n\n    if (this.axis[axis].isOverflowing) {\n      scrollbar.style.display = 'block';\n    } else {\n      scrollbar.style.display = 'none';\n    }\n  };\n\n  _proto.hideNativeScrollbar = function hideNativeScrollbar() {\n    this.offsetEl.style[this.isRtl ? 'left' : 'right'] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? \"-\" + (this.scrollbarWidth || this.minScrollbarWidth) + \"px\" : 0;\n    this.offsetEl.style.bottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? \"-\" + (this.scrollbarWidth || this.minScrollbarWidth) + \"px\" : 0; // If floating scrollbar\n\n    if (!this.scrollbarWidth) {\n      var paddingDirection = [this.isRtl ? 'paddingLeft' : 'paddingRight'];\n      this.contentWrapperEl.style[paddingDirection] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? this.minScrollbarWidth + \"px\" : 0;\n      this.contentWrapperEl.style.paddingBottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? this.minScrollbarWidth + \"px\" : 0;\n    }\n  }\n  /**\n   * On scroll event handling\n   */\n  ;\n\n  _proto.onMouseMoveForAxis = function onMouseMoveForAxis(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    this.axis[axis].track.rect = this.axis[axis].track.el.getBoundingClientRect();\n    this.axis[axis].scrollbar.rect = this.axis[axis].scrollbar.el.getBoundingClientRect();\n    var isWithinScrollbarBoundsX = this.isWithinBounds(this.axis[axis].scrollbar.rect);\n\n    if (isWithinScrollbarBoundsX) {\n      this.axis[axis].scrollbar.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n    }\n\n    if (this.isWithinBounds(this.axis[axis].track.rect)) {\n      this.showScrollbar(axis);\n      this.axis[axis].track.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    }\n  };\n\n  _proto.onMouseLeaveForAxis = function onMouseLeaveForAxis(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n  };\n  /**\n   * Show scrollbar\n   */\n\n\n  _proto.showScrollbar = function showScrollbar(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    var scrollbar = this.axis[axis].scrollbar.el;\n\n    if (!this.axis[axis].isVisible) {\n      scrollbar.classList.add(this.classNames.visible);\n      this.axis[axis].isVisible = true;\n    }\n\n    if (this.options.autoHide) {\n      this.hideScrollbars();\n    }\n  }\n  /**\n   * Hide Scrollbar\n   */\n  ;\n  /**\n   * on scrollbar handle drag movement starts\n   */\n\n\n  _proto.onDragStart = function onDragStart(e, axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    var scrollbar = this.axis[axis].scrollbar.el; // Measure how far the user's mouse is from the top of the scrollbar drag handle.\n\n    var eventOffset = axis === 'y' ? e.pageY : e.pageX;\n    this.axis[axis].dragOffset = eventOffset - scrollbar.getBoundingClientRect()[this.axis[axis].offsetAttr];\n    this.draggedAxis = axis;\n    this.el.classList.add(this.classNames.dragging);\n    document.addEventListener('mousemove', this.drag, true);\n    document.addEventListener('mouseup', this.onEndDrag, true);\n\n    if (this.removePreventClickId === null) {\n      document.addEventListener('click', this.preventClick, true);\n      document.addEventListener('dblclick', this.preventClick, true);\n    } else {\n      window.clearTimeout(this.removePreventClickId);\n      this.removePreventClickId = null;\n    }\n  }\n  /**\n   * Drag scrollbar handle\n   */\n  ;\n  /**\n   * Getter for content element\n   */\n\n\n  _proto.getContentElement = function getContentElement() {\n    return this.contentEl;\n  }\n  /**\n   * Getter for original scrolling element\n   */\n  ;\n\n  _proto.getScrollElement = function getScrollElement() {\n    return this.contentWrapperEl;\n  };\n\n  _proto.removeListeners = function removeListeners() {\n    var _this4 = this; // Event listeners\n\n\n    if (this.options.autoHide) {\n      this.el.removeEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(function (e) {\n      _this4.el.removeEventListener(e, _this4.onPointerEvent, true);\n    });\n    ['touchstart', 'touchend', 'touchmove'].forEach(function (e) {\n      _this4.el.removeEventListener(e, _this4.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n    this.el.removeEventListener('mousemove', this.onMouseMove);\n    this.el.removeEventListener('mouseleave', this.onMouseLeave);\n    this.contentWrapperEl.removeEventListener('scroll', this.onScroll);\n    window.removeEventListener('resize', this.onWindowResize);\n    this.mutationObserver && this.mutationObserver.disconnect();\n    this.resizeObserver.disconnect(); // Cancel all debounced functions\n\n    this.recalculate.cancel();\n    this.onMouseMove.cancel();\n    this.hideScrollbars.cancel();\n    this.onWindowResize.cancel();\n  }\n  /**\n   * UnMount mutation observer and delete SimpleBar instance from DOM element\n   */\n  ;\n\n  _proto.unMount = function unMount() {\n    this.removeListeners();\n    this.el.SimpleBar = null;\n  }\n  /**\n   * Recursively walks up the parent nodes looking for this.el\n   */\n  ;\n\n  _proto.isChildNode = function isChildNode(el) {\n    if (el === null) return false;\n    if (el === this.el) return true;\n    return this.isChildNode(el.parentNode);\n  }\n  /**\n   * Check if mouse is within bounds\n   */\n  ;\n\n  _proto.isWithinBounds = function isWithinBounds(bbox) {\n    return this.mouseX >= bbox.left && this.mouseX <= bbox.left + bbox.width && this.mouseY >= bbox.top && this.mouseY <= bbox.top + bbox.height;\n  }\n  /**\n   * Find element children matches query\n   */\n  ;\n\n  _proto.findChild = function findChild(el, query) {\n    var matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n    return Array.prototype.filter.call(el.children, function (child) {\n      return matches.call(child, query);\n    })[0];\n  };\n\n  return SimpleBar;\n}();\n/**\n * HTML API\n * Called only in a browser env.\n */\n\n\nSimpleBar.defaultOptions = {\n  autoHide: true,\n  forceVisible: false,\n  classNames: {\n    contentEl: 'simplebar-content',\n    contentWrapper: 'simplebar-content-wrapper',\n    offset: 'simplebar-offset',\n    mask: 'simplebar-mask',\n    wrapper: 'simplebar-wrapper',\n    placeholder: 'simplebar-placeholder',\n    scrollbar: 'simplebar-scrollbar',\n    track: 'simplebar-track',\n    heightAutoObserverWrapperEl: 'simplebar-height-auto-observer-wrapper',\n    heightAutoObserverEl: 'simplebar-height-auto-observer',\n    visible: 'simplebar-visible',\n    horizontal: 'simplebar-horizontal',\n    vertical: 'simplebar-vertical',\n    hover: 'simplebar-hover',\n    dragging: 'simplebar-dragging'\n  },\n  scrollbarMinSize: 25,\n  scrollbarMaxSize: 0,\n  timeout: 1000\n};\n\nif (canUseDOM) {\n  SimpleBar.initHtmlApi();\n}\n\nexport default SimpleBar;","map":{"version":3,"sources":["../src/scrollbar-width.js","../src/simplebar.js"],"names":["body","document","box","boxStyle","width","SimpleBar","x","scrollOffsetAttr","sizeAttr","scrollSizeAttr","offsetAttr","overflowAttr","dragOffset","isOverflowing","isVisible","forceVisible","track","scrollbar","y","throttle","debounce","leading","memoize","getRtlHelpers","dummyDiv","scrollbarDummyEl","dummyContainerChild","dummyContainerOffset","dummyContainerChildOffset","dummyContainerScrollOffsetAfterScroll","isRtlScrollingInverted","isRtlScrollbarInverted","left","defaultOptions","autoHide","classNames","contentEl","contentWrapper","offset","mask","wrapper","placeholder","heightAutoObserverWrapperEl","heightAutoObserverEl","visible","horizontal","vertical","hover","dragging","scrollbarMinSize","scrollbarMaxSize","timeout","initHtmlApi","mutations","Array","mutation","addedNode","el","removedNode","childList","subtree","window","getElOptions","options","option","attribute","key","chr","acc","removeObserver","initDOMLoadedElements","getOffset","rect","top","init","scrollbarWidth","initDOM","child","initListeners","capture","passive","recalculate","isHeightAuto","isWidthAuto","getScrollbarSize","axis","contentSize","trackSize","scrollbarRatio","scrollbarSize","Math","positionScrollbar","hostSize","parseInt","scrollOffset","scrollPourcent","handleOffset","toggleTrackVisibility","hideNativeScrollbar","paddingDirection","e","onMouseMoveForAxis","isWithinScrollbarBoundsX","onMouseLeaveForAxis","showScrollbar","isWithinBoundsX","isWithinBoundsY","onDragStart","eventOffset","dragPos","dragPerc","scrollPos","getContentElement","getScrollElement","removeListeners","unMount","isChildNode","isWithinBounds","bbox","findChild","matches"],"mappings":"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","sourcesContent":["export default function scrollbarWidth() {\n  if (typeof document === 'undefined') {\n    return 0;\n  }\n\n  const body = document.body;\n  const box = document.createElement('div');\n  const boxStyle = box.style;\n\n  boxStyle.position = 'fixed';\n  boxStyle.left = 0;\n  boxStyle.visibility = 'hidden';\n  boxStyle.overflowY = 'scroll';\n\n  body.appendChild(box);\n\n  const width = box.getBoundingClientRect().right;\n\n  body.removeChild(box);\n\n  return width;\n}\n","import throttle from 'lodash.throttle';\nimport debounce from 'lodash.debounce';\nimport memoize from 'lodash.memoize';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport canUseDOM from 'can-use-dom';\nimport scrollbarWidth from './scrollbar-width';\n\nexport default class SimpleBar {\n  constructor(element, options) {\n    this.el = element;\n    this.flashTimeout;\n    this.contentEl;\n    this.contentWrapperEl;\n    this.offsetEl;\n    this.maskEl;\n    this.globalObserver;\n    this.mutationObserver;\n    this.resizeObserver;\n    this.scrollbarWidth;\n    this.minScrollbarWidth = 20;\n    this.options = { ...SimpleBar.defaultOptions, ...options };\n    this.classNames = {\n      ...SimpleBar.defaultOptions.classNames,\n      ...this.options.classNames\n    };\n    this.isRtl;\n    this.axis = {\n      x: {\n        scrollOffsetAttr: 'scrollLeft',\n        sizeAttr: 'width',\n        scrollSizeAttr: 'scrollWidth',\n        offsetAttr: 'left',\n        overflowAttr: 'overflowX',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      },\n      y: {\n        scrollOffsetAttr: 'scrollTop',\n        sizeAttr: 'height',\n        scrollSizeAttr: 'scrollHeight',\n        offsetAttr: 'top',\n        overflowAttr: 'overflowY',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      }\n    };\n    this.removePreventClickId = null;\n\n    // Don't re-instantiate over an existing one\n    if (this.el.SimpleBar) {\n      return;\n    }\n\n    this.recalculate = throttle(this.recalculate.bind(this), 64);\n    this.onMouseMove = throttle(this.onMouseMove.bind(this), 64);\n    this.hideScrollbars = debounce(\n      this.hideScrollbars.bind(this),\n      this.options.timeout\n    );\n    this.onWindowResize = debounce(this.onWindowResize.bind(this), 64, {\n      leading: true\n    });\n\n    SimpleBar.getRtlHelpers = memoize(SimpleBar.getRtlHelpers);\n\n    this.init();\n  }\n\n  /**\n   * Static properties\n   */\n\n  /**\n   * Helper to fix browsers inconsistency on RTL:\n   *  - Firefox inverts the scrollbar initial position\n   *  - IE11 inverts both scrollbar position and scrolling offset\n   * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\n   */\n  static getRtlHelpers() {\n    const dummyDiv = document.createElement('div');\n    dummyDiv.innerHTML =\n      '<div class=\"hs-dummy-scrollbar-size\"><div style=\"height: 200%; width: 200%; margin: 10px 0;\"></div></div>';\n    const scrollbarDummyEl = dummyDiv.firstElementChild;\n    document.body.appendChild(scrollbarDummyEl);\n    const dummyContainerChild = scrollbarDummyEl.firstElementChild;\n    scrollbarDummyEl.scrollLeft = 0;\n    const dummyContainerOffset = SimpleBar.getOffset(scrollbarDummyEl);\n    const dummyContainerChildOffset = SimpleBar.getOffset(dummyContainerChild);\n    scrollbarDummyEl.scrollLeft = 999;\n    const dummyContainerScrollOffsetAfterScroll = SimpleBar.getOffset(\n      dummyContainerChild\n    );\n\n    return {\n      // determines if the scrolling is responding with negative values\n      isRtlScrollingInverted:\n        dummyContainerOffset.left !== dummyContainerChildOffset.left &&\n        dummyContainerChildOffset.left -\n          dummyContainerScrollOffsetAfterScroll.left !==\n          0,\n      // determines if the origin scrollbar position is inverted or not (positioned on left or right)\n      isRtlScrollbarInverted:\n        dummyContainerOffset.left !== dummyContainerChildOffset.left\n    };\n  }\n\n  static defaultOptions = {\n    autoHide: true,\n    forceVisible: false,\n    classNames: {\n      contentEl: 'simplebar-content',\n      contentWrapper: 'simplebar-content-wrapper',\n      offset: 'simplebar-offset',\n      mask: 'simplebar-mask',\n      wrapper: 'simplebar-wrapper',\n      placeholder: 'simplebar-placeholder',\n      scrollbar: 'simplebar-scrollbar',\n      track: 'simplebar-track',\n      heightAutoObserverWrapperEl: 'simplebar-height-auto-observer-wrapper',\n      heightAutoObserverEl: 'simplebar-height-auto-observer',\n      visible: 'simplebar-visible',\n      horizontal: 'simplebar-horizontal',\n      vertical: 'simplebar-vertical',\n      hover: 'simplebar-hover',\n      dragging: 'simplebar-dragging'\n    },\n    scrollbarMinSize: 25,\n    scrollbarMaxSize: 0,\n    timeout: 1000\n  };\n\n  static initHtmlApi() {\n    this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this);\n\n    // MutationObserver is IE11+\n    if (typeof MutationObserver !== 'undefined') {\n      // Mutation observer to observe dynamically added elements\n      this.globalObserver = new MutationObserver(mutations => {\n        mutations.forEach(mutation => {\n          Array.prototype.forEach.call(mutation.addedNodes, addedNode => {\n            if (addedNode.nodeType === 1) {\n              if (addedNode.hasAttribute('data-simplebar')) {\n                !addedNode.SimpleBar &&\n                  new SimpleBar(addedNode, SimpleBar.getElOptions(addedNode));\n              } else {\n                Array.prototype.forEach.call(\n                  addedNode.querySelectorAll('[data-simplebar]'),\n                  el => {\n                    !el.SimpleBar &&\n                      new SimpleBar(el, SimpleBar.getElOptions(el));\n                  }\n                );\n              }\n            }\n          });\n\n          Array.prototype.forEach.call(mutation.removedNodes, removedNode => {\n            if (removedNode.nodeType === 1) {\n              if (removedNode.hasAttribute('data-simplebar')) {\n                removedNode.SimpleBar && removedNode.SimpleBar.unMount();\n              } else {\n                Array.prototype.forEach.call(\n                  removedNode.querySelectorAll('[data-simplebar]'),\n                  el => {\n                    el.SimpleBar && el.SimpleBar.unMount();\n                  }\n                );\n              }\n            }\n          });\n        });\n      });\n\n      this.globalObserver.observe(document, { childList: true, subtree: true });\n    }\n\n    // Taken from jQuery `ready` function\n    // Instantiate elements already present on the page\n    if (\n      document.readyState === 'complete' ||\n      (document.readyState !== 'loading' && !document.documentElement.doScroll)\n    ) {\n      // Handle it asynchronously to allow scripts the opportunity to delay init\n      window.setTimeout(this.initDOMLoadedElements);\n    } else {\n      document.addEventListener('DOMContentLoaded', this.initDOMLoadedElements);\n      window.addEventListener('load', this.initDOMLoadedElements);\n    }\n  }\n\n  // Helper function to retrieve options from element attributes\n  static getElOptions(el) {\n    const options = Array.prototype.reduce.call(\n      el.attributes,\n      (acc, attribute) => {\n        const option = attribute.name.match(/data-simplebar-(.+)/);\n        if (option) {\n          const key = option[1].replace(/\\W+(.)/g, (x, chr) =>\n            chr.toUpperCase()\n          );\n          switch (attribute.value) {\n            case 'true':\n              acc[key] = true;\n              break;\n            case 'false':\n              acc[key] = false;\n              break;\n            case undefined:\n              acc[key] = true;\n              break;\n            default:\n              acc[key] = attribute.value;\n          }\n        }\n        return acc;\n      },\n      {}\n    );\n    return options;\n  }\n\n  static removeObserver() {\n    this.globalObserver.disconnect();\n  }\n\n  static initDOMLoadedElements() {\n    document.removeEventListener(\n      'DOMContentLoaded',\n      this.initDOMLoadedElements\n    );\n    window.removeEventListener('load', this.initDOMLoadedElements);\n\n    Array.prototype.forEach.call(\n      document.querySelectorAll('[data-simplebar]'),\n      el => {\n        if (!el.SimpleBar) new SimpleBar(el, SimpleBar.getElOptions(el));\n      }\n    );\n  }\n\n  static getOffset(el) {\n    const rect = el.getBoundingClientRect();\n\n    return {\n      top:\n        rect.top + (window.pageYOffset || document.documentElement.scrollTop),\n      left:\n        rect.left + (window.pageXOffset || document.documentElement.scrollLeft)\n    };\n  }\n\n  init() {\n    // Save a reference to the instance, so we know this DOM node has already been instancied\n    this.el.SimpleBar = this;\n\n    // We stop here on server-side\n    if (canUseDOM) {\n      this.initDOM();\n\n      this.scrollbarWidth = scrollbarWidth();\n\n      this.recalculate();\n\n      this.initListeners();\n    }\n  }\n\n  initDOM() {\n    // make sure this element doesn't have the elements yet\n    if (\n      Array.prototype.filter.call(this.el.children, child =>\n        child.classList.contains(this.classNames.wrapper)\n      ).length\n    ) {\n      // assume that element has his DOM already initiated\n      this.wrapperEl = this.el.querySelector(`.${this.classNames.wrapper}`);\n      this.contentWrapperEl = this.el.querySelector(\n        `.${this.classNames.contentWrapper}`\n      );\n      this.offsetEl = this.el.querySelector(`.${this.classNames.offset}`);\n      this.maskEl = this.el.querySelector(`.${this.classNames.mask}`);\n      this.contentEl = this.el.querySelector(`.${this.classNames.contentEl}`);\n      this.placeholderEl = this.el.querySelector(\n        `.${this.classNames.placeholder}`\n      );\n      this.heightAutoObserverWrapperEl = this.el.querySelector(\n        `.${this.classNames.heightAutoObserverWrapperEl}`\n      );\n      this.heightAutoObserverEl = this.el.querySelector(\n        `.${this.classNames.heightAutoObserverEl}`\n      );\n      this.axis.x.track.el = this.findChild(\n        this.el,\n        `.${this.classNames.track}.${this.classNames.horizontal}`\n      );\n      this.axis.y.track.el = this.findChild(\n        this.el,\n        `.${this.classNames.track}.${this.classNames.vertical}`\n      );\n    } else {\n      // Prepare DOM\n      this.wrapperEl = document.createElement('div');\n      this.contentWrapperEl = document.createElement('div');\n      this.offsetEl = document.createElement('div');\n      this.maskEl = document.createElement('div');\n      this.contentEl = document.createElement('div');\n      this.placeholderEl = document.createElement('div');\n      this.heightAutoObserverWrapperEl = document.createElement('div');\n      this.heightAutoObserverEl = document.createElement('div');\n\n      this.wrapperEl.classList.add(this.classNames.wrapper);\n      this.contentWrapperEl.classList.add(this.classNames.contentWrapper);\n      this.offsetEl.classList.add(this.classNames.offset);\n      this.maskEl.classList.add(this.classNames.mask);\n      this.contentEl.classList.add(this.classNames.contentEl);\n      this.placeholderEl.classList.add(this.classNames.placeholder);\n      this.heightAutoObserverWrapperEl.classList.add(\n        this.classNames.heightAutoObserverWrapperEl\n      );\n      this.heightAutoObserverEl.classList.add(\n        this.classNames.heightAutoObserverEl\n      );\n\n      while (this.el.firstChild) {\n        this.contentEl.appendChild(this.el.firstChild);\n      }\n\n      this.contentWrapperEl.appendChild(this.contentEl);\n      this.offsetEl.appendChild(this.contentWrapperEl);\n      this.maskEl.appendChild(this.offsetEl);\n      this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);\n      this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);\n      this.wrapperEl.appendChild(this.maskEl);\n      this.wrapperEl.appendChild(this.placeholderEl);\n      this.el.appendChild(this.wrapperEl);\n    }\n\n    if (!this.axis.x.track.el || !this.axis.y.track.el) {\n      const track = document.createElement('div');\n      const scrollbar = document.createElement('div');\n\n      track.classList.add(this.classNames.track);\n      scrollbar.classList.add(this.classNames.scrollbar);\n\n      track.appendChild(scrollbar);\n\n      this.axis.x.track.el = track.cloneNode(true);\n      this.axis.x.track.el.classList.add(this.classNames.horizontal);\n\n      this.axis.y.track.el = track.cloneNode(true);\n      this.axis.y.track.el.classList.add(this.classNames.vertical);\n\n      this.el.appendChild(this.axis.x.track.el);\n      this.el.appendChild(this.axis.y.track.el);\n    }\n\n    this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector(\n      `.${this.classNames.scrollbar}`\n    );\n    this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector(\n      `.${this.classNames.scrollbar}`\n    );\n\n    if (!this.options.autoHide) {\n      this.axis.x.scrollbar.el.classList.add(this.classNames.visible);\n      this.axis.y.scrollbar.el.classList.add(this.classNames.visible);\n    }\n\n    this.el.setAttribute('data-simplebar', 'init');\n  }\n\n  initListeners() {\n    // Event listeners\n    if (this.options.autoHide) {\n      this.el.addEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(e => {\n      this.el.addEventListener(e, this.onPointerEvent, true);\n    });\n\n    ['touchstart', 'touchend', 'touchmove'].forEach(e => {\n      this.el.addEventListener(e, this.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n\n    this.el.addEventListener('mousemove', this.onMouseMove);\n    this.el.addEventListener('mouseleave', this.onMouseLeave);\n\n    this.contentWrapperEl.addEventListener('scroll', this.onScroll);\n\n    // Browser zoom triggers a window resize\n    window.addEventListener('resize', this.onWindowResize);\n\n    this.resizeObserver = new ResizeObserver(this.recalculate);\n    this.resizeObserver.observe(this.el);\n    this.resizeObserver.observe(this.contentEl);\n  }\n\n  recalculate() {\n    const isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\n    const isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1;\n\n    this.elStyles = window.getComputedStyle(this.el);\n    this.isRtl = this.elStyles.direction === 'rtl';\n\n    this.contentEl.style.padding = `${this.elStyles.paddingTop} ${\n      this.elStyles.paddingRight\n    } ${this.elStyles.paddingBottom} ${this.elStyles.paddingLeft}`;\n\n    this.wrapperEl.style.margin = `-${this.elStyles.paddingTop} -${\n      this.elStyles.paddingRight\n    } -${this.elStyles.paddingBottom} -${this.elStyles.paddingLeft}`;\n\n    this.contentWrapperEl.style.height = isHeightAuto ? 'auto' : '100%';\n\n    // Determine placeholder size\n    this.placeholderEl.style.width = isWidthAuto\n      ? `${this.contentEl.offsetWidth}px`\n      : 'auto';\n    this.placeholderEl.style.height = `${this.contentEl.scrollHeight}px`;\n\n    // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\n    this.axis.x.isOverflowing =\n      this.contentWrapperEl.scrollWidth > this.contentWrapperEl.offsetWidth;\n    this.axis.y.isOverflowing =\n      this.contentWrapperEl.scrollHeight > this.contentWrapperEl.offsetHeight;\n\n    // Set isOverflowing to false if user explicitely set hidden overflow\n    this.axis.x.isOverflowing =\n      this.elStyles.overflowX === 'hidden' ? false : this.axis.x.isOverflowing;\n    this.axis.y.isOverflowing =\n      this.elStyles.overflowY === 'hidden' ? false : this.axis.y.isOverflowing;\n\n    this.axis.x.forceVisible =\n      this.options.forceVisible === 'x' || this.options.forceVisible === true;\n    this.axis.y.forceVisible =\n      this.options.forceVisible === 'y' || this.options.forceVisible === true;\n\n    this.hideNativeScrollbar();\n\n    this.axis.x.track.rect = this.axis.x.track.el.getBoundingClientRect();\n    this.axis.y.track.rect = this.axis.y.track.el.getBoundingClientRect();\n\n    this.axis.x.scrollbar.size = this.getScrollbarSize('x');\n    this.axis.y.scrollbar.size = this.getScrollbarSize('y');\n\n    this.axis.x.scrollbar.el.style.width = `${this.axis.x.scrollbar.size}px`;\n    this.axis.y.scrollbar.el.style.height = `${this.axis.y.scrollbar.size}px`;\n\n    this.positionScrollbar('x');\n    this.positionScrollbar('y');\n\n    this.toggleTrackVisibility('x');\n    this.toggleTrackVisibility('y');\n  }\n\n  /**\n   * Calculate scrollbar size\n   */\n  getScrollbarSize(axis = 'y') {\n    const contentSize = this.scrollbarWidth\n      ? this.contentWrapperEl[this.axis[axis].scrollSizeAttr]\n      : this.contentWrapperEl[this.axis[axis].scrollSizeAttr] -\n        this.minScrollbarWidth;\n    const trackSize = this.axis[axis].track.rect[this.axis[axis].sizeAttr];\n    let scrollbarSize;\n\n    if (!this.axis[axis].isOverflowing) {\n      return;\n    }\n\n    let scrollbarRatio = trackSize / contentSize;\n\n    // Calculate new height/position of drag handle.\n    scrollbarSize = Math.max(\n      ~~(scrollbarRatio * trackSize),\n      this.options.scrollbarMinSize\n    );\n\n    if (this.options.scrollbarMaxSize) {\n      scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\n    }\n\n    return scrollbarSize;\n  }\n\n  positionScrollbar(axis = 'y') {\n    const contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\n    const trackSize = this.axis[axis].track.rect[this.axis[axis].sizeAttr];\n    const hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    const scrollbar = this.axis[axis].scrollbar;\n\n    let scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    scrollOffset =\n      axis === 'x' &&\n      this.isRtl &&\n      SimpleBar.getRtlHelpers().isRtlScrollingInverted\n        ? -scrollOffset\n        : scrollOffset;\n    let scrollPourcent = scrollOffset / (contentSize - hostSize);\n\n    let handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\n    handleOffset =\n      axis === 'x' &&\n      this.isRtl &&\n      SimpleBar.getRtlHelpers().isRtlScrollbarInverted\n        ? handleOffset + (trackSize - scrollbar.size)\n        : handleOffset;\n\n    scrollbar.el.style.transform =\n      axis === 'x'\n        ? `translate3d(${handleOffset}px, 0, 0)`\n        : `translate3d(0, ${handleOffset}px, 0)`;\n  }\n\n  toggleTrackVisibility(axis = 'y') {\n    const track = this.axis[axis].track.el;\n    const scrollbar = this.axis[axis].scrollbar.el;\n\n    if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\n      track.style.visibility = 'visible';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'scroll';\n    } else {\n      track.style.visibility = 'hidden';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'hidden';\n    }\n\n    // Even if forceVisible is enabled, scrollbar itself should be hidden\n    if (this.axis[axis].isOverflowing) {\n      scrollbar.style.display = 'block';\n    } else {\n      scrollbar.style.display = 'none';\n    }\n  }\n\n  hideNativeScrollbar() {\n    this.offsetEl.style[this.isRtl ? 'left' : 'right'] =\n      this.axis.y.isOverflowing || this.axis.y.forceVisible\n        ? `-${this.scrollbarWidth || this.minScrollbarWidth}px`\n        : 0;\n    this.offsetEl.style.bottom =\n      this.axis.x.isOverflowing || this.axis.x.forceVisible\n        ? `-${this.scrollbarWidth || this.minScrollbarWidth}px`\n        : 0;\n\n    // If floating scrollbar\n    if (!this.scrollbarWidth) {\n      const paddingDirection = [this.isRtl ? 'paddingLeft' : 'paddingRight'];\n      this.contentWrapperEl.style[paddingDirection] =\n        this.axis.y.isOverflowing || this.axis.y.forceVisible\n          ? `${this.minScrollbarWidth}px`\n          : 0;\n      this.contentWrapperEl.style.paddingBottom =\n        this.axis.x.isOverflowing || this.axis.x.forceVisible\n          ? `${this.minScrollbarWidth}px`\n          : 0;\n    }\n  }\n\n  /**\n   * On scroll event handling\n   */\n  onScroll = () => {\n    if (!this.scrollXTicking) {\n      window.requestAnimationFrame(this.scrollX);\n      this.scrollXTicking = true;\n    }\n\n    if (!this.scrollYTicking) {\n      window.requestAnimationFrame(this.scrollY);\n      this.scrollYTicking = true;\n    }\n  };\n\n  scrollX = () => {\n    if (this.axis.x.isOverflowing) {\n      this.showScrollbar('x');\n      this.positionScrollbar('x');\n    }\n\n    this.scrollXTicking = false;\n  };\n\n  scrollY = () => {\n    if (this.axis.y.isOverflowing) {\n      this.showScrollbar('y');\n      this.positionScrollbar('y');\n    }\n\n    this.scrollYTicking = false;\n  };\n\n  onMouseEnter = () => {\n    this.showScrollbar('x');\n    this.showScrollbar('y');\n  };\n\n  onMouseMove = e => {\n    this.mouseX = e.clientX;\n    this.mouseY = e.clientY;\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      this.onMouseMoveForAxis('x');\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      this.onMouseMoveForAxis('y');\n    }\n  };\n\n  onMouseMoveForAxis(axis = 'y') {\n    this.axis[axis].track.rect = this.axis[\n      axis\n    ].track.el.getBoundingClientRect();\n    this.axis[axis].scrollbar.rect = this.axis[\n      axis\n    ].scrollbar.el.getBoundingClientRect();\n\n    const isWithinScrollbarBoundsX = this.isWithinBounds(\n      this.axis[axis].scrollbar.rect\n    );\n\n    if (isWithinScrollbarBoundsX) {\n      this.axis[axis].scrollbar.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n    }\n\n    if (this.isWithinBounds(this.axis[axis].track.rect)) {\n      this.showScrollbar(axis);\n      this.axis[axis].track.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    }\n  }\n\n  onMouseLeave = () => {\n    this.onMouseMove.cancel();\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      this.onMouseLeaveForAxis('x');\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      this.onMouseLeaveForAxis('y');\n    }\n\n    this.mouseX = -1;\n    this.mouseY = -1;\n  };\n\n  onMouseLeaveForAxis(axis = 'y') {\n    this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n  }\n\n  onWindowResize = () => {\n    // Recalculate scrollbarWidth in case it's a zoom\n    this.scrollbarWidth = scrollbarWidth();\n\n    this.hideNativeScrollbar();\n  };\n\n  /**\n   * Show scrollbar\n   */\n  showScrollbar(axis = 'y') {\n    let scrollbar = this.axis[axis].scrollbar.el;\n\n    if (!this.axis[axis].isVisible) {\n      scrollbar.classList.add(this.classNames.visible);\n      this.axis[axis].isVisible = true;\n    }\n\n    if (this.options.autoHide) {\n      this.hideScrollbars();\n    }\n  }\n\n  /**\n   * Hide Scrollbar\n   */\n  hideScrollbars = () => {\n    this.axis.x.track.rect = this.axis.x.track.el.getBoundingClientRect();\n    this.axis.y.track.rect = this.axis.y.track.el.getBoundingClientRect();\n\n    if (!this.isWithinBounds(this.axis.y.track.rect)) {\n      this.axis.y.scrollbar.el.classList.remove(this.classNames.visible);\n      this.axis.y.isVisible = false;\n    }\n\n    if (!this.isWithinBounds(this.axis.x.track.rect)) {\n      this.axis.x.scrollbar.el.classList.remove(this.classNames.visible);\n      this.axis.x.isVisible = false;\n    }\n  };\n\n  onPointerEvent = e => {\n    let isWithinBoundsY, isWithinBoundsX;\n    this.axis.x.scrollbar.rect = this.axis.x.scrollbar.el.getBoundingClientRect();\n    this.axis.y.scrollbar.rect = this.axis.y.scrollbar.el.getBoundingClientRect();\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      isWithinBoundsX = this.isWithinBounds(this.axis.x.scrollbar.rect);\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      isWithinBoundsY = this.isWithinBounds(this.axis.y.scrollbar.rect);\n    }\n\n    // If any pointer event is called on the scrollbar\n    if (isWithinBoundsY || isWithinBoundsX) {\n      // Preventing the event's default action stops text being\n      // selectable during the drag.\n      e.preventDefault();\n      // Prevent event leaking\n      e.stopPropagation();\n\n      if (e.type === 'mousedown') {\n        if (isWithinBoundsY) {\n          this.onDragStart(e, 'y');\n        }\n\n        if (isWithinBoundsX) {\n          this.onDragStart(e, 'x');\n        }\n      }\n    }\n  };\n\n  /**\n   * on scrollbar handle drag movement starts\n   */\n  onDragStart(e, axis = 'y') {\n    const scrollbar = this.axis[axis].scrollbar.el;\n\n    // Measure how far the user's mouse is from the top of the scrollbar drag handle.\n    const eventOffset = axis === 'y' ? e.pageY : e.pageX;\n    this.axis[axis].dragOffset =\n      eventOffset -\n      scrollbar.getBoundingClientRect()[this.axis[axis].offsetAttr];\n    this.draggedAxis = axis;\n\n    this.el.classList.add(this.classNames.dragging);\n\n    document.addEventListener('mousemove', this.drag, true);\n    document.addEventListener('mouseup', this.onEndDrag, true);\n    if (this.removePreventClickId === null) {\n      document.addEventListener('click', this.preventClick, true);\n      document.addEventListener('dblclick', this.preventClick, true);\n    } else {\n      window.clearTimeout(this.removePreventClickId);\n      this.removePreventClickId = null;\n    }\n  }\n\n  /**\n   * Drag scrollbar handle\n   */\n  drag = e => {\n    let eventOffset;\n    let track = this.axis[this.draggedAxis].track;\n    const trackSize = track.rect[this.axis[this.draggedAxis].sizeAttr];\n    const scrollbar = this.axis[this.draggedAxis].scrollbar;\n    const contentSize = this.contentWrapperEl[\n      this.axis[this.draggedAxis].scrollSizeAttr\n    ];\n    const hostSize = parseInt(\n      this.elStyles[this.axis[this.draggedAxis].sizeAttr],\n      10\n    );\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (this.draggedAxis === 'y') {\n      eventOffset = e.pageY;\n    } else {\n      eventOffset = e.pageX;\n    }\n\n    // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\n    let dragPos =\n      eventOffset -\n      track.rect[this.axis[this.draggedAxis].offsetAttr] -\n      this.axis[this.draggedAxis].dragOffset;\n    // Convert the mouse position into a percentage of the scrollbar height/width.\n    let dragPerc = dragPos / (trackSize - scrollbar.size);\n\n    // Scroll the content by the same percentage.\n    let scrollPos = dragPerc * (contentSize - hostSize);\n\n    // Fix browsers inconsistency on RTL\n    if (this.draggedAxis === 'x') {\n      scrollPos =\n        this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollbarInverted\n          ? scrollPos - (trackSize + scrollbar.size)\n          : scrollPos;\n      scrollPos =\n        this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollingInverted\n          ? -scrollPos\n          : scrollPos;\n    }\n\n    this.contentWrapperEl[\n      this.axis[this.draggedAxis].scrollOffsetAttr\n    ] = scrollPos;\n  };\n\n  /**\n   * End scroll handle drag\n   */\n  onEndDrag = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.el.classList.remove(this.classNames.dragging);\n\n    document.removeEventListener('mousemove', this.drag, true);\n    document.removeEventListener('mouseup', this.onEndDrag, true);\n    this.removePreventClickId = window.setTimeout(() => {\n      // Remove these asynchronously so we still suppress click events\n      // generated simultaneously with mouseup.\n      document.removeEventListener('click', this.preventClick, true);\n      document.removeEventListener('dblclick', this.preventClick, true);\n      this.removePreventClickId = null;\n    });\n  };\n\n  /**\n   * Handler to ignore click events during drag\n   */\n  preventClick = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  /**\n   * Getter for content element\n   */\n  getContentElement() {\n    return this.contentEl;\n  }\n\n  /**\n   * Getter for original scrolling element\n   */\n  getScrollElement() {\n    return this.contentWrapperEl;\n  }\n\n  removeListeners() {\n    // Event listeners\n    if (this.options.autoHide) {\n      this.el.removeEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(e => {\n      this.el.removeEventListener(e, this.onPointerEvent, true);\n    });\n\n    ['touchstart', 'touchend', 'touchmove'].forEach(e => {\n      this.el.removeEventListener(e, this.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n\n    this.el.removeEventListener('mousemove', this.onMouseMove);\n    this.el.removeEventListener('mouseleave', this.onMouseLeave);\n\n    this.contentWrapperEl.removeEventListener('scroll', this.onScroll);\n    window.removeEventListener('resize', this.onWindowResize);\n\n    this.mutationObserver && this.mutationObserver.disconnect();\n    this.resizeObserver.disconnect();\n\n    // Cancel all debounced functions\n    this.recalculate.cancel();\n    this.onMouseMove.cancel();\n    this.hideScrollbars.cancel();\n    this.onWindowResize.cancel();\n  }\n\n  /**\n   * UnMount mutation observer and delete SimpleBar instance from DOM element\n   */\n  unMount() {\n    this.removeListeners();\n    this.el.SimpleBar = null;\n  }\n\n  /**\n   * Recursively walks up the parent nodes looking for this.el\n   */\n  isChildNode(el) {\n    if (el === null) return false;\n    if (el === this.el) return true;\n\n    return this.isChildNode(el.parentNode);\n  }\n\n  /**\n   * Check if mouse is within bounds\n   */\n  isWithinBounds(bbox) {\n    return (\n      this.mouseX >= bbox.left &&\n      this.mouseX <= bbox.left + bbox.width &&\n      this.mouseY >= bbox.top &&\n      this.mouseY <= bbox.top + bbox.height\n    );\n  }\n\n  /**\n   * Find element children matches query\n   */\n  findChild(el, query) {\n    const matches =\n      el.matches ||\n      el.webkitMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector;\n    return Array.prototype.filter.call(el.children, child =>\n      matches.call(child, query)\n    )[0];\n  }\n}\n\n/**\n * HTML API\n * Called only in a browser env.\n */\nif (canUseDOM) {\n  SimpleBar.initHtmlApi();\n}\n"]},"metadata":{},"sourceType":"module"}