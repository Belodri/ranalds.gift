{"ast":null,"code":"module.exports = buildSearchMethod;\n\nvar errors = require('./errors.js');\n/**\r\n * Creates a search method to be used in clients\r\n * @param {string} queryParam the name of the attribute used for the query\r\n * @param {string} url the url\r\n * @return {function} the search method\r\n */\n\n\nfunction buildSearchMethod(queryParam, url) {\n  /**\r\n   * The search method. Prepares the data and send the query to Algolia.\r\n   * @param {string} query the string used for query search\r\n   * @param {object} args additional parameters to send with the search\r\n   * @param {function} [callback] the callback to be called with the client gets the answer\r\n   * @return {undefined|Promise} If the callback is not provided then this methods returns a Promise\r\n   */\n  return function search(query, args, callback) {\n    // warn V2 users on how to search\n    if (typeof query === 'function' && typeof args === 'object' || typeof callback === 'object') {\n      // .search(query, params, cb)\n      // .search(cb, params)\n      throw new errors.AlgoliaSearchError('index.search usage is index.search(query, params, cb)');\n    } // Normalizing the function signature\n\n\n    if (arguments.length === 0 || typeof query === 'function') {\n      // Usage : .search(), .search(cb)\n      callback = query;\n      query = '';\n    } else if (arguments.length === 1 || typeof args === 'function') {\n      // Usage : .search(query/args), .search(query, cb)\n      callback = args;\n      args = undefined;\n    } // At this point we have 3 arguments with values\n    // Usage : .search(args) // careful: typeof null === 'object'\n\n\n    if (typeof query === 'object' && query !== null) {\n      args = query;\n      query = undefined;\n    } else if (query === undefined || query === null) {\n      // .search(undefined/null)\n      query = '';\n    }\n\n    var params = '';\n\n    if (query !== undefined) {\n      params += queryParam + '=' + encodeURIComponent(query);\n    }\n\n    var additionalUA;\n\n    if (args !== undefined) {\n      if (args.additionalUA) {\n        additionalUA = args.additionalUA;\n        delete args.additionalUA;\n      } // `_getSearchParams` will augment params, do not be fooled by the = versus += from previous if\n\n\n      params = this.as._getSearchParams(args, params);\n    }\n\n    return this._search(params, url, callback, additionalUA);\n  };\n}","map":{"version":3,"sources":["C:/dev/New folder/rg/node_modules/algoliasearch/src/buildSearchMethod.js"],"names":["module","exports","buildSearchMethod","errors","require","queryParam","url","search","query","args","callback","AlgoliaSearchError","arguments","length","undefined","params","encodeURIComponent","additionalUA","as","_getSearchParams","_search"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,iBAAjB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;AAEA;;;;;;;;AAMA,SAASF,iBAAT,CAA2BG,UAA3B,EAAuCC,GAAvC,EAA4C;AAC1C;;;;;;;AAOA,SAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,QAA7B,EAAuC;AAC5C;AACA,QAAI,OAAOF,KAAP,KAAiB,UAAjB,IAA+B,OAAOC,IAAP,KAAgB,QAA/C,IACF,OAAOC,QAAP,KAAoB,QADtB,EACgC;AAC9B;AACA;AACA,YAAM,IAAIP,MAAM,CAACQ,kBAAX,CAA8B,uDAA9B,CAAN;AACD,KAP2C,CAS5C;;;AACA,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAArB,IAA0B,OAAOL,KAAP,KAAiB,UAA/C,EAA2D;AACzD;AACAE,MAAAA,QAAQ,GAAGF,KAAX;AACAA,MAAAA,KAAK,GAAG,EAAR;AACD,KAJD,MAIO,IAAII,SAAS,CAACC,MAAV,KAAqB,CAArB,IAA0B,OAAOJ,IAAP,KAAgB,UAA9C,EAA0D;AAC/D;AACAC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAGK,SAAP;AACD,KAlB2C,CAmB5C;AAEA;;;AACA,QAAI,OAAON,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAC/CC,MAAAA,IAAI,GAAGD,KAAP;AACAA,MAAAA,KAAK,GAAGM,SAAR;AACD,KAHD,MAGO,IAAIN,KAAK,KAAKM,SAAV,IAAuBN,KAAK,KAAK,IAArC,EAA2C;AAAE;AAClDA,MAAAA,KAAK,GAAG,EAAR;AACD;;AAED,QAAIO,MAAM,GAAG,EAAb;;AAEA,QAAIP,KAAK,KAAKM,SAAd,EAAyB;AACvBC,MAAAA,MAAM,IAAIV,UAAU,GAAG,GAAb,GAAmBW,kBAAkB,CAACR,KAAD,CAA/C;AACD;;AAED,QAAIS,YAAJ;;AACA,QAAIR,IAAI,KAAKK,SAAb,EAAwB;AACtB,UAAIL,IAAI,CAACQ,YAAT,EAAuB;AACrBA,QAAAA,YAAY,GAAGR,IAAI,CAACQ,YAApB;AACA,eAAOR,IAAI,CAACQ,YAAZ;AACD,OAJqB,CAKtB;;;AACAF,MAAAA,MAAM,GAAG,KAAKG,EAAL,CAAQC,gBAAR,CAAyBV,IAAzB,EAA+BM,MAA/B,CAAT;AACD;;AAGD,WAAO,KAAKK,OAAL,CAAaL,MAAb,EAAqBT,GAArB,EAA0BI,QAA1B,EAAoCO,YAApC,CAAP;AACD,GA/CD;AAgDD","sourcesContent":["module.exports = buildSearchMethod;\r\n\r\nvar errors = require('./errors.js');\r\n\r\n/**\r\n * Creates a search method to be used in clients\r\n * @param {string} queryParam the name of the attribute used for the query\r\n * @param {string} url the url\r\n * @return {function} the search method\r\n */\r\nfunction buildSearchMethod(queryParam, url) {\r\n  /**\r\n   * The search method. Prepares the data and send the query to Algolia.\r\n   * @param {string} query the string used for query search\r\n   * @param {object} args additional parameters to send with the search\r\n   * @param {function} [callback] the callback to be called with the client gets the answer\r\n   * @return {undefined|Promise} If the callback is not provided then this methods returns a Promise\r\n   */\r\n  return function search(query, args, callback) {\r\n    // warn V2 users on how to search\r\n    if (typeof query === 'function' && typeof args === 'object' ||\r\n      typeof callback === 'object') {\r\n      // .search(query, params, cb)\r\n      // .search(cb, params)\r\n      throw new errors.AlgoliaSearchError('index.search usage is index.search(query, params, cb)');\r\n    }\r\n\r\n    // Normalizing the function signature\r\n    if (arguments.length === 0 || typeof query === 'function') {\r\n      // Usage : .search(), .search(cb)\r\n      callback = query;\r\n      query = '';\r\n    } else if (arguments.length === 1 || typeof args === 'function') {\r\n      // Usage : .search(query/args), .search(query, cb)\r\n      callback = args;\r\n      args = undefined;\r\n    }\r\n    // At this point we have 3 arguments with values\r\n\r\n    // Usage : .search(args) // careful: typeof null === 'object'\r\n    if (typeof query === 'object' && query !== null) {\r\n      args = query;\r\n      query = undefined;\r\n    } else if (query === undefined || query === null) { // .search(undefined/null)\r\n      query = '';\r\n    }\r\n\r\n    var params = '';\r\n\r\n    if (query !== undefined) {\r\n      params += queryParam + '=' + encodeURIComponent(query);\r\n    }\r\n\r\n    var additionalUA;\r\n    if (args !== undefined) {\r\n      if (args.additionalUA) {\r\n        additionalUA = args.additionalUA;\r\n        delete args.additionalUA;\r\n      }\r\n      // `_getSearchParams` will augment params, do not be fooled by the = versus += from previous if\r\n      params = this.as._getSearchParams(args, params);\r\n    }\r\n\r\n\r\n    return this._search(params, url, callback, additionalUA);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"script"}