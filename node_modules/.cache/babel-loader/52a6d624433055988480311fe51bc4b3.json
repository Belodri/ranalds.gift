{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\components\\\\buildList\\\\BuildList.js\";\nimport React, { Component } from 'react';\nimport './BuildList.css';\nimport './BuildListItem.css';\nimport BuildListItem from './BuildListItem';\nimport 'simplebar/dist/simplebar.min.css';\nimport BuildsListStore from '../../stores/BuildsListStore';\nimport { db } from '../../utils/Firebase';\nimport { AppContext } from '../../stores/Store'; // accept a userid, if no id provided get all builds with page limits\n// if an id is passed, get the builds for this user only\n\nclass BuildList extends Component {\n  constructor(props) {\n    super(props);\n    alert('rendering build list');\n    this.state = {\n      builds: [],\n      isDataLoaded: false\n    };\n  } //current page index and total pages from props\n  //specify the type of build list... or make specific types of build lists...\n  //filters based on properties: userid, careerid, patch\n\n\n  render() {\n    //const [state, updateState] = this.context;\n    alert('is build list data loaded ' + this.state.isDataLoaded);\n\n    if (!this.state.isDataLoaded) {\n      let buildList = [];\n      let buildsQuery = db.collection(\"builds\");\n      var filters = [{\n        field: 'userId',\n        comparison: '==',\n        value: 'il853JiLs8VoxVPRU97p0kxp8Ks2'\n      }];\n\n      if (this.props.filters) {\n        filters = this.props.filters;\n      }\n\n      filters.forEach(filter => {\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\n      });\n      buildsQuery.limit(10).get().then(querySnapshot => {\n        var builds = [];\n        querySnapshot.forEach(build => {\n          buildList.push({\n            id: build.id,\n            data: build.data()\n          });\n        });\n        this.setState({\n          builds: buildList,\n          isDataLoaded: true\n        });\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(BuildsListStore, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"build-list border-01 background-16\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, this.renderBuilds(this.state.builds)));\n  }\n\n  renderBuilds(builds) {\n    console.log('list of builds to render');\n    console.log(builds);\n\n    if (!builds || builds.length === 0) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 14\n        }\n      }, \"No \", this.props.name, \" in database.\");\n    }\n\n    var buildsHtml = [];\n    builds.forEach(build => {\n      console.log('build item');\n      console.log(build.data);\n      buildsHtml.push( /*#__PURE__*/React.createElement(BuildListItem, {\n        buildId: build.id,\n        buildData: build.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 23\n        }\n      }));\n    });\n    return buildsHtml;\n  }\n\n}\n\nBuildList.contextType = AppContext;\nexport default BuildList;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildList/BuildList.js"],"names":["React","Component","BuildListItem","BuildsListStore","db","AppContext","BuildList","constructor","props","alert","state","builds","isDataLoaded","render","buildList","buildsQuery","collection","filters","field","comparison","value","forEach","filter","where","limit","get","then","querySnapshot","build","push","id","data","setState","renderBuilds","console","log","length","name","buildsHtml","contextType"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport './BuildList.css';\r\nimport './BuildListItem.css';\r\nimport BuildListItem from './BuildListItem';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport BuildsListStore from '../../stores/BuildsListStore';\r\nimport { db } from '../../utils/Firebase';\r\nimport { AppContext } from '../../stores/Store';\r\n\r\n// accept a userid, if no id provided get all builds with page limits\r\n// if an id is passed, get the builds for this user only\r\n\r\nclass BuildList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    alert('rendering build list');\r\n\r\n    this.state = {\r\n      builds: [],\r\n      isDataLoaded: false\r\n    };\r\n  }\r\n\r\n\r\n  //current page index and total pages from props\r\n\r\n  //specify the type of build list... or make specific types of build lists...\r\n  //filters based on properties: userid, careerid, patch\r\n\r\n  static contextType = AppContext;\r\n\r\n  render() {\r\n    //const [state, updateState] = this.context;\r\n\r\n    alert('is build list data loaded ' + this.state.isDataLoaded);\r\n\r\n    if (!this.state.isDataLoaded) {\r\n      let buildList = [];\r\n  \r\n      let buildsQuery = db.collection(\"builds\");\r\n  \r\n      var filters = [{ field: 'userId', comparison: '==', value: 'il853JiLs8VoxVPRU97p0kxp8Ks2' }];\r\n  \r\n      if (this.props.filters) {\r\n        filters = this.props.filters;\r\n      }\r\n  \r\n      filters.forEach((filter) => {\r\n        buildsQuery = buildsQuery.where(filter.field, filter.comparison, filter.value);\r\n      });\r\n  \r\n      buildsQuery.limit(10).get().then((querySnapshot) => {\r\n  \r\n        var builds = [];\r\n        querySnapshot.forEach((build) => {\r\n          buildList.push({ id: build.id, data: build.data()});\r\n        });\r\n  \r\n        this.setState({builds: buildList, isDataLoaded: true})\r\n      });\r\n    }\r\n\r\n    return (\r\n          <BuildsListStore>\r\n            <div className=\"build-list border-01 background-16\">\r\n              {this.renderBuilds(this.state.builds)}\r\n            </div>\r\n          </BuildsListStore>\r\n    );\r\n  }\r\n\r\n  renderBuilds(builds) {\r\n    console.log('list of builds to render');\r\n    console.log(builds);\r\n    if (!builds || builds.length === 0) {\r\n      return <p>No {this.props.name} in database.</p>;\r\n    }\r\n    var buildsHtml = [];\r\n    builds.forEach((build) => {\r\n      console.log('build item');\r\n      console.log(build.data);\r\n      buildsHtml.push(<BuildListItem buildId={build.id} buildData={build.data}></BuildListItem>)\r\n    });\r\n    return buildsHtml;\r\n  }\r\n}\r\n\r\nexport default BuildList;"]},"metadata":{},"sourceType":"module"}