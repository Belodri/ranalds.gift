{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\New folder\\\\rg\\\\src\\\\components\\\\buildPage\\\\EditBuildPage.js\";\nimport React, { useContext } from 'react';\nimport HeroTalents from '../heroTalents/HeroTalents';\nimport Inventory from '../inventory/Inventory';\nimport './EditBuildPage.css';\nimport HeroDetails from '../heroDetails/HeroDetails';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport \"react-tabs/style/react-tabs.css\";\nimport BuildOptions from './BuildOptions';\nimport BuildSummary from './BuildSummary';\nimport { AppContext } from '../../stores/Store';\nimport HeroSelect from '../heroSelect/HeroSelect';\nimport { useParams, useRouteMatch } from 'react-router';\nimport { auth, db, firebase } from '../../utils/Firebase';\nimport * as Constants from '../../data/Constants';\nimport history from '../../utils/History';\nimport { UserContext } from '../../stores/UserStore';\nimport { Link } from 'react-router-dom';\nimport BuildInformation from './BuildInformation';\n\nfunction EditBuildPage() {\n  const [state, updateState] = useContext(AppContext);\n  const userState = useContext(UserContext);\n  const {\n    path\n  } = useRouteMatch();\n  var paths = path.split('/');\n  var currentPath = paths[paths.length - 1];\n  console.log('current path ' + currentPath);\n\n  if (currentPath === 'edit') {\n    if (state.readonly) {\n      updateState({\n        type: \"UPDATE_READONLY\",\n        payload: false\n      });\n    }\n  } else if (currentPath === 'view') {\n    if (!state.readonly) {\n      updateState({\n        type: \"UPDATE_READONLY\",\n        payload: true\n      });\n    }\n  } else if (currentPath === 'create') {\n    if (!state.createBuild) {\n      updateState({\n        type: \"UPDATE_CREATE_BUILD_STATE\",\n        payload: true\n      });\n    }\n  }\n\n  let params = useParams();\n  console.log(!userState.userId);\n  console.log('params build id: ' + params.buildId);\n  var root = document.getElementById('root');\n  root.dataset.pageName = 'editBuildPage';\n\n  if (params.buildId && state.buildId !== params.buildId) {\n    loadBuild(params.buildId);\n  }\n\n  function loadBuild(buildId) {\n    console.log('loading build id ' + buildId);\n\n    if (state.buildId !== buildId) {\n      state.buildId = buildId;\n    }\n\n    db.collection('builds').doc(buildId).get().then(build => {\n      if (!build.data()) {\n        console.log('No build found with ID ' + buildId); //history.push('/build/create');\n        //update state to indicate no build available in DB\n\n        return;\n      }\n\n      console.log('build loaded from db:');\n      console.log(build.data());\n      updateState({\n        type: 'INIT_STATE_FROM_DATA',\n        payload: build\n      });\n    }).catch(error => {\n      console.error('Error retrieving data from DB:', error);\n    });\n  }\n\n  function handleDescriptionChanged(e) {\n    updateState({\n      type: \"UPDATE_DESCRIPTION\",\n      payload: e.currentTarget.value\n    });\n  }\n\n  function handleNameChange(e) {\n    updateState({\n      type: \"UPDATE_NAME\",\n      payload: e.currentTarget.value\n    });\n  }\n\n  function saveBuildClick() {\n    if (!auth.currentUser) {\n      alert('Can\\'t save or create builds when not authenticated.');\n      return;\n    }\n\n    if (!state.dirty) {\n      console.log('Not saving build, no changes have been made.');\n      return;\n    }\n\n    console.log('saving build to database build id ' + state.buildId + ' for user id ' + auth.currentUser.uid);\n\n    if (state.buildId === 0) {\n      createBuild();\n    } else {\n      saveBuild();\n    }\n  }\n\n  function decrementWeaponStat(careerStat, weaponId, property1Id, property2Id, traitId) {\n    let oldWeaponIndex = careerStat.weapons.findIndex(item => {\n      return item.id === weaponId;\n    });\n    let oldWeapon = careerStat.weapons[oldWeaponIndex];\n    decrementStat(oldWeapon.properties, property1Id);\n    decrementStat(oldWeapon.properties, property2Id);\n    decrementStat(oldWeapon.traits, traitId);\n    oldWeapon.count -= 1;\n    careerStat.weapons[oldWeaponIndex] = oldWeapon;\n  }\n\n  function incrementWeaponStat(careerStat, weaponId, property1Id, property2Id, traitId) {\n    let weaponIndex = careerStat.weapons ? careerStat.weapons.findIndex(item => {\n      return item.id === weaponId;\n    }) : -1;\n\n    if (weaponIndex < 0) {\n      let newWeapon = {\n        id: weaponId,\n        count: 0,\n        properties: [],\n        traits: []\n      };\n      careerStat.weapons ? careerStat.weapons.push(newWeapon) : careerStat.weapons = [newWeapon];\n      weaponIndex = careerStat.weapons.length - 1;\n    }\n\n    let weapon = careerStat.weapons[weaponIndex];\n    incrementStat(weapon.properties, property1Id);\n    incrementStat(weapon.properties, property2Id);\n    incrementStat(weapon.traits, traitId);\n    weapon.count += 1;\n    careerStat.weapons[weaponIndex] = weapon;\n  }\n\n  function decrementStat(stats, statId) {\n    adjustStat(stats, statId, -1);\n  }\n\n  function incrementStat(stats, statId) {\n    adjustStat(stats, statId, 1);\n  }\n\n  function adjustStat(stats, statId, adjustmentValue) {\n    let statIndex = stats ? stats.findIndex(item => {\n      return item.id === statId;\n    }) : -1;\n\n    if (statIndex < 0) {\n      let newStat = {\n        id: statId,\n        count: 0\n      };\n      stats ? stats.push(newStat) : stats = [newStat];\n      statIndex = stats.length - 1;\n    }\n\n    stats[statIndex].count = stats[statIndex].count + adjustmentValue;\n  }\n\n  function incrementNecklaceStat(careerStat, property1Id, property2Id, traitId) {\n    if (!careerStat.necklace) {\n      careerStat.necklace = {\n        properties: [],\n        traits: []\n      };\n    }\n\n    incrementStat(careerStat.necklace.properties, property1Id);\n    incrementStat(careerStat.necklace.properties, property2Id);\n    incrementStat(careerStat.necklace.traits, traitId);\n  }\n\n  function incrementCharmStat(careerStat, property1Id, property2Id, traitId) {\n    if (!careerStat.charm) {\n      careerStat.charm = {\n        properties: [],\n        traits: []\n      };\n    }\n\n    incrementStat(careerStat.charm.properties, property1Id);\n    incrementStat(careerStat.charm.properties, property2Id);\n    incrementStat(careerStat.charm.traits, traitId);\n  }\n\n  function incrementTrinketStat(careerStat, property1Id, property2Id, traitId) {\n    if (!careerStat.trinket) {\n      careerStat.trinket = {\n        properties: [],\n        traits: []\n      };\n    }\n\n    incrementStat(careerStat.trinket.properties, property1Id);\n    incrementStat(careerStat.trinket.properties, property2Id);\n    incrementStat(careerStat.trinket.traits, traitId);\n  }\n\n  function decrementNecklaceStat(careerStat, property1Id, property2Id, traitId) {\n    decrementStat(careerStat.necklace.properties, property1Id);\n    decrementStat(careerStat.necklace.properties, property2Id);\n    decrementStat(careerStat.necklace.traits, traitId);\n  }\n\n  function decrementCharmStat(careerStat, property1Id, property2Id, traitId) {\n    decrementStat(careerStat.charm.properties, property1Id);\n    decrementStat(careerStat.charm.properties, property2Id);\n    decrementStat(careerStat.charm.traits, traitId);\n  }\n\n  function decrementTrinketStat(careerStat, property1Id, property2Id, traitId) {\n    decrementStat(careerStat.trinket.properties, property1Id);\n    decrementStat(careerStat.trinket.properties, property2Id);\n    decrementStat(careerStat.trinket.traits, traitId);\n  }\n\n  function isCareerOrGearChanged(build) {\n    return !(state.careerId === build.data().careerId && state.primaryWeaponId === build.data().primaryWeapon.id && state.secondaryWeaponId === build.data().secondaryWeapon.id && state.properties[Constants.PRIMARY_PROPERTY1_INDEX] === build.data().primaryWeapon.property1Id && state.properties[Constants.PRIMARY_PROPERTY2_INDEX] === build.data().primaryWeapon.property2Id && state.properties[Constants.SECONDARY_PROPERTY1_INDEX] === build.data().secondaryWeapon.property1Id && state.properties[Constants.SECONDARY_PROPERTY2_INDEX] === build.data().secondaryWeapon.property2Id && state.properties[Constants.NECKLACE_PROPERTY1_INDEX] === build.data().necklace.property1Id && state.properties[Constants.NECKLACE_PROPERTY2_INDEX] === build.data().necklace.property2Id && state.properties[Constants.CHARM_PROPERTY1_INDEX] === build.data().charm.property1Id && state.properties[Constants.CHARM_PROPERTY2_INDEX] === build.data().charm.property2Id && state.properties[Constants.TRINKET_PROPERTY1_INDEX] === build.data().trinket.property1Id && state.properties[Constants.TRINKET_PROPERTY2_INDEX] === build.data().trinket.property2Id && state.traits[Constants.PRIMARY_TRAIT_INDEX] === build.data().primaryWeapon.trait && state.traits[Constants.SECONDARY_TRAIT_INDEX] === build.data().secondaryWeapon.trait && state.traits[Constants.NECKLACE_TRAIT_INDEX] === build.data().necklace.trait && state.traits[Constants.CHARM_TRAIT_INDEX] === build.data().charm.trait && state.traits[Constants.TRINKET_TRAIT_INDEX] === build.data().trinket.trait);\n  }\n\n  function updateBuildAndStats() {\n    let buildStatsRef = db.collection('builds').doc('stats');\n    let buildRef = db.collection('builds').doc(state.buildId);\n    db.runTransaction(transaction => {\n      return transaction.getAll(buildStatsRef, buildRef).then(querySnapshot => {\n        if (!querySnapshot || querySnapshot.size < 2) {\n          console.log('Could not find stats and build document');\n          return;\n        }\n\n        let buildStats = querySnapshot.docs[0];\n        let build = querySnapshot.docs[1];\n        let careers = buildStats.data().careers;\n        let newCareerIndex = careers.findIndex(career => {\n          return career.id === state.careerId;\n        });\n        let newCareerStat = careers[newCareerIndex];\n        let oldCareerIndex = careers.findIndex(career => {\n          return career.id === build.data().careerId;\n        });\n        let oldCareerStat = careers[oldCareerIndex]; // PREPARE BUILD STATS\n\n        if (isCareerOrGearChanged(build)) {\n          //build equipment or career has changed, update stats in addition to saving changes\n          if (state.careerId !== build.data().careerId) {\n            // Career changed, decrement all stats from old career, increment all in new career\n            if (!newCareerStat) {\n              newCareerStat = {\n                id: state.careerId,\n                count: 0,\n                weapons: [],\n                necklace: {\n                  properties: [],\n                  traits: []\n                },\n                charm: {\n                  properties: [],\n                  traits: []\n                },\n                trinket: {\n                  properties: [],\n                  traits: []\n                }\n              };\n            }\n\n            newCareerStat.count += 1;\n            oldCareerStat.count -= 1;\n            decrementWeaponStat(oldCareerStat, build.data().primaryWeapon.id, build.data().primaryWeapon.property1Id, build.data().primaryWeapon.property2Id, build.data().primaryWeapon.traitId);\n            decrementWeaponStat(oldCareerStat, build.data().secondayWeapon.id, build.data().secondayWeapon.property1Id, build.data().secondayWeapon.property2Id, build.data().secondayWeapon.traitId);\n            decrementNecklaceStat(oldCareerStat, build.data().necklace.property1Id, build.data().necklace.property2Id, build.data().necklace.traitId);\n            decrementCharmStat(oldCareerStat, build.data().charm.property1Id, build.data().charm.property2Id, build.data().charm.traitId);\n            decrementTrinketStat(oldCareerStat, build.data().trinket.property1Id, build.data().trinket.property2Id, build.data().trinket.traitId);\n            incrementWeaponStat(newCareerStat, state.primaryWeaponId, state.properties[Constants.PRIMARY_PROPERTY1_INDEX], state.properties[Constants.PRIMARY_PROPERTY2_INDEX], state.properties[Constants.PRIMARY_TRAIT_INDEX]);\n            incrementWeaponStat(newCareerStat, state.secondaryWeaponId, state.properties[Constants.SECONDARY_PROPERTY1_INDEX], state.properties[Constants.SECONDARY_PROPERTY2_INDEX], state.properties[Constants.SECONDARY_TRAIT_INDEX]);\n            incrementNecklaceStat(newCareerStat, state.properties[Constants.NECKLACE_PROPERTY1_INDEX], state.properties[Constants.NECKLACE_PROPERTY2_INDEX], state.properties[Constants.NECKLACE_TRAIT_INDEX]);\n            incrementCharmStat(newCareerStat, state.properties[Constants.CHARM_PROPERTY1_INDEX], state.properties[Constants.CHARM_PROPERTY2_INDEX], state.properties[Constants.CHARM_TRAIT_INDEX]);\n            incrementTrinketStat(newCareerStat, state.properties[Constants.TRINKET_PROPERTY1_INDEX], state.properties[Constants.TRINKET_PROPERTY2_INDEX], state.properties[Constants.TRINKET_TRAIT_INDEX]);\n          } else {\n            // Check properties and traits of each weapon and gear item and increment/decrement where necessary\n            if (state.primaryWeaponId !== build.data().primaryWeapon.id) {\n              decrementWeaponStat(oldCareerStat, build.data().primaryWeapon.id, build.data().primaryWeapon.property1Id, build.data().primaryWeapon.property2Id, build.data().primaryWeapon.traitId);\n              incrementWeaponStat(newCareerStat, state.primaryWeaponId, state.properties[Constants.PRIMARY_PROPERTY1_INDEX], state.properties[Constants.PRIMARY_PROPERTY2_INDEX], state.properties[Constants.PRIMARY_TRAIT_INDEX]);\n            } else {\n              // Weapon is the same as before, only adjust properties/traits\n              let weaponIndex = oldCareerStat.weapons.findIndex(item => {\n                return item.id === build.data().primaryWeapon.id;\n              });\n              let weapon = oldCareerStat.weapons[weaponIndex]; //check if properties or trait changed\n\n              if (state.properties[Constants.PRIMARY_PROPERTY1_INDEX] !== build.data().primaryWeapon.property1Id) {\n                // decrement property\n                decrementStat(weapon.properties, build.data().primaryWeapon.property1Id);\n                incrementStat(weapon.properties, state.properties[Constants.PRIMARY_PROPERTY1_INDEX]);\n              }\n\n              if (state.properties[Constants.PRIMARY_PROPERTY2_INDEX] !== build.data().primaryWeapon.property2Id) {\n                // decrement property\n                decrementStat(weapon.properties, build.data().primaryWeapon.property2Id);\n                incrementStat(weapon.properties, state.properties[Constants.PRIMARY_PROPERTY2_INDEX]);\n              }\n\n              if (state.traits[Constants.PRIMARY_TRAIT_INDEX] !== build.data().primaryWeapon.traitId) {\n                // decrement trait\n                decrementStat(weapon.traits, build.data().primaryWeapon.traitId);\n                incrementStat(weapon.traits, state.traits[Constants.PRIMARY_TRAIT_INDEX]);\n              }\n            }\n\n            if (state.secondaryWeaponId !== build.data().secondaryWeapon.id) {\n              decrementWeaponStat(oldCareerStat, build.data().secondayWeapon.id, build.data().secondayWeapon.property1Id, build.data().secondayWeapon.property2Id, build.data().secondayWeapon.traitId);\n              incrementWeaponStat(newCareerStat, state.secondaryWeaponId, state.properties[Constants.SECONDARY_PROPERTY1_INDEX], state.properties[Constants.SECONDARY_PROPERTY2_INDEX], state.properties[Constants.SECONDARY_TRAIT_INDEX]);\n            } else {\n              // Weapon is the same as before, only adjust properties/traits\n              let weaponIndex = oldCareerStat.weapons.findIndex(item => {\n                return item.id === build.data().secondaryWeapon.id;\n              });\n              let weapon = oldCareerStat.weapons[weaponIndex]; //check if properties or trait changed\n\n              if (state.properties[Constants.SECONDARY_PROPERTY1_INDEX] !== build.data().secondaryWeapon.property1Id) {\n                // decrement property\n                decrementStat(weapon.properties, build.data().secondaryWeapon.property1Id);\n                incrementStat(weapon.properties, state.properties[Constants.SECONDARY_PROPERTY1_INDEX]);\n              }\n\n              if (state.properties[Constants.SECONDARY_PROPERTY2_INDEX] !== build.data().secondaryWeapon.property2Id) {\n                // decrement property\n                decrementStat(weapon.properties, build.data().secondaryWeapon.property2Id);\n                incrementStat(weapon.properties, state.properties[Constants.SECONDARY_PROPERTY2_INDEX]);\n              }\n\n              if (state.traits[Constants.SECONDARY_TRAIT_INDEX] !== build.data().secondaryWeapon.traitId) {\n                // decrement trait\n                decrementStat(weapon.traits, build.data().secondaryWeapon.traitId);\n                incrementStat(weapon.traits, state.traits[Constants.SECONDARY_TRAIT_INDEX]);\n              }\n            } // REPEAT this for each property and trait\n\n\n            if (state.properties[Constants.NECKLACE_PROPERTY1_INDEX] !== build.data().necklace.property1Id) {\n              // decrement property\n              decrementStat(oldCareerStat.necklace.properties, build.data().necklace.property1Id);\n              incrementStat(newCareerStat.necklace.properties, state.properties[Constants.NECKLACE_PROPERTY1_INDEX]);\n            }\n\n            if (state.properties[Constants.NECKLACE_PROPERTY2_INDEX] !== build.data().necklace.property2Id) {\n              // decrement property\n              decrementStat(oldCareerStat.necklace.properties, build.data().necklace.property2Id);\n              incrementStat(newCareerStat.necklace.properties, state.properties[Constants.NECKLACE_PROPERTY2_INDEX]);\n            }\n\n            if (state.traits[Constants.NECKLACE_TRAIT_INDEX] !== build.data().necklace.traitId) {\n              // decrement trait\n              decrementStat(oldCareerStat.necklace.traits, build.data().necklace.traitId);\n              incrementStat(newCareerStat.necklace.traits, state.traits[Constants.NECKLACE_TRAIT_INDEX]);\n            }\n\n            if (state.properties[Constants.CHARM_PROPERTY1_INDEX] !== build.data().charm.property1Id) {\n              // decrement property\n              decrementStat(oldCareerStat.charm.properties, build.data().charm.property1Id);\n              incrementStat(newCareerStat.charm.properties, state.properties[Constants.CHARM_PROPERTY1_INDEX]);\n            }\n\n            if (state.properties[Constants.CHARM_PROPERTY2_INDEX] !== build.data().charm.property2Id) {\n              // decrement property\n              decrementStat(oldCareerStat.charm.properties, build.data().charm.property2Id);\n              incrementStat(newCareerStat.charm.properties, state.properties[Constants.CHARM_PROPERTY2_INDEX]);\n            }\n\n            if (state.traits[Constants.CHARM_TRAIT_INDEX] !== build.data().charm.traitId) {\n              // decrement trait\n              decrementStat(oldCareerStat.charm.traits, build.data().charm.traitId);\n              incrementStat(newCareerStat.charm.traits, state.traits[Constants.CHARM_TRAIT_INDEX]);\n            }\n\n            if (state.properties[Constants.TRINKET_PROPERTY1_INDEX] !== build.data().trinket.property1Id) {\n              // decrement property\n              decrementStat(oldCareerStat.trinket.properties, build.data().trinket.property1Id);\n              incrementStat(newCareerStat.trinket.properties, state.properties[Constants.TRINKET_PROPERTY1_INDEX]);\n            }\n\n            if (state.properties[Constants.TRINKET_PROPERTY2_INDEX] !== build.data().trinket.property2Id) {\n              // decrement property\n              decrementStat(oldCareerStat.trinket.properties, build.data().trinket.property2Id);\n              incrementStat(newCareerStat.trinket.properties, state.properties[Constants.TRINKET_PROPERTY2_INDEX]);\n            }\n\n            if (state.traits[Constants.TRINKET_TRAIT_INDEX] !== build.data().trinket.traitId) {\n              // decrement trait\n              decrementStat(oldCareerStat.trinket.traits, build.data().trinket.traitId);\n              incrementStat(newCareerStat.trinket.traits, state.traits[Constants.TRINKET_TRAIT_INDEX]);\n            }\n          }\n        }\n        /* \r\n                            let newPrimaryWeapon = newCareerStat.weapons ? newCareerStat.weapons.find((weapon) => {return weapon.id === state.primaryWeaponId;}) : null;\r\n                            let oldPrimaryWeapon = null\r\n        \r\n                            if (!newPrimaryWeapon) {\r\n                                newPrimaryWeapon = {\r\n                                    id: state.primaryWeaponId,\r\n                                    count: 0,\r\n                                    properties: [],\r\n                                    traits: []\r\n                                }\r\n                            }\r\n                            \r\n                            if (state.primaryWeaponId !== build.data().primaryWeaponId) {\r\n        \r\n                            }\r\n        \r\n                            newPrimaryWeapon.count += 1;\r\n        \r\n                            var newProperty1 = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.find((property) => {return property.id === state.properties[Constants.PRIMARY_PROPERTY1_INDEX];}) : null;\r\n        \r\n                            if (!newProperty1) {\r\n                                newProperty1 = {\r\n                                    id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                                    count: 0\r\n                                }\r\n                            }\r\n        \r\n                            newProperty1.count += 1;\r\n        \r\n                            var newProperty2 = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.find((property) => {return property.id === state.properties[Constants.PRIMARY_PROPERTY2_INDEX];}) : null;\r\n        \r\n                            if (!newProperty2) {\r\n                                newProperty2 = {\r\n                                    id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                                    count: 0\r\n                                }\r\n                            }\r\n        \r\n                            newProperty2.count += 1;\r\n        \r\n                            var newTrait = newPrimaryWeapon.traits ? newPrimaryWeapon.traits.find((trait) => {return trait.id === state.traits[Constants.PRIMARY_TRAIT_INDEX];}) : null;\r\n        \r\n                            if (!newTrait) {\r\n                                newTrait = {\r\n                                    id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                                    count: 0\r\n                                }\r\n                            }\r\n        \r\n                            newTrait.count += 1;\r\n        \r\n                            var newTraitIndex = newPrimaryWeapon.traits ? newPrimaryWeapon.traits.findIndex((trait) => { return trait.id === newTrait.id}) : -1;\r\n                            if (newTraitIndex < 0) {\r\n                                newPrimaryWeapon.traits ? newPrimaryWeapon.traits.push(newTrait) : newPrimaryWeapon.traits = [newTrait];\r\n                            }\r\n                            else {\r\n                                newPrimaryWeapon.traits[newTraitIndex] = newTrait;\r\n                            }\r\n        \r\n                            var newProperty1Index = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.findIndex((property) => { return property.id === newProperty1.id}) : -1;\r\n                            if (newProperty1Index < 0) {\r\n                                newPrimaryWeapon.properties ? newPrimaryWeapon.properties.push(newProperty1) : newPrimaryWeapon.properties = [newProperty1];\r\n                            }\r\n                            else {\r\n                                newPrimaryWeapon.properties[newProperty1Index] = newProperty1;\r\n                            }\r\n        \r\n                            var newProperty2Index = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.findIndex((property) => { return property.id === newProperty2.id}) : -1;\r\n                            if (newProperty2Index < 0) {\r\n                                newPrimaryWeapon.properties ? newPrimaryWeapon.properties.push(newProperty2) : newPrimaryWeapon.properties = [newProperty2];\r\n                            }\r\n                            else {\r\n                                newPrimaryWeapon.properties[newProperty2Index] = newProperty2;\r\n                            }\r\n        \r\n                            var newPrimaryWeaponIndex = newCareerStat.weapons ? newCareerStat.weapons.findIndex((weapon) => { return weapon.id === newPrimaryWeapon.id}) : -1;\r\n                            if (newPrimaryWeaponIndex < 0) {\r\n                                newCareerStat.weapons ? newCareerStat.weapons.push(newPrimaryWeapon) : newCareerStat.weapons = [newPrimaryWeapon];\r\n                            }\r\n                            else {\r\n                                newCareerStat.weapons[newPrimaryWeaponIndex] = newPrimaryWeapon;\r\n                            }\r\n        \r\n                            var newCareerStatIndex = careers ? careers.findIndex((career) => { return career.id === newCareerStat.id}) : -1;\r\n                            if (newCareerStatIndex < 0) {\r\n                                careers ? careers.push(newCareerStat) : careers = [newCareerStat];\r\n                            }\r\n                            else {\r\n                                careers[newCareerStatIndex] = newCareerStat;\r\n                            } */\n\n\n        careers[oldCareerIndex] = oldCareerStat;\n        careers[newCareerIndex] = newCareerStat;\n        transaction.update(buildStatsRef, {\n          careers: careers\n        });\n      });\n    }).then(() => {\n      console.log('successfully updated stats for modified build');\n    });\n  }\n\n  function createBuild() {\n    console.log('Creating new build.');\n    let increment = 1; //firebase.firestore.FieldValue.increment(1);\n\n    let batch = db.batch();\n    let buildStatsRef = db.collection('builds').doc('stats');\n    db.runTransaction(transaction => {\n      return transaction.get(buildStatsRef).then(buildStats => {\n        if (!buildStats) {\n          console.log('No stats document found');\n          return;\n        }\n\n        console.log(buildStats.data());\n        var careers = buildStats.data().careers;\n        var newCareerStat = careers.find(career => {\n          return career.id === state.careerId;\n        });\n        console.log(newCareerStat);\n\n        if (!newCareerStat) {\n          newCareerStat = {\n            id: state.careerId,\n            count: 0,\n            weapons: [],\n            necklace: {\n              properties: [],\n              traits: []\n            },\n            charm: {\n              properties: [],\n              traits: []\n            },\n            trinket: {\n              properties: [],\n              traits: []\n            }\n          };\n        }\n\n        newCareerStat.count += 1;\n        incrementWeaponStat(newCareerStat, state.primaryWeaponId, state.properties[Constants.PRIMARY_PROPERTY1_INDEX], state.properties[Constants.PRIMARY_PROPERTY2_INDEX], state.properties[Constants.PRIMARY_TRAIT_INDEX]);\n        incrementWeaponStat(newCareerStat, state.secondaryWeaponId, state.properties[Constants.SECONDARY_PROPERTY1_INDEX], state.properties[Constants.SECONDARY_PROPERTY2_INDEX], state.properties[Constants.SECONDARY_TRAIT_INDEX]);\n        incrementNecklaceStat(newCareerStat, state.properties[Constants.NECKLACE_PROPERTY1_INDEX], state.properties[Constants.NECKLACE_PROPERTY2_INDEX], state.properties[Constants.NECKLACE_TRAIT_INDEX]);\n        incrementCharmStat(newCareerStat, state.properties[Constants.CHARM_PROPERTY1_INDEX], state.properties[Constants.CHARM_PROPERTY2_INDEX], state.properties[Constants.CHARM_TRAIT_INDEX]);\n        incrementTrinketStat(newCareerStat, state.properties[Constants.TRINKET_PROPERTY1_INDEX], state.properties[Constants.TRINKET_PROPERTY2_INDEX], state.properties[Constants.TRINKET_TRAIT_INDEX]);\n        /* var newPrimaryWeapon = newCareerStat.weapons ? newCareerStat.weapons.find((weapon) => {return weapon.id === state.primaryWeaponId;}) : null;\r\n          if (!newPrimaryWeapon) {\r\n            newPrimaryWeapon = {\r\n                id: state.primaryWeaponId,\r\n                count: 0,\r\n                properties: [],\r\n                traits: []\r\n            }\r\n        }\r\n          newPrimaryWeapon.count += 1;\r\n          var newProperty1 = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.find((property) => {return property.id === state.properties[Constants.PRIMARY_PROPERTY1_INDEX];}) : null;\r\n          if (!newProperty1) {\r\n            newProperty1 = {\r\n                id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                count: 0\r\n            }\r\n        }\r\n          newProperty1.count += 1;\r\n          var newProperty2 = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.find((property) => {return property.id === state.properties[Constants.PRIMARY_PROPERTY2_INDEX];}) : null;\r\n          if (!newProperty2) {\r\n            newProperty2 = {\r\n                id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                count: 0\r\n            }\r\n        }\r\n          newProperty2.count += 1;\r\n          var newTrait = newPrimaryWeapon.traits ? newPrimaryWeapon.traits.find((trait) => {return trait.id === state.traits[Constants.PRIMARY_TRAIT_INDEX];}) : null;\r\n          if (!newTrait) {\r\n            newTrait = {\r\n                id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                count: 0\r\n            }\r\n        }\r\n          newTrait.count += 1;\r\n          var newTraitIndex = newPrimaryWeapon.traits ? newPrimaryWeapon.traits.findIndex((trait) => { return trait.id === newTrait.id}) : -1;\r\n        if (newTraitIndex < 0) {\r\n            newPrimaryWeapon.traits ? newPrimaryWeapon.traits.push(newTrait) : newPrimaryWeapon.traits = [newTrait];\r\n        }\r\n        else {\r\n            newPrimaryWeapon.traits[newTraitIndex] = newTrait;\r\n        }\r\n          var newProperty1Index = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.findIndex((property) => { return property.id === newProperty1.id}) : -1;\r\n        if (newProperty1Index < 0) {\r\n            newPrimaryWeapon.properties ? newPrimaryWeapon.properties.push(newProperty1) : newPrimaryWeapon.properties = [newProperty1];\r\n        }\r\n        else {\r\n            newPrimaryWeapon.properties[newProperty1Index] = newProperty1;\r\n        }\r\n          var newProperty2Index = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.findIndex((property) => { return property.id === newProperty2.id}) : -1;\r\n        if (newProperty2Index < 0) {\r\n            newPrimaryWeapon.properties ? newPrimaryWeapon.properties.push(newProperty2) : newPrimaryWeapon.properties = [newProperty2];\r\n        }\r\n        else {\r\n            newPrimaryWeapon.properties[newProperty2Index] = newProperty2;\r\n        }\r\n          var newPrimaryWeaponIndex = newCareerStat.weapons ? newCareerStat.weapons.findIndex((weapon) => { return weapon.id === newPrimaryWeapon.id}) : -1;\r\n        if (newPrimaryWeaponIndex < 0) {\r\n            newCareerStat.weapons ? newCareerStat.weapons.push(newPrimaryWeapon) : newCareerStat.weapons = [newPrimaryWeapon];\r\n        }\r\n        else {\r\n            newCareerStat.weapons[newPrimaryWeaponIndex] = newPrimaryWeapon;\r\n        } */\n        // SECONDARY WEAPON\n        // NECKLACE\n        // CHARM\n        // TRINKET\n\n        var newCareerStatIndex = careers ? careers.findIndex(career => {\n          return career.id === newCareerStat.id;\n        }) : -1;\n\n        if (newCareerStatIndex < 0) {\n          careers ? careers.push(newCareerStat) : careers = [newCareerStat];\n        } else {\n          careers[newCareerStatIndex] = newCareerStat;\n        }\n\n        transaction.update(buildStatsRef, {\n          careers: careers\n        });\n        transaction.set(db.collection('builds').doc(), {\n          careerId: state.careerId,\n          primaryWeapon: {\n            id: state.primaryWeaponId,\n            property1Id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\n            property2Id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\n            traitId: state.traits[Constants.PRIMARY_TRAIT_INDEX]\n          },\n          secondaryWeapon: {\n            id: state.secondaryWeaponId,\n            property1Id: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\n            property2Id: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\n            traitId: state.traits[Constants.SECONDARY_TRAIT_INDEX]\n          },\n          necklace: {\n            property1Id: state.properties[Constants.NECKLACE_PROPERTY1_INDEX],\n            property2Id: state.properties[Constants.NECKLACE_PROPERTY2_INDEX],\n            traitId: state.traits[Constants.NECKLACE_TRAIT_INDEX]\n          },\n          charm: {\n            property1Id: state.properties[Constants.CHARM_PROPERTY1_INDEX],\n            property2Id: state.properties[Constants.CHARM_PROPERTY2_INDEX],\n            traitId: state.traits[Constants.CHARM_TRAIT_INDEX]\n          },\n          trinket: {\n            property1Id: state.properties[Constants.TRINKET_PROPERTY1_INDEX],\n            property2Id: state.properties[Constants.TRINKET_PROPERTY2_INDEX],\n            traitId: state.traits[Constants.TRINKET_TRAIT_INDEX]\n          },\n          talent1: state.talents[Constants.TALENT_TIER_1],\n          talent2: state.talents[Constants.TALENT_TIER_2],\n          talent3: state.talents[Constants.TALENT_TIER_3],\n          talent4: state.talents[Constants.TALENT_TIER_4],\n          talent5: state.talents[Constants.TALENT_TIER_5],\n          talent6: state.talents[Constants.TALENT_TIER_6],\n          name: state.name,\n          description: state.description,\n          difficulties: state.difficulties.map(item => {\n            return item.id;\n          }),\n          missions: state.missions.map(item => {\n            return item.id;\n          }),\n          potions: state.potions.map(item => {\n            return item.id;\n          }),\n          roles: state.roles.map(item => {\n            return item.id;\n          }),\n          books: state.books.map(item => {\n            return item.id;\n          }),\n          likeCount: 0,\n          dateCreated: new Date(),\n          dateModified: new Date(),\n          userId: auth.currentUser.uid,\n          username: auth.currentUser.displayName,\n          videos: state.videos,\n          isDeleted: false\n        });\n      });\n    }).then(() => {\n      console.log('successfully updated stats');\n    });\n    /*             batch.set(db.collection('builds').doc(), {\r\n                    careerId: state.careerId,                    \r\n                    primaryWeapon: {\r\n                        id: state.primaryWeaponId,\r\n                        property1Id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                        property2Id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                        traitId: state.traits[Constants.PRIMARY_TRAIT_INDEX]\r\n                    },\r\n                    secondaryWeapon: {\r\n                        id: state.secondaryWeaponId,\r\n                        property1Id: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\r\n                        property2Id: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\r\n                        traitId: state.traits[Constants.SECONDARY_TRAIT_INDEX]\r\n                    },\r\n                    necklace: {\r\n                        property1Id: state.properties[Constants.NECKLACE_PROPERTY1_INDEX],\r\n                        property2Id: state.properties[Constants.NECKLACE_PROPERTY2_INDEX],\r\n                        traitId: state.traits[Constants.NECKLACE_TRAIT_INDEX]\r\n                    },\r\n                    charm: {\r\n                        property1Id: state.properties[Constants.CHARM_PROPERTY1_INDEX],\r\n                        property2Id: state.properties[Constants.CHARM_PROPERTY2_INDEX],\r\n                        traitId: state.traits[Constants.CHARM_TRAIT_INDEX]\r\n                    },\r\n                    trinket: {\r\n                        property1Id: state.properties[Constants.TRINKET_PROPERTY1_INDEX],\r\n                        property2Id: state.properties[Constants.TRINKET_PROPERTY2_INDEX],\r\n                        traitId: state.traits[Constants.TRINKET_TRAIT_INDEX]\r\n                    },\r\n                    talent1: state.talents[Constants.TALENT_TIER_1],\r\n                    talent2: state.talents[Constants.TALENT_TIER_2],\r\n                    talent3: state.talents[Constants.TALENT_TIER_3],\r\n                    talent4: state.talents[Constants.TALENT_TIER_4],\r\n                    talent5: state.talents[Constants.TALENT_TIER_5],\r\n                    talent6: state.talents[Constants.TALENT_TIER_6],\r\n                    name: state.name,\r\n                    description: state.description,\r\n                    difficulties: state.difficulties.map((item) => { return item.id }),\r\n                    missions: state.missions.map((item) => { return item.id }),\r\n                    potions: state.potions.map((item) => { return item.id }),\r\n                    roles: state.roles.map((item) => { return item.id }),\r\n                    books: state.books.map((item) => { return item.id }),\r\n                    likeCount: 0,\r\n                    dateCreated: new Date(),\r\n                    dateModified: new Date(),\r\n                    userId: auth.currentUser.uid,\r\n                    username: auth.currentUser.displayName,\r\n                    videos: state.videos,\r\n                    isDeleted: false\r\n                });\r\n                batch.commit(); */\n\n    /*             db.collection('builds').doc('stats').set({\r\n                    careers: [\r\n                        {\r\n                            id: state.careerId,\r\n                            count: increment,\r\n                            weapons: [\r\n                                {\r\n                                    id: state.primaryWeaponId,\r\n                                    count: increment,\r\n                                    properties: [\r\n                                        {\r\n                                            id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                                            count: increment\r\n                                        },\r\n                                        {\r\n                                            id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                                            count: increment\r\n                                        }\r\n                                    ],\r\n                                    traits: [\r\n                                        {\r\n                                            id: state.traits[Constants.PRIMARY_TRAIT_INDEX],\r\n                                            count: increment\r\n                                        }\r\n                                    ]\r\n                                },\r\n                                {\r\n                                    id: state.secondaryWeaponId,\r\n                                    count: increment,\r\n                                    properties: [\r\n                                        {\r\n                                            id: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\r\n                                            count: increment\r\n                                        },\r\n                                        {\r\n                                            id: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\r\n                                            count: increment\r\n                                        }\r\n                                    ],\r\n                                    traits: [\r\n                                        {\r\n                                            id: state.traits[Constants.SECONDARY_TRAIT_INDEX],\r\n                                            count: increment\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }); */\n\n    /*             db.collection('builds').add({\r\n                    careerId: state.careerId,                    \r\n                    primaryWeapon: {\r\n                        id: state.primaryWeaponId,\r\n                        property1Id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                        property2Id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                        traitId: state.traits[Constants.PRIMARY_TRAIT_INDEX]\r\n                    },\r\n                    secondaryWeapon: {\r\n                        id: state.secondaryWeaponId,\r\n                        property1Id: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\r\n                        property2Id: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\r\n                        traitId: state.traits[Constants.SECONDARY_TRAIT_INDEX]\r\n                    },\r\n                    necklace: {\r\n                        property1Id: state.properties[Constants.NECKLACE_PROPERTY1_INDEX],\r\n                        property2Id: state.properties[Constants.NECKLACE_PROPERTY2_INDEX],\r\n                        traitId: state.traits[Constants.NECKLACE_TRAIT_INDEX]\r\n                    },\r\n                    charm: {\r\n                        property1Id: state.properties[Constants.CHARM_PROPERTY1_INDEX],\r\n                        property2Id: state.properties[Constants.CHARM_PROPERTY2_INDEX],\r\n                        traitId: state.traits[Constants.CHARM_TRAIT_INDEX]\r\n                    },\r\n                    trinket: {\r\n                        property1Id: state.properties[Constants.TRINKET_PROPERTY1_INDEX],\r\n                        property2Id: state.properties[Constants.TRINKET_PROPERTY2_INDEX],\r\n                        traitId: state.traits[Constants.TRINKET_TRAIT_INDEX]\r\n                    },\r\n                    talent1: state.talents[Constants.TALENT_TIER_1],\r\n                    talent2: state.talents[Constants.TALENT_TIER_2],\r\n                    talent3: state.talents[Constants.TALENT_TIER_3],\r\n                    talent4: state.talents[Constants.TALENT_TIER_4],\r\n                    talent5: state.talents[Constants.TALENT_TIER_5],\r\n                    talent6: state.talents[Constants.TALENT_TIER_6],\r\n                    name: state.name,\r\n                    description: state.description,\r\n                    difficulties: state.difficulties,\r\n                    missions: state.missions,\r\n                    potions: state.potions,\r\n                    roles: state.roles,\r\n                    books: state.books,\r\n                    likeCount: 0,\r\n                    dateCreated: new Date(),\r\n                    dateModified: new Date(),\r\n                    userId: auth.currentUser.uid,\r\n                    username: auth.currentUser.displayName,\r\n                    videos: state.videos,\r\n                    isDeleted: false\r\n                }).then((docRef) => {\r\n                    console.log(\"Document written with ID: \", docRef.id);\r\n                    history.push('/build/' + docRef.id + '/edit');\r\n    \r\n                    //redirect to build edit page here\r\n    \r\n                }).catch((error) => {\r\n                    console.error(\"Error adding document: \", error);\r\n                }); */\n  }\n\n  function saveBuild() {\n    console.log('updating build, current state:');\n    console.log(state);\n\n    if (state.userId !== auth.currentUser.uid) {\n      alert('You can\\'t edit a build you didn\\'t create.');\n      return;\n    }\n\n    let buildDataRef = db.collection('builds').doc(state.buildId);\n    buildDataRef.set({\n      careerId: state.careerId,\n      primaryWeapon: {\n        id: state.primaryWeaponId,\n        property1Id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\n        property2Id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\n        traitId: state.traits[Constants.PRIMARY_TRAIT_INDEX]\n      },\n      secondaryWeapon: {\n        id: state.secondaryWeaponId,\n        property1Id: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\n        property2Id: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\n        traitId: state.traits[Constants.SECONDARY_TRAIT_INDEX]\n      },\n      necklace: {\n        property1Id: state.properties[Constants.NECKLACE_PROPERTY1_INDEX],\n        property2Id: state.properties[Constants.NECKLACE_PROPERTY2_INDEX],\n        traitId: state.traits[Constants.NECKLACE_TRAIT_INDEX]\n      },\n      charm: {\n        property1Id: state.properties[Constants.CHARM_PROPERTY1_INDEX],\n        property2Id: state.properties[Constants.CHARM_PROPERTY2_INDEX],\n        traitId: state.traits[Constants.CHARM_TRAIT_INDEX]\n      },\n      trinket: {\n        property1Id: state.properties[Constants.TRINKET_PROPERTY1_INDEX],\n        property2Id: state.properties[Constants.TRINKET_PROPERTY2_INDEX],\n        traitId: state.traits[Constants.TRINKET_TRAIT_INDEX]\n      },\n\n      /*                     primaryWeaponId: state.primaryWeaponId,\r\n                      primaryWeaponProperty1: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                      primaryWeaponProperty2:state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                      primaryWeaponTrait: state.traits[Constants.PRIMARY_TRAIT_INDEX],\r\n                      secondaryWeaponId: state.secondaryWeaponId,\r\n                      secondaryWeaponProperty1: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\r\n                      secondaryWeaponProperty2: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\r\n                      secondaryWeaponTrait: state.traits[Constants.SECONDARY_TRAIT_INDEX],\r\n                      necklaceProperty1: state.properties[Constants.NECKLACE_PROPERTY1_INDEX],\r\n                      necklaceProperty2: state.properties[Constants.NECKLACE_PROPERTY2_INDEX],\r\n                      necklaceTrait: state.traits[Constants.NECKLACE_TRAIT_INDEX],\r\n                      charmProperty1: state.properties[Constants.CHARM_PROPERTY1_INDEX],\r\n                      charmProperty2: state.properties[Constants.CHARM_PROPERTY2_INDEX],\r\n                      charmTrait: state.traits[Constants.CHARM_TRAIT_INDEX],\r\n                      trinketProperty1: state.properties[Constants.TRINKET_PROPERTY1_INDEX],\r\n                      trinketProperty2: state.properties[Constants.TRINKET_PROPERTY2_INDEX],\r\n                      trinketTrait: state.traits[Constants.TRINKET_TRAIT_INDEX], */\n      talent1: state.talents[Constants.TALENT_TIER_1],\n      talent2: state.talents[Constants.TALENT_TIER_2],\n      talent3: state.talents[Constants.TALENT_TIER_3],\n      talent4: state.talents[Constants.TALENT_TIER_4],\n      talent5: state.talents[Constants.TALENT_TIER_5],\n      talent6: state.talents[Constants.TALENT_TIER_6],\n      name: state.name,\n      description: state.description,\n      difficulties: state.difficulties.map(item => {\n        return item.id;\n      }),\n      missions: state.missions.map(item => {\n        return item.id;\n      }),\n      potions: state.potions.map(item => {\n        return item.id;\n      }),\n      roles: state.roles.map(item => {\n        return item.id;\n      }),\n      books: state.books.map(item => {\n        return item.id;\n      }),\n      dateModified: new Date(),\n      //userId: auth.currentUser.uid,\n      //username: auth.currentUser.displayName,\n      //TODO - ensure that username is updated for each build when user edits their username\n      videos: state.videos,\n      isDeleted: false\n    }, {\n      merge: true\n    }).then(() => {\n      console.log(\"Document updated with ID: \", state.buildId);\n      updateState({\n        type: \"UPDATE_DIRTY\",\n        payload: false\n      });\n      var buildSaveIndicator = document.getElementById('buildSaveIndicator');\n      buildSaveIndicator.classList.add('saved');\n      setTimeout(() => {\n        buildSaveIndicator.classList.remove('saved');\n      }, 4000);\n    }).catch(error => {\n      console.error(\"Error updating document: \", error);\n    });\n  } //get build id param\n  //if empty, load nothing from DB\n  //if not empty, load build from DB and updatestate\n  //saving builds with /create/ url saves new db item and redirects to /buildId/edit page\n  //saving builds with /edit/ url just updates the record in the db\n\n\n  if (!state.isFromDb && !state.createBuild) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"edit-build-page\",\n      \"data-readonly\": state.readonly,\n      \"data-dirty\": state.dirty,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015,\n        columnNumber: 21\n      }\n    }, \"No build found\"));\n  }\n\n  if (!auth.currentUser) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"edit-build-page\",\n      \"data-readonly\": state.readonly,\n      \"data-dirty\": state.dirty,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 21\n      }\n    }, \"You must be logged in to edit builds\"));\n  }\n\n  if (!state.createBuild && state.userId !== auth.currentUser.uid) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"edit-build-page\",\n      \"data-readonly\": state.readonly,\n      \"data-dirty\": state.dirty,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 21\n      }\n    }, \"Cannot edit build that you didn't create\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"edit-build-page build-page\",\n    \"data-liked\": state.isLiked,\n    \"data-readonly\": state.readonly,\n    \"data-dirty\": state.dirty,\n    \"data-fresh\": state.createBuild,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1034,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"buildSaveIndicator\",\n    className: \"border-03 background-18\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1035,\n      columnNumber: 17\n    }\n  }, \"Build saved...\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"build-left-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1036,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"build-buttons-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1037,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"saveBuildButton\",\n    className: \"button-01 border-04\",\n    onClick: saveBuildClick.bind(this),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1038,\n      columnNumber: 25\n    }\n  }, \"Save Build\")), /*#__PURE__*/React.createElement(HeroSelect, {\n    careerId: state.careerId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1040,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"build-main-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1042,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1043,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TabList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1044,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 29\n    }\n  }, \"Summary\"), /*#__PURE__*/React.createElement(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1046,\n      columnNumber: 29\n    }\n  }, \"Videos\"), /*#__PURE__*/React.createElement(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1047,\n      columnNumber: 29\n    }\n  }, \"Combos\")), /*#__PURE__*/React.createElement(TabPanel, {\n    className: \"build-summary-tab\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1049,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"build-details-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1050,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(HeroDetails, {\n    careerId: state.careerId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1051,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"build-name-input border-02 background-18\",\n    placeholder: \"Name your build\",\n    value: state.name,\n    onChange: handleNameChange.bind(this),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1052,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"input-build-description border-02 background-18\",\n    wrap: \"hard\",\n    placeholder: \"Describe your build\",\n    value: state.description,\n    onChange: handleDescriptionChanged.bind(this),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1053,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(BuildInformation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1054,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(BuildOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1055,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(BuildSummary, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1059,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"build-additional-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1060,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1063,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hero-abilities\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1064,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"build-talents-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1068,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(HeroTalents, {\n    contextActionType: \"UPDATE_TALENTS\",\n    careerId: state.careerId,\n    talents: state.talents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1069,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"build-right-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1072,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Inventory, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1073,\n      columnNumber: 21\n    }\n  })));\n}\n\nexport default EditBuildPage;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildPage/EditBuildPage.js"],"names":["React","useContext","HeroTalents","Inventory","HeroDetails","Tab","Tabs","TabList","TabPanel","BuildOptions","BuildSummary","AppContext","HeroSelect","useParams","useRouteMatch","auth","db","firebase","Constants","history","UserContext","Link","BuildInformation","EditBuildPage","state","updateState","userState","path","paths","split","currentPath","length","console","log","readonly","type","payload","createBuild","params","userId","buildId","root","document","getElementById","dataset","pageName","loadBuild","collection","doc","get","then","build","data","catch","error","handleDescriptionChanged","e","currentTarget","value","handleNameChange","saveBuildClick","currentUser","alert","dirty","uid","saveBuild","decrementWeaponStat","careerStat","weaponId","property1Id","property2Id","traitId","oldWeaponIndex","weapons","findIndex","item","id","oldWeapon","decrementStat","properties","traits","count","incrementWeaponStat","weaponIndex","newWeapon","push","weapon","incrementStat","stats","statId","adjustStat","adjustmentValue","statIndex","newStat","incrementNecklaceStat","necklace","incrementCharmStat","charm","incrementTrinketStat","trinket","decrementNecklaceStat","decrementCharmStat","decrementTrinketStat","isCareerOrGearChanged","careerId","primaryWeaponId","primaryWeapon","secondaryWeaponId","secondaryWeapon","PRIMARY_PROPERTY1_INDEX","PRIMARY_PROPERTY2_INDEX","SECONDARY_PROPERTY1_INDEX","SECONDARY_PROPERTY2_INDEX","NECKLACE_PROPERTY1_INDEX","NECKLACE_PROPERTY2_INDEX","CHARM_PROPERTY1_INDEX","CHARM_PROPERTY2_INDEX","TRINKET_PROPERTY1_INDEX","TRINKET_PROPERTY2_INDEX","PRIMARY_TRAIT_INDEX","trait","SECONDARY_TRAIT_INDEX","NECKLACE_TRAIT_INDEX","CHARM_TRAIT_INDEX","TRINKET_TRAIT_INDEX","updateBuildAndStats","buildStatsRef","buildRef","runTransaction","transaction","getAll","querySnapshot","size","buildStats","docs","careers","newCareerIndex","career","newCareerStat","oldCareerIndex","oldCareerStat","secondayWeapon","update","increment","batch","find","newCareerStatIndex","set","talent1","talents","TALENT_TIER_1","talent2","TALENT_TIER_2","talent3","TALENT_TIER_3","talent4","TALENT_TIER_4","talent5","TALENT_TIER_5","talent6","TALENT_TIER_6","name","description","difficulties","map","missions","potions","roles","books","likeCount","dateCreated","Date","dateModified","username","displayName","videos","isDeleted","buildDataRef","merge","buildSaveIndicator","classList","add","setTimeout","remove","isFromDb","isLiked","bind"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react';\r\nimport HeroTalents from '../heroTalents/HeroTalents'\r\nimport Inventory from '../inventory/Inventory'\r\nimport './EditBuildPage.css';\r\nimport HeroDetails from '../heroDetails/HeroDetails';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport BuildOptions from './BuildOptions';\r\nimport BuildSummary from './BuildSummary';\r\nimport { AppContext } from '../../stores/Store';\r\nimport HeroSelect from '../heroSelect/HeroSelect';\r\nimport { useParams, useRouteMatch } from 'react-router';\r\nimport { auth, db, firebase } from '../../utils/Firebase';\r\nimport * as Constants from '../../data/Constants';\r\nimport history from '../../utils/History';\r\nimport { UserContext } from '../../stores/UserStore';\r\nimport { Link } from 'react-router-dom';\r\nimport BuildInformation from './BuildInformation';\r\n\r\nfunction EditBuildPage() {\r\n\r\n        const [state, updateState] = useContext(AppContext);\r\n        const userState = useContext(UserContext);\r\n\r\n        const { path } = useRouteMatch();\r\n        var paths = path.split('/');\r\n\r\n        var currentPath = paths[paths.length-1];\r\n        console.log('current path ' + currentPath);\r\n\r\n        if (currentPath === 'edit') {\r\n            if (state.readonly) {\r\n                updateState({\r\n                    type: \"UPDATE_READONLY\", \r\n                    payload: false\r\n                });\r\n            }\r\n        } \r\n        else if (currentPath === 'view') {\r\n            if (!state.readonly) {\r\n                updateState({\r\n                    type: \"UPDATE_READONLY\", \r\n                    payload: true\r\n                });\r\n            }\r\n        }\r\n        else if (currentPath === 'create') {\r\n            if (!state.createBuild) {\r\n                updateState({\r\n                    type: \"UPDATE_CREATE_BUILD_STATE\",\r\n                    payload: true\r\n                });\r\n            }\r\n        }\r\n\r\n        let params = useParams();\r\n\r\n        console.log(!userState.userId);\r\n        console.log('params build id: ' + params.buildId);\r\n\r\n        var root = document.getElementById('root');\r\n        root.dataset.pageName = 'editBuildPage';\r\n\r\n        if (params.buildId && state.buildId !== params.buildId) {\r\n            loadBuild(params.buildId);\r\n        }\r\n\r\n        function loadBuild(buildId) {\r\n            console.log('loading build id ' + buildId);\r\n            if (state.buildId !== buildId) {\r\n                state.buildId = buildId;\r\n            }\r\n\r\n            db.collection('builds').doc(buildId).get().then((build) => {\r\n                if (!build.data()) {\r\n                    console.log('No build found with ID ' + buildId);\r\n                    //history.push('/build/create');\r\n\r\n                    //update state to indicate no build available in DB\r\n                    return;\r\n                }\r\n\r\n                console.log('build loaded from db:');\r\n                console.log(build.data());\r\n\r\n                updateState({\r\n                    type: 'INIT_STATE_FROM_DATA', \r\n                    payload: build\r\n                });\r\n            }).catch((error) => {\r\n                console.error('Error retrieving data from DB:', error);\r\n            });\r\n\r\n        }\r\n\r\n        function handleDescriptionChanged(e) {\r\n            updateState({\r\n                type: \"UPDATE_DESCRIPTION\", \r\n                payload: e.currentTarget.value\r\n            });\r\n        }\r\n\r\n        function handleNameChange(e) {\r\n            updateState({\r\n                type: \"UPDATE_NAME\", \r\n                payload: e.currentTarget.value\r\n            });\r\n        }\r\n\r\n        function saveBuildClick() {\r\n            \r\n            if (!auth.currentUser) {\r\n                alert('Can\\'t save or create builds when not authenticated.');\r\n                return;\r\n            }\r\n\r\n            if (!state.dirty) {\r\n                console.log('Not saving build, no changes have been made.');\r\n                return;\r\n            }\r\n\r\n            console.log('saving build to database build id ' + state.buildId + ' for user id ' + auth.currentUser.uid);\r\n\r\n            if (state.buildId === 0) {\r\n                createBuild();\r\n            }\r\n            else {\r\n                saveBuild();\r\n            }\r\n        }\r\n\r\n        function decrementWeaponStat(careerStat, weaponId, property1Id, property2Id, traitId) {\r\n\r\n            let oldWeaponIndex = careerStat.weapons.findIndex((item) => { return item.id === weaponId;});\r\n            let oldWeapon = careerStat.weapons[oldWeaponIndex];\r\n\r\n            decrementStat(oldWeapon.properties, property1Id);\r\n            decrementStat(oldWeapon.properties, property2Id);\r\n            decrementStat(oldWeapon.traits, traitId);\r\n\r\n            oldWeapon.count -= 1;\r\n            careerStat.weapons[oldWeaponIndex] = oldWeapon;\r\n        }\r\n\r\n        function incrementWeaponStat(careerStat, weaponId, property1Id, property2Id, traitId) {\r\n\r\n            let weaponIndex = careerStat.weapons ? careerStat.weapons.findIndex((item) => { return item.id === weaponId;}) : -1;\r\n\r\n            if (weaponIndex < 0) {\r\n                let newWeapon = {\r\n                    id: weaponId,\r\n                    count: 0,\r\n                    properties: [],\r\n                    traits: []\r\n                }\r\n                careerStat.weapons ? careerStat.weapons.push(newWeapon) : careerStat.weapons = [newWeapon];\r\n                weaponIndex = careerStat.weapons.length - 1;\r\n            }\r\n\r\n            let weapon = careerStat.weapons[weaponIndex];\r\n\r\n            incrementStat(weapon.properties, property1Id);\r\n            incrementStat(weapon.properties, property2Id);\r\n            incrementStat(weapon.traits, traitId);\r\n\r\n            weapon.count += 1;\r\n            careerStat.weapons[weaponIndex] = weapon;\r\n        }     \r\n\r\n        function decrementStat(stats, statId) {\r\n            adjustStat(stats, statId, -1);\r\n        }\r\n\r\n        function incrementStat(stats, statId) {\r\n            adjustStat(stats, statId, 1);\r\n        }\r\n\r\n        function adjustStat(stats, statId, adjustmentValue) {\r\n            let statIndex = stats ? stats.findIndex((item) => { return item.id === statId;}) : -1;\r\n            \r\n            if (statIndex < 0) {\r\n                let newStat = {\r\n                    id: statId,\r\n                    count: 0\r\n                }\r\n                stats ? stats.push(newStat) : stats = [newStat];\r\n                statIndex = stats.length - 1;\r\n            }\r\n\r\n            stats[statIndex].count = stats[statIndex].count + adjustmentValue;\r\n        }\r\n\r\n        function incrementNecklaceStat(careerStat, property1Id, property2Id, traitId) {\r\n            if (!careerStat.necklace) {\r\n                careerStat.necklace = {\r\n                    properties: [],\r\n                    traits: []\r\n                }\r\n            }\r\n\r\n            incrementStat(careerStat.necklace.properties, property1Id);\r\n            incrementStat(careerStat.necklace.properties, property2Id);\r\n            incrementStat(careerStat.necklace.traits, traitId)\r\n        }\r\n\r\n        function incrementCharmStat(careerStat, property1Id, property2Id, traitId) {\r\n            if (!careerStat.charm) {\r\n                careerStat.charm = {\r\n                    properties: [],\r\n                    traits: []\r\n                }\r\n            }\r\n\r\n            incrementStat(careerStat.charm.properties, property1Id);\r\n            incrementStat(careerStat.charm.properties, property2Id);\r\n            incrementStat(careerStat.charm.traits, traitId)\r\n        }\r\n\r\n        function incrementTrinketStat(careerStat, property1Id, property2Id, traitId) {\r\n            if (!careerStat.trinket) {\r\n                careerStat.trinket = {\r\n                    properties: [],\r\n                    traits: []\r\n                }\r\n            }\r\n\r\n            incrementStat(careerStat.trinket.properties, property1Id);\r\n            incrementStat(careerStat.trinket.properties, property2Id);\r\n            incrementStat(careerStat.trinket.traits, traitId)\r\n        }\r\n\r\n        function decrementNecklaceStat(careerStat, property1Id, property2Id, traitId) {\r\n            decrementStat(careerStat.necklace.properties, property1Id);\r\n            decrementStat(careerStat.necklace.properties, property2Id);\r\n            decrementStat(careerStat.necklace.traits, traitId)\r\n        }\r\n\r\n        function decrementCharmStat(careerStat, property1Id, property2Id, traitId) {\r\n            decrementStat(careerStat.charm.properties, property1Id);\r\n            decrementStat(careerStat.charm.properties, property2Id);\r\n            decrementStat(careerStat.charm.traits, traitId)\r\n        }\r\n\r\n        function decrementTrinketStat(careerStat, property1Id, property2Id, traitId) {\r\n            decrementStat(careerStat.trinket.properties, property1Id);\r\n            decrementStat(careerStat.trinket.properties, property2Id);\r\n            decrementStat(careerStat.trinket.traits, traitId)\r\n        }\r\n\r\n        function isCareerOrGearChanged(build) {\r\n            return !(state.careerId === build.data().careerId &&\r\n            state.primaryWeaponId === build.data().primaryWeapon.id &&\r\n            state.secondaryWeaponId === build.data().secondaryWeapon.id &&\r\n            state.properties[Constants.PRIMARY_PROPERTY1_INDEX] === build.data().primaryWeapon.property1Id &&\r\n            state.properties[Constants.PRIMARY_PROPERTY2_INDEX] === build.data().primaryWeapon.property2Id &&\r\n            state.properties[Constants.SECONDARY_PROPERTY1_INDEX] === build.data().secondaryWeapon.property1Id &&\r\n            state.properties[Constants.SECONDARY_PROPERTY2_INDEX] === build.data().secondaryWeapon.property2Id &&\r\n            state.properties[Constants.NECKLACE_PROPERTY1_INDEX] === build.data().necklace.property1Id &&\r\n            state.properties[Constants.NECKLACE_PROPERTY2_INDEX] === build.data().necklace.property2Id &&\r\n            state.properties[Constants.CHARM_PROPERTY1_INDEX] === build.data().charm.property1Id &&\r\n            state.properties[Constants.CHARM_PROPERTY2_INDEX] === build.data().charm.property2Id &&\r\n            state.properties[Constants.TRINKET_PROPERTY1_INDEX] === build.data().trinket.property1Id &&\r\n            state.properties[Constants.TRINKET_PROPERTY2_INDEX] === build.data().trinket.property2Id &&\r\n            state.traits[Constants.PRIMARY_TRAIT_INDEX] === build.data().primaryWeapon.trait &&\r\n            state.traits[Constants.SECONDARY_TRAIT_INDEX] === build.data().secondaryWeapon.trait &&\r\n            state.traits[Constants.NECKLACE_TRAIT_INDEX] === build.data().necklace.trait &&\r\n            state.traits[Constants.CHARM_TRAIT_INDEX] === build.data().charm.trait &&\r\n            state.traits[Constants.TRINKET_TRAIT_INDEX] === build.data().trinket.trait);\r\n        }\r\n\r\n        function updateBuildAndStats() {\r\n            let buildStatsRef = db.collection('builds').doc('stats');\r\n            let buildRef = db.collection('builds').doc(state.buildId);\r\n\r\n            db.runTransaction((transaction) => {\r\n                return transaction.getAll(buildStatsRef, buildRef).then((querySnapshot) => {\r\n                    if (!querySnapshot || querySnapshot.size < 2) {\r\n                        console.log('Could not find stats and build document');\r\n                        return;\r\n                    }\r\n\r\n                    let buildStats = querySnapshot.docs[0];\r\n                    let build = querySnapshot.docs[1];\r\n\r\n                    let careers = buildStats.data().careers;\r\n\r\n                    let newCareerIndex = careers.findIndex((career) => { return career.id === state.careerId});\r\n                    let newCareerStat = careers[newCareerIndex];\r\n                    let oldCareerIndex = careers.findIndex((career) => { return career.id === build.data().careerId});\r\n                    let oldCareerStat = careers[oldCareerIndex];\r\n\r\n                    // PREPARE BUILD STATS\r\n\r\n                    if (isCareerOrGearChanged(build)) {\r\n                        //build equipment or career has changed, update stats in addition to saving changes\r\n                    \r\n                        if (state.careerId !== build.data().careerId) { // Career changed, decrement all stats from old career, increment all in new career\r\n            \r\n                            if (!newCareerStat) {\r\n                                newCareerStat = {\r\n                                    id: state.careerId,\r\n                                    count: 0,\r\n                                    weapons: [],\r\n                                    necklace: {\r\n                                        properties: [],\r\n                                        traits: []\r\n                                    },\r\n                                    charm: {\r\n                                        properties: [],\r\n                                        traits: []\r\n                                    },\r\n                                    trinket: {\r\n                                        properties: [],\r\n                                        traits: []\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            newCareerStat.count +=1;\r\n                            oldCareerStat.count -= 1;\r\n                            \r\n                            decrementWeaponStat(oldCareerStat, build.data().primaryWeapon.id, build.data().primaryWeapon.property1Id, build.data().primaryWeapon.property2Id, build.data().primaryWeapon.traitId);\r\n                            decrementWeaponStat(oldCareerStat, build.data().secondayWeapon.id, build.data().secondayWeapon.property1Id, build.data().secondayWeapon.property2Id, build.data().secondayWeapon.traitId);\r\n                            decrementNecklaceStat(oldCareerStat, build.data().necklace.property1Id, build.data().necklace.property2Id, build.data().necklace.traitId);\r\n                            decrementCharmStat(oldCareerStat, build.data().charm.property1Id, build.data().charm.property2Id, build.data().charm.traitId);\r\n                            decrementTrinketStat(oldCareerStat, build.data().trinket.property1Id, build.data().trinket.property2Id, build.data().trinket.traitId);\r\n                            \r\n                            incrementWeaponStat(newCareerStat, state.primaryWeaponId, state.properties[Constants.PRIMARY_PROPERTY1_INDEX], state.properties[Constants.PRIMARY_PROPERTY2_INDEX], state.properties[Constants.PRIMARY_TRAIT_INDEX]);\r\n                            incrementWeaponStat(newCareerStat, state.secondaryWeaponId, state.properties[Constants.SECONDARY_PROPERTY1_INDEX], state.properties[Constants.SECONDARY_PROPERTY2_INDEX], state.properties[Constants.SECONDARY_TRAIT_INDEX]);\r\n                            incrementNecklaceStat(newCareerStat, state.properties[Constants.NECKLACE_PROPERTY1_INDEX], state.properties[Constants.NECKLACE_PROPERTY2_INDEX], state.properties[Constants.NECKLACE_TRAIT_INDEX]);\r\n                            incrementCharmStat(newCareerStat, state.properties[Constants.CHARM_PROPERTY1_INDEX], state.properties[Constants.CHARM_PROPERTY2_INDEX], state.properties[Constants.CHARM_TRAIT_INDEX]);\r\n                            incrementTrinketStat(newCareerStat, state.properties[Constants.TRINKET_PROPERTY1_INDEX], state.properties[Constants.TRINKET_PROPERTY2_INDEX], state.properties[Constants.TRINKET_TRAIT_INDEX]);\r\n                        }\r\n                        else { // Check properties and traits of each weapon and gear item and increment/decrement where necessary\r\n                            if (state.primaryWeaponId !== build.data().primaryWeapon.id) {\r\n                                decrementWeaponStat(oldCareerStat, build.data().primaryWeapon.id, build.data().primaryWeapon.property1Id, build.data().primaryWeapon.property2Id, build.data().primaryWeapon.traitId);\r\n                                incrementWeaponStat(newCareerStat, state.primaryWeaponId, state.properties[Constants.PRIMARY_PROPERTY1_INDEX], state.properties[Constants.PRIMARY_PROPERTY2_INDEX], state.properties[Constants.PRIMARY_TRAIT_INDEX]);\r\n                            } else {\r\n                                // Weapon is the same as before, only adjust properties/traits\r\n                                let weaponIndex = oldCareerStat.weapons.findIndex((item) => { return item.id === build.data().primaryWeapon.id;});\r\n                                let weapon = oldCareerStat.weapons[weaponIndex];\r\n\r\n                                //check if properties or trait changed\r\n                                if (state.properties[Constants.PRIMARY_PROPERTY1_INDEX] !== build.data().primaryWeapon.property1Id) {\r\n                                    // decrement property\r\n                                    decrementStat(weapon.properties, build.data().primaryWeapon.property1Id);\r\n                                    incrementStat(weapon.properties, state.properties[Constants.PRIMARY_PROPERTY1_INDEX]);\r\n                                }\r\n                                if (state.properties[Constants.PRIMARY_PROPERTY2_INDEX] !== build.data().primaryWeapon.property2Id) {\r\n                                    // decrement property\r\n                                    decrementStat(weapon.properties, build.data().primaryWeapon.property2Id);\r\n                                    incrementStat(weapon.properties, state.properties[Constants.PRIMARY_PROPERTY2_INDEX]);\r\n                                }\r\n                                if (state.traits[Constants.PRIMARY_TRAIT_INDEX] !== build.data().primaryWeapon.traitId) {\r\n                                    // decrement trait\r\n                                    decrementStat(weapon.traits, build.data().primaryWeapon.traitId);\r\n                                    incrementStat(weapon.traits, state.traits[Constants.PRIMARY_TRAIT_INDEX]);\r\n                                }\r\n\r\n                            }\r\n\r\n                            if (state.secondaryWeaponId !== build.data().secondaryWeapon.id) {\r\n                                decrementWeaponStat(oldCareerStat, build.data().secondayWeapon.id, build.data().secondayWeapon.property1Id, build.data().secondayWeapon.property2Id, build.data().secondayWeapon.traitId);\r\n                                incrementWeaponStat(newCareerStat, state.secondaryWeaponId, state.properties[Constants.SECONDARY_PROPERTY1_INDEX], state.properties[Constants.SECONDARY_PROPERTY2_INDEX], state.properties[Constants.SECONDARY_TRAIT_INDEX]);\r\n                            } else {\r\n                                // Weapon is the same as before, only adjust properties/traits\r\n                                let weaponIndex = oldCareerStat.weapons.findIndex((item) => { return item.id === build.data().secondaryWeapon.id;});\r\n                                let weapon = oldCareerStat.weapons[weaponIndex];\r\n\r\n                                //check if properties or trait changed\r\n                                if (state.properties[Constants.SECONDARY_PROPERTY1_INDEX] !== build.data().secondaryWeapon.property1Id) {\r\n                                    // decrement property\r\n                                    decrementStat(weapon.properties, build.data().secondaryWeapon.property1Id);\r\n                                    incrementStat(weapon.properties, state.properties[Constants.SECONDARY_PROPERTY1_INDEX]);\r\n                                }\r\n                                if (state.properties[Constants.SECONDARY_PROPERTY2_INDEX] !== build.data().secondaryWeapon.property2Id) {\r\n                                    // decrement property\r\n                                    decrementStat(weapon.properties, build.data().secondaryWeapon.property2Id);\r\n                                    incrementStat(weapon.properties, state.properties[Constants.SECONDARY_PROPERTY2_INDEX]);\r\n                                }\r\n                                if (state.traits[Constants.SECONDARY_TRAIT_INDEX] !== build.data().secondaryWeapon.traitId) {\r\n                                    // decrement trait\r\n                                    decrementStat(weapon.traits, build.data().secondaryWeapon.traitId);\r\n                                    incrementStat(weapon.traits, state.traits[Constants.SECONDARY_TRAIT_INDEX]);\r\n                                }\r\n                            }\r\n\r\n                            // REPEAT this for each property and trait\r\n                            if (state.properties[Constants.NECKLACE_PROPERTY1_INDEX] !== build.data().necklace.property1Id) {\r\n                                // decrement property\r\n                                decrementStat(oldCareerStat.necklace.properties, build.data().necklace.property1Id);\r\n                                incrementStat(newCareerStat.necklace.properties, state.properties[Constants.NECKLACE_PROPERTY1_INDEX]);\r\n                            }\r\n                            if (state.properties[Constants.NECKLACE_PROPERTY2_INDEX] !== build.data().necklace.property2Id) {\r\n                                // decrement property\r\n                                decrementStat(oldCareerStat.necklace.properties, build.data().necklace.property2Id);\r\n                                incrementStat(newCareerStat.necklace.properties, state.properties[Constants.NECKLACE_PROPERTY2_INDEX]);\r\n                            }\r\n                            if (state.traits[Constants.NECKLACE_TRAIT_INDEX] !== build.data().necklace.traitId) {\r\n                                // decrement trait\r\n                                decrementStat(oldCareerStat.necklace.traits, build.data().necklace.traitId);\r\n                                incrementStat(newCareerStat.necklace.traits, state.traits[Constants.NECKLACE_TRAIT_INDEX]);\r\n                            }\r\n                            \r\n                            if (state.properties[Constants.CHARM_PROPERTY1_INDEX] !== build.data().charm.property1Id) {\r\n                                // decrement property\r\n                                decrementStat(oldCareerStat.charm.properties, build.data().charm.property1Id);\r\n                                incrementStat(newCareerStat.charm.properties, state.properties[Constants.CHARM_PROPERTY1_INDEX]);\r\n                            }\r\n                            if (state.properties[Constants.CHARM_PROPERTY2_INDEX] !== build.data().charm.property2Id) {\r\n                                // decrement property\r\n                                decrementStat(oldCareerStat.charm.properties, build.data().charm.property2Id);\r\n                                incrementStat(newCareerStat.charm.properties, state.properties[Constants.CHARM_PROPERTY2_INDEX]);\r\n                            }\r\n                            if (state.traits[Constants.CHARM_TRAIT_INDEX] !== build.data().charm.traitId) {\r\n                                // decrement trait\r\n                                decrementStat(oldCareerStat.charm.traits, build.data().charm.traitId);\r\n                                incrementStat(newCareerStat.charm.traits, state.traits[Constants.CHARM_TRAIT_INDEX]);\r\n                            }\r\n                            \r\n                            if (state.properties[Constants.TRINKET_PROPERTY1_INDEX] !== build.data().trinket.property1Id) {\r\n                                // decrement property\r\n                                decrementStat(oldCareerStat.trinket.properties, build.data().trinket.property1Id);\r\n                                incrementStat(newCareerStat.trinket.properties, state.properties[Constants.TRINKET_PROPERTY1_INDEX]);\r\n                            }\r\n                            if (state.properties[Constants.TRINKET_PROPERTY2_INDEX] !== build.data().trinket.property2Id) {\r\n                                // decrement property\r\n                                decrementStat(oldCareerStat.trinket.properties, build.data().trinket.property2Id);\r\n                                incrementStat(newCareerStat.trinket.properties, state.properties[Constants.TRINKET_PROPERTY2_INDEX]);\r\n                            }\r\n                            if (state.traits[Constants.TRINKET_TRAIT_INDEX] !== build.data().trinket.traitId) {\r\n                                // decrement trait\r\n                                decrementStat(oldCareerStat.trinket.traits, build.data().trinket.traitId);\r\n                                incrementStat(newCareerStat.trinket.traits, state.traits[Constants.TRINKET_TRAIT_INDEX]);\r\n                            }\r\n                        }\r\n                    }\r\n/* \r\n                    let newPrimaryWeapon = newCareerStat.weapons ? newCareerStat.weapons.find((weapon) => {return weapon.id === state.primaryWeaponId;}) : null;\r\n                    let oldPrimaryWeapon = null\r\n\r\n                    if (!newPrimaryWeapon) {\r\n                        newPrimaryWeapon = {\r\n                            id: state.primaryWeaponId,\r\n                            count: 0,\r\n                            properties: [],\r\n                            traits: []\r\n                        }\r\n                    }\r\n                    \r\n                    if (state.primaryWeaponId !== build.data().primaryWeaponId) {\r\n\r\n                    }\r\n\r\n                    newPrimaryWeapon.count += 1;\r\n\r\n                    var newProperty1 = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.find((property) => {return property.id === state.properties[Constants.PRIMARY_PROPERTY1_INDEX];}) : null;\r\n\r\n                    if (!newProperty1) {\r\n                        newProperty1 = {\r\n                            id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                            count: 0\r\n                        }\r\n                    }\r\n\r\n                    newProperty1.count += 1;\r\n\r\n                    var newProperty2 = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.find((property) => {return property.id === state.properties[Constants.PRIMARY_PROPERTY2_INDEX];}) : null;\r\n\r\n                    if (!newProperty2) {\r\n                        newProperty2 = {\r\n                            id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                            count: 0\r\n                        }\r\n                    }\r\n\r\n                    newProperty2.count += 1;\r\n\r\n                    var newTrait = newPrimaryWeapon.traits ? newPrimaryWeapon.traits.find((trait) => {return trait.id === state.traits[Constants.PRIMARY_TRAIT_INDEX];}) : null;\r\n\r\n                    if (!newTrait) {\r\n                        newTrait = {\r\n                            id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                            count: 0\r\n                        }\r\n                    }\r\n\r\n                    newTrait.count += 1;\r\n\r\n                    var newTraitIndex = newPrimaryWeapon.traits ? newPrimaryWeapon.traits.findIndex((trait) => { return trait.id === newTrait.id}) : -1;\r\n                    if (newTraitIndex < 0) {\r\n                        newPrimaryWeapon.traits ? newPrimaryWeapon.traits.push(newTrait) : newPrimaryWeapon.traits = [newTrait];\r\n                    }\r\n                    else {\r\n                        newPrimaryWeapon.traits[newTraitIndex] = newTrait;\r\n                    }\r\n\r\n                    var newProperty1Index = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.findIndex((property) => { return property.id === newProperty1.id}) : -1;\r\n                    if (newProperty1Index < 0) {\r\n                        newPrimaryWeapon.properties ? newPrimaryWeapon.properties.push(newProperty1) : newPrimaryWeapon.properties = [newProperty1];\r\n                    }\r\n                    else {\r\n                        newPrimaryWeapon.properties[newProperty1Index] = newProperty1;\r\n                    }\r\n\r\n                    var newProperty2Index = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.findIndex((property) => { return property.id === newProperty2.id}) : -1;\r\n                    if (newProperty2Index < 0) {\r\n                        newPrimaryWeapon.properties ? newPrimaryWeapon.properties.push(newProperty2) : newPrimaryWeapon.properties = [newProperty2];\r\n                    }\r\n                    else {\r\n                        newPrimaryWeapon.properties[newProperty2Index] = newProperty2;\r\n                    }\r\n\r\n                    var newPrimaryWeaponIndex = newCareerStat.weapons ? newCareerStat.weapons.findIndex((weapon) => { return weapon.id === newPrimaryWeapon.id}) : -1;\r\n                    if (newPrimaryWeaponIndex < 0) {\r\n                        newCareerStat.weapons ? newCareerStat.weapons.push(newPrimaryWeapon) : newCareerStat.weapons = [newPrimaryWeapon];\r\n                    }\r\n                    else {\r\n                        newCareerStat.weapons[newPrimaryWeaponIndex] = newPrimaryWeapon;\r\n                    }\r\n\r\n                    var newCareerStatIndex = careers ? careers.findIndex((career) => { return career.id === newCareerStat.id}) : -1;\r\n                    if (newCareerStatIndex < 0) {\r\n                        careers ? careers.push(newCareerStat) : careers = [newCareerStat];\r\n                    }\r\n                    else {\r\n                        careers[newCareerStatIndex] = newCareerStat;\r\n                    } */\r\n\r\n                    careers[oldCareerIndex] = oldCareerStat;\r\n                    careers[newCareerIndex] = newCareerStat;\r\n                    \r\n                    transaction.update(buildStatsRef, { careers: careers });\r\n                        \r\n                \r\n                });\r\n            }).then(() => {\r\n                console.log('successfully updated stats for modified build');\r\n            });\r\n        }\r\n\r\n        function createBuild() {\r\n            console.log('Creating new build.');\r\n            let increment = 1;//firebase.firestore.FieldValue.increment(1);\r\n\r\n            let batch = db.batch();\r\n\r\n            let buildStatsRef = db.collection('builds').doc('stats');\r\n\r\n            db.runTransaction((transaction) => {\r\n                return transaction.get(buildStatsRef).then((buildStats) => {\r\n                    if (!buildStats) {\r\n                        console.log('No stats document found');\r\n                        return;\r\n                    }\r\n\r\n                    console.log(buildStats.data());\r\n\r\n                    var careers = buildStats.data().careers;\r\n\r\n                    var newCareerStat = careers.find((career) => {return career.id === state.careerId;});\r\n                    console.log(newCareerStat);\r\n\r\n                    if (!newCareerStat) {\r\n                        newCareerStat = {\r\n                            id: state.careerId,\r\n                            count: 0,\r\n                            weapons: [],\r\n                            necklace: {\r\n                                properties: [],\r\n                                traits: []\r\n                            },\r\n                            charm: {\r\n                                properties: [],\r\n                                traits: []\r\n                            },\r\n                            trinket: {\r\n                                properties: [],\r\n                                traits: []\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    newCareerStat.count += 1;\r\n\r\n                    incrementWeaponStat(newCareerStat, state.primaryWeaponId, state.properties[Constants.PRIMARY_PROPERTY1_INDEX], state.properties[Constants.PRIMARY_PROPERTY2_INDEX], state.properties[Constants.PRIMARY_TRAIT_INDEX]);\r\n                    incrementWeaponStat(newCareerStat, state.secondaryWeaponId, state.properties[Constants.SECONDARY_PROPERTY1_INDEX], state.properties[Constants.SECONDARY_PROPERTY2_INDEX], state.properties[Constants.SECONDARY_TRAIT_INDEX]);\r\n                    incrementNecklaceStat(newCareerStat, state.properties[Constants.NECKLACE_PROPERTY1_INDEX], state.properties[Constants.NECKLACE_PROPERTY2_INDEX], state.properties[Constants.NECKLACE_TRAIT_INDEX]);\r\n                    incrementCharmStat(newCareerStat, state.properties[Constants.CHARM_PROPERTY1_INDEX], state.properties[Constants.CHARM_PROPERTY2_INDEX], state.properties[Constants.CHARM_TRAIT_INDEX]);\r\n                    incrementTrinketStat(newCareerStat, state.properties[Constants.TRINKET_PROPERTY1_INDEX], state.properties[Constants.TRINKET_PROPERTY2_INDEX], state.properties[Constants.TRINKET_TRAIT_INDEX]);\r\n\r\n                    /* var newPrimaryWeapon = newCareerStat.weapons ? newCareerStat.weapons.find((weapon) => {return weapon.id === state.primaryWeaponId;}) : null;\r\n\r\n                    if (!newPrimaryWeapon) {\r\n                        newPrimaryWeapon = {\r\n                            id: state.primaryWeaponId,\r\n                            count: 0,\r\n                            properties: [],\r\n                            traits: []\r\n                        }\r\n                    }\r\n\r\n                    newPrimaryWeapon.count += 1;\r\n\r\n                    var newProperty1 = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.find((property) => {return property.id === state.properties[Constants.PRIMARY_PROPERTY1_INDEX];}) : null;\r\n\r\n                    if (!newProperty1) {\r\n                        newProperty1 = {\r\n                            id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                            count: 0\r\n                        }\r\n                    }\r\n\r\n                    newProperty1.count += 1;\r\n\r\n                    var newProperty2 = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.find((property) => {return property.id === state.properties[Constants.PRIMARY_PROPERTY2_INDEX];}) : null;\r\n\r\n                    if (!newProperty2) {\r\n                        newProperty2 = {\r\n                            id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                            count: 0\r\n                        }\r\n                    }\r\n\r\n                    newProperty2.count += 1;\r\n\r\n                    var newTrait = newPrimaryWeapon.traits ? newPrimaryWeapon.traits.find((trait) => {return trait.id === state.traits[Constants.PRIMARY_TRAIT_INDEX];}) : null;\r\n\r\n                    if (!newTrait) {\r\n                        newTrait = {\r\n                            id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                            count: 0\r\n                        }\r\n                    }\r\n\r\n                    newTrait.count += 1;\r\n\r\n                    var newTraitIndex = newPrimaryWeapon.traits ? newPrimaryWeapon.traits.findIndex((trait) => { return trait.id === newTrait.id}) : -1;\r\n                    if (newTraitIndex < 0) {\r\n                        newPrimaryWeapon.traits ? newPrimaryWeapon.traits.push(newTrait) : newPrimaryWeapon.traits = [newTrait];\r\n                    }\r\n                    else {\r\n                        newPrimaryWeapon.traits[newTraitIndex] = newTrait;\r\n                    }\r\n\r\n                    var newProperty1Index = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.findIndex((property) => { return property.id === newProperty1.id}) : -1;\r\n                    if (newProperty1Index < 0) {\r\n                        newPrimaryWeapon.properties ? newPrimaryWeapon.properties.push(newProperty1) : newPrimaryWeapon.properties = [newProperty1];\r\n                    }\r\n                    else {\r\n                        newPrimaryWeapon.properties[newProperty1Index] = newProperty1;\r\n                    }\r\n\r\n                    var newProperty2Index = newPrimaryWeapon.properties ? newPrimaryWeapon.properties.findIndex((property) => { return property.id === newProperty2.id}) : -1;\r\n                    if (newProperty2Index < 0) {\r\n                        newPrimaryWeapon.properties ? newPrimaryWeapon.properties.push(newProperty2) : newPrimaryWeapon.properties = [newProperty2];\r\n                    }\r\n                    else {\r\n                        newPrimaryWeapon.properties[newProperty2Index] = newProperty2;\r\n                    }\r\n\r\n                    var newPrimaryWeaponIndex = newCareerStat.weapons ? newCareerStat.weapons.findIndex((weapon) => { return weapon.id === newPrimaryWeapon.id}) : -1;\r\n                    if (newPrimaryWeaponIndex < 0) {\r\n                        newCareerStat.weapons ? newCareerStat.weapons.push(newPrimaryWeapon) : newCareerStat.weapons = [newPrimaryWeapon];\r\n                    }\r\n                    else {\r\n                        newCareerStat.weapons[newPrimaryWeaponIndex] = newPrimaryWeapon;\r\n                    } */\r\n\r\n                    // SECONDARY WEAPON\r\n\r\n\r\n                    \r\n                    // NECKLACE\r\n\r\n\r\n\r\n                    // CHARM\r\n\r\n\r\n\r\n                    // TRINKET\r\n\r\n\r\n                    var newCareerStatIndex = careers ? careers.findIndex((career) => { return career.id === newCareerStat.id}) : -1;\r\n                    if (newCareerStatIndex < 0) {\r\n                        careers ? careers.push(newCareerStat) : careers = [newCareerStat];\r\n                    }\r\n                    else {\r\n                        careers[newCareerStatIndex] = newCareerStat;\r\n                    }\r\n                    \r\n                    transaction.update(buildStatsRef, { careers: careers });\r\n                    transaction.set(db.collection('builds').doc(), {\r\n                        careerId: state.careerId,                    \r\n                        primaryWeapon: {\r\n                            id: state.primaryWeaponId,\r\n                            property1Id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                            property2Id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                            traitId: state.traits[Constants.PRIMARY_TRAIT_INDEX]\r\n                        },\r\n                        secondaryWeapon: {\r\n                            id: state.secondaryWeaponId,\r\n                            property1Id: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\r\n                            property2Id: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\r\n                            traitId: state.traits[Constants.SECONDARY_TRAIT_INDEX]\r\n                        },\r\n                        necklace: {\r\n                            property1Id: state.properties[Constants.NECKLACE_PROPERTY1_INDEX],\r\n                            property2Id: state.properties[Constants.NECKLACE_PROPERTY2_INDEX],\r\n                            traitId: state.traits[Constants.NECKLACE_TRAIT_INDEX]\r\n                        },\r\n                        charm: {\r\n                            property1Id: state.properties[Constants.CHARM_PROPERTY1_INDEX],\r\n                            property2Id: state.properties[Constants.CHARM_PROPERTY2_INDEX],\r\n                            traitId: state.traits[Constants.CHARM_TRAIT_INDEX]\r\n                        },\r\n                        trinket: {\r\n                            property1Id: state.properties[Constants.TRINKET_PROPERTY1_INDEX],\r\n                            property2Id: state.properties[Constants.TRINKET_PROPERTY2_INDEX],\r\n                            traitId: state.traits[Constants.TRINKET_TRAIT_INDEX]\r\n                        },\r\n                        talent1: state.talents[Constants.TALENT_TIER_1],\r\n                        talent2: state.talents[Constants.TALENT_TIER_2],\r\n                        talent3: state.talents[Constants.TALENT_TIER_3],\r\n                        talent4: state.talents[Constants.TALENT_TIER_4],\r\n                        talent5: state.talents[Constants.TALENT_TIER_5],\r\n                        talent6: state.talents[Constants.TALENT_TIER_6],\r\n                        name: state.name,\r\n                        description: state.description,\r\n                        difficulties: state.difficulties.map((item) => { return item.id }),\r\n                        missions: state.missions.map((item) => { return item.id }),\r\n                        potions: state.potions.map((item) => { return item.id }),\r\n                        roles: state.roles.map((item) => { return item.id }),\r\n                        books: state.books.map((item) => { return item.id }),\r\n                        likeCount: 0,\r\n                        dateCreated: new Date(),\r\n                        dateModified: new Date(),\r\n                        userId: auth.currentUser.uid,\r\n                        username: auth.currentUser.displayName,\r\n                        videos: state.videos,\r\n                        isDeleted: false\r\n                    });\r\n                });\r\n            }).then(() => {\r\n                console.log('successfully updated stats');\r\n            });\r\n\r\n/*             batch.set(db.collection('builds').doc(), {\r\n                careerId: state.careerId,                    \r\n                primaryWeapon: {\r\n                    id: state.primaryWeaponId,\r\n                    property1Id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.PRIMARY_TRAIT_INDEX]\r\n                },\r\n                secondaryWeapon: {\r\n                    id: state.secondaryWeaponId,\r\n                    property1Id: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.SECONDARY_TRAIT_INDEX]\r\n                },\r\n                necklace: {\r\n                    property1Id: state.properties[Constants.NECKLACE_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.NECKLACE_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.NECKLACE_TRAIT_INDEX]\r\n                },\r\n                charm: {\r\n                    property1Id: state.properties[Constants.CHARM_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.CHARM_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.CHARM_TRAIT_INDEX]\r\n                },\r\n                trinket: {\r\n                    property1Id: state.properties[Constants.TRINKET_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.TRINKET_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.TRINKET_TRAIT_INDEX]\r\n                },\r\n                talent1: state.talents[Constants.TALENT_TIER_1],\r\n                talent2: state.talents[Constants.TALENT_TIER_2],\r\n                talent3: state.talents[Constants.TALENT_TIER_3],\r\n                talent4: state.talents[Constants.TALENT_TIER_4],\r\n                talent5: state.talents[Constants.TALENT_TIER_5],\r\n                talent6: state.talents[Constants.TALENT_TIER_6],\r\n                name: state.name,\r\n                description: state.description,\r\n                difficulties: state.difficulties.map((item) => { return item.id }),\r\n                missions: state.missions.map((item) => { return item.id }),\r\n                potions: state.potions.map((item) => { return item.id }),\r\n                roles: state.roles.map((item) => { return item.id }),\r\n                books: state.books.map((item) => { return item.id }),\r\n                likeCount: 0,\r\n                dateCreated: new Date(),\r\n                dateModified: new Date(),\r\n                userId: auth.currentUser.uid,\r\n                username: auth.currentUser.displayName,\r\n                videos: state.videos,\r\n                isDeleted: false\r\n            });\r\n            batch.commit(); */\r\n\r\n/*             db.collection('builds').doc('stats').set({\r\n                careers: [\r\n                    {\r\n                        id: state.careerId,\r\n                        count: increment,\r\n                        weapons: [\r\n                            {\r\n                                id: state.primaryWeaponId,\r\n                                count: increment,\r\n                                properties: [\r\n                                    {\r\n                                        id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                                        count: increment\r\n                                    },\r\n                                    {\r\n                                        id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                                        count: increment\r\n                                    }\r\n                                ],\r\n                                traits: [\r\n                                    {\r\n                                        id: state.traits[Constants.PRIMARY_TRAIT_INDEX],\r\n                                        count: increment\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                id: state.secondaryWeaponId,\r\n                                count: increment,\r\n                                properties: [\r\n                                    {\r\n                                        id: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\r\n                                        count: increment\r\n                                    },\r\n                                    {\r\n                                        id: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\r\n                                        count: increment\r\n                                    }\r\n                                ],\r\n                                traits: [\r\n                                    {\r\n                                        id: state.traits[Constants.SECONDARY_TRAIT_INDEX],\r\n                                        count: increment\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }); */\r\n\r\n/*             db.collection('builds').add({\r\n                careerId: state.careerId,                    \r\n                primaryWeapon: {\r\n                    id: state.primaryWeaponId,\r\n                    property1Id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.PRIMARY_TRAIT_INDEX]\r\n                },\r\n                secondaryWeapon: {\r\n                    id: state.secondaryWeaponId,\r\n                    property1Id: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.SECONDARY_TRAIT_INDEX]\r\n                },\r\n                necklace: {\r\n                    property1Id: state.properties[Constants.NECKLACE_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.NECKLACE_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.NECKLACE_TRAIT_INDEX]\r\n                },\r\n                charm: {\r\n                    property1Id: state.properties[Constants.CHARM_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.CHARM_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.CHARM_TRAIT_INDEX]\r\n                },\r\n                trinket: {\r\n                    property1Id: state.properties[Constants.TRINKET_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.TRINKET_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.TRINKET_TRAIT_INDEX]\r\n                },\r\n                talent1: state.talents[Constants.TALENT_TIER_1],\r\n                talent2: state.talents[Constants.TALENT_TIER_2],\r\n                talent3: state.talents[Constants.TALENT_TIER_3],\r\n                talent4: state.talents[Constants.TALENT_TIER_4],\r\n                talent5: state.talents[Constants.TALENT_TIER_5],\r\n                talent6: state.talents[Constants.TALENT_TIER_6],\r\n                name: state.name,\r\n                description: state.description,\r\n                difficulties: state.difficulties,\r\n                missions: state.missions,\r\n                potions: state.potions,\r\n                roles: state.roles,\r\n                books: state.books,\r\n                likeCount: 0,\r\n                dateCreated: new Date(),\r\n                dateModified: new Date(),\r\n                userId: auth.currentUser.uid,\r\n                username: auth.currentUser.displayName,\r\n                videos: state.videos,\r\n                isDeleted: false\r\n            }).then((docRef) => {\r\n                console.log(\"Document written with ID: \", docRef.id);\r\n                history.push('/build/' + docRef.id + '/edit');\r\n\r\n                //redirect to build edit page here\r\n\r\n            }).catch((error) => {\r\n                console.error(\"Error adding document: \", error);\r\n            }); */\r\n        }\r\n\r\n        function saveBuild() {\r\n            console.log('updating build, current state:');\r\n            console.log(state);\r\n\r\n            if (state.userId !== auth.currentUser.uid) {\r\n                alert('You can\\'t edit a build you didn\\'t create.');\r\n                return;\r\n            }\r\n\r\n            let buildDataRef = db.collection('builds').doc(state.buildId);\r\n\r\n            buildDataRef.set({\r\n                careerId: state.careerId,\r\n                primaryWeapon: {\r\n                    id: state.primaryWeaponId,\r\n                    property1Id: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.PRIMARY_TRAIT_INDEX]\r\n                },\r\n                secondaryWeapon: {\r\n                    id: state.secondaryWeaponId,\r\n                    property1Id: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.SECONDARY_TRAIT_INDEX]\r\n                },\r\n                necklace: {\r\n                    property1Id: state.properties[Constants.NECKLACE_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.NECKLACE_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.NECKLACE_TRAIT_INDEX]\r\n                },\r\n                charm: {\r\n                    property1Id: state.properties[Constants.CHARM_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.CHARM_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.CHARM_TRAIT_INDEX]\r\n                },\r\n                trinket: {\r\n                    property1Id: state.properties[Constants.TRINKET_PROPERTY1_INDEX],\r\n                    property2Id: state.properties[Constants.TRINKET_PROPERTY2_INDEX],\r\n                    traitId: state.traits[Constants.TRINKET_TRAIT_INDEX]\r\n                },\r\n/*                     primaryWeaponId: state.primaryWeaponId,\r\n                primaryWeaponProperty1: state.properties[Constants.PRIMARY_PROPERTY1_INDEX],\r\n                primaryWeaponProperty2:state.properties[Constants.PRIMARY_PROPERTY2_INDEX],\r\n                primaryWeaponTrait: state.traits[Constants.PRIMARY_TRAIT_INDEX],\r\n                secondaryWeaponId: state.secondaryWeaponId,\r\n                secondaryWeaponProperty1: state.properties[Constants.SECONDARY_PROPERTY1_INDEX],\r\n                secondaryWeaponProperty2: state.properties[Constants.SECONDARY_PROPERTY2_INDEX],\r\n                secondaryWeaponTrait: state.traits[Constants.SECONDARY_TRAIT_INDEX],\r\n                necklaceProperty1: state.properties[Constants.NECKLACE_PROPERTY1_INDEX],\r\n                necklaceProperty2: state.properties[Constants.NECKLACE_PROPERTY2_INDEX],\r\n                necklaceTrait: state.traits[Constants.NECKLACE_TRAIT_INDEX],\r\n                charmProperty1: state.properties[Constants.CHARM_PROPERTY1_INDEX],\r\n                charmProperty2: state.properties[Constants.CHARM_PROPERTY2_INDEX],\r\n                charmTrait: state.traits[Constants.CHARM_TRAIT_INDEX],\r\n                trinketProperty1: state.properties[Constants.TRINKET_PROPERTY1_INDEX],\r\n                trinketProperty2: state.properties[Constants.TRINKET_PROPERTY2_INDEX],\r\n                trinketTrait: state.traits[Constants.TRINKET_TRAIT_INDEX], */\r\n                talent1: state.talents[Constants.TALENT_TIER_1],\r\n                talent2: state.talents[Constants.TALENT_TIER_2],\r\n                talent3: state.talents[Constants.TALENT_TIER_3],\r\n                talent4: state.talents[Constants.TALENT_TIER_4],\r\n                talent5: state.talents[Constants.TALENT_TIER_5],\r\n                talent6: state.talents[Constants.TALENT_TIER_6],\r\n                name: state.name,\r\n                description: state.description,\r\n                difficulties: state.difficulties.map((item) => { return item.id }),\r\n                missions: state.missions.map((item) => { return item.id }),\r\n                potions: state.potions.map((item) => { return item.id }),\r\n                roles: state.roles.map((item) => { return item.id }),\r\n                books: state.books.map((item) => { return item.id }),\r\n                dateModified: new Date(),\r\n                //userId: auth.currentUser.uid,\r\n                //username: auth.currentUser.displayName,\r\n                //TODO - ensure that username is updated for each build when user edits their username\r\n                videos: state.videos,\r\n                isDeleted: false\r\n            }, {merge: true}).then(() => {\r\n                console.log(\"Document updated with ID: \", state.buildId);\r\n                \r\n                updateState({\r\n                    type: \"UPDATE_DIRTY\", \r\n                    payload: false\r\n                });\r\n\r\n                var buildSaveIndicator = document.getElementById('buildSaveIndicator');\r\n                buildSaveIndicator.classList.add('saved');\r\n                setTimeout(() => { buildSaveIndicator.classList.remove('saved'); }, 4000);\r\n\r\n            }).catch((error) => {\r\n                console.error(\"Error updating document: \", error);\r\n            });\r\n        }\r\n\r\n        //get build id param\r\n        //if empty, load nothing from DB\r\n        //if not empty, load build from DB and updatestate\r\n\r\n        //saving builds with /create/ url saves new db item and redirects to /buildId/edit page\r\n        //saving builds with /edit/ url just updates the record in the db\r\n\r\n        if (!state.isFromDb && !state.createBuild) {\r\n            return (\r\n                <div className=\"edit-build-page\" data-readonly={state.readonly} data-dirty={state.dirty}>\r\n                    <p>No build found</p>\r\n                </div>);\r\n        }\r\n\r\n        if (!auth.currentUser) {\r\n            return (\r\n                <div className=\"edit-build-page\" data-readonly={state.readonly} data-dirty={state.dirty}>\r\n                    <p>You must be logged in to edit builds</p>\r\n                </div>);\r\n        }\r\n\r\n        if (!state.createBuild && state.userId !== auth.currentUser.uid) {\r\n            return (\r\n                <div className=\"edit-build-page\" data-readonly={state.readonly} data-dirty={state.dirty}>\r\n                    <p>Cannot edit build that you didn't create</p>\r\n                </div>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"edit-build-page build-page\" data-liked={state.isLiked} data-readonly={state.readonly} data-dirty={state.dirty} data-fresh={state.createBuild}>\r\n                <span id=\"buildSaveIndicator\" className=\"border-03 background-18\">Build saved...</span>\r\n                <div className=\"build-left-container\">\r\n                    <div className=\"build-buttons-container\">\r\n                        <span id=\"saveBuildButton\" className=\"button-01 border-04\" onClick={saveBuildClick.bind(this)}>Save Build</span>\r\n                    </div>                    \r\n                    <HeroSelect careerId={state.careerId}></HeroSelect>\r\n                </div>\r\n                <div className=\"build-main-container\">\r\n                    <Tabs>\r\n                        <TabList>\r\n                            <Tab>Summary</Tab>\r\n                            <Tab>Videos</Tab>\r\n                            <Tab>Combos</Tab>                        \r\n                        </TabList>\r\n                        <TabPanel className=\"build-summary-tab\">\r\n                            <div className=\"build-details-container\">\r\n                                <HeroDetails careerId={state.careerId}></HeroDetails>\r\n                                <input type=\"text\" className=\"build-name-input border-02 background-18\" placeholder=\"Name your build\" value={state.name} onChange={handleNameChange.bind(this)}></input>\r\n                                <textarea className=\"input-build-description border-02 background-18\" wrap=\"hard\" placeholder=\"Describe your build\" value={state.description} onChange={handleDescriptionChanged.bind(this)}></textarea>\r\n                                <BuildInformation></BuildInformation>\r\n                                <BuildOptions></BuildOptions>\r\n                            </div>\r\n                            <BuildSummary></BuildSummary>\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                            <div className=\"build-additional-info\">\r\n                            </div>\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                            <div className=\"hero-abilities\">\r\n                            </div>                        \r\n                        </TabPanel>\r\n                    </Tabs>\r\n                    <div className=\"build-talents-container\">\r\n                        <HeroTalents contextActionType=\"UPDATE_TALENTS\" careerId={state.careerId} talents={state.talents}></HeroTalents>\r\n                    </div>\r\n                </div>\r\n                <div className=\"build-right-container\">\r\n                    <Inventory></Inventory>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default EditBuildPage;"]},"metadata":{},"sourceType":"module"}