{"ast":null,"code":"import _slicedToArray from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\dev\\\\New folder\\\\rg\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import{Link}from\"react-router-dom\";import{AppContext}from\"../../stores/Store\";import{auth,db}from\"../../utils/Firebase\";var BuildInformation=/*#__PURE__*/function(_Component){_inherits(BuildInformation,_Component);var _super=_createSuper(BuildInformation);function BuildInformation(props){_classCallCheck(this,BuildInformation);return _super.call(this,props);}_createClass(BuildInformation,[{key:\"handleLikeBuild\",value:function handleLikeBuild(){var _this$context=_slicedToArray(this.context,2),state=_this$context[0],updateState=_this$context[1];if(!auth.currentUser){console.log('Login to like a build.');return;}db.collection('builds').doc(state.buildId).get().then(function(build){console.log('liking build');if(!build.exists){return;}if(!build.data().likes.includes(auth.currentUser.uid)){var likesList=build.data().likes;likesList.push(auth.currentUser.uid);build.ref.update({likes:likesList}).then(function(){console.log('Successfully liked build');updateState({type:\"UPDATE_LIKE_STATE\",payload:{isLiked:true,likes:likesList}});}).catch(function(error){console.error('Error liking build:',error);});}});/* db.collection('buildLikes').where('userId', '==', auth.currentUser.uid).where('buildId', '==', state.buildId).get().then((querySnapshot) => {\r\n            if (querySnapshot.size > 0) {\r\n                console.log('Build like data found');\r\n                console.log(querySnapshot.docs[0].data());\r\n                var buildLikesDoc = querySnapshot.docs[0];\r\n                buildLikesDoc.ref.update({\r\n                    likes: true\r\n                }).then(() => {\r\n                    console.log('Successfully liked build'); \r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: true\r\n                    });\r\n                }).catch((error) => { \r\n                    console.error('Error liking build:', error); \r\n                });\r\n            } else {\r\n                db.collection('buildLikes').add({\r\n                    userId: auth.currentUser.uid,\r\n                    buildId: state.buildId,\r\n                    likes: true\r\n                }).then((buildLikeRef) => {\r\n                    console.log('Successfully liked build');\r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: true\r\n                    });\r\n                }).catch((error) => {\r\n                    console.error('Error liking build:', error);\r\n                })\r\n            }\r\n        }).catch((error) => {\r\n            console.error('Error getting data from BuildLikes table:', error);\r\n        }); */}},{key:\"handleUnlikeBuild\",value:function handleUnlikeBuild(){var _this$context2=_slicedToArray(this.context,2),state=_this$context2[0],updateState=_this$context2[1];if(!auth.currentUser){console.log('Login to like a build.');return;}db.collection('builds').doc(state.buildId).get().then(function(build){if(!build.exists){return;}if(build.data().likes.includes(auth.currentUser.uid)){var likesList=build.data().likes;likesList.pop(auth.currentUser.uid);build.ref.update({likes:likesList}).then(function(){console.log('Successfully unliked build');updateState({type:\"UPDATE_LIKE_STATE\",payload:{isLiked:false,likes:likesList}});}).catch(function(error){console.error('Error liking build:',error);});}});/* db.collection('buildLikes').where('userId', '==', auth.currentUser.uid).where('buildId', '==', state.buildId).get().then((querySnapshot) => {\r\n            if (querySnapshot.size > 0) {\r\n                console.log('Build like data found');\r\n                console.log(querySnapshot.docs[0].data());\r\n                var buildLikesDoc = querySnapshot.docs[0];\r\n                buildLikesDoc.ref.update({\r\n                    likes: false\r\n                }).then(() => {\r\n                    console.log('Successfully unliked build'); \r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: false\r\n                    });\r\n                }).catch((error) => { \r\n                    console.error('Error liking build:', error); \r\n                });\r\n            }\r\n        }).catch((error) => {\r\n            console.error('Error getting data from BuildLikes table:', error);\r\n        }); */}},{key:\"render\",value:function render(){var _this$context3=_slicedToArray(this.context,2),state=_this$context3[0],updateState=_this$context3[1];/*         db.collection('buildLikes').where('buildId', '==', state.buildId).where('likes', '==', true).get().then((querySnapshot) => {\r\n            if (querySnapshot.size >= 0) {\r\n                if (querySnapshot.size !== state.likes) {\r\n                    updateState({\r\n                        type: \"UPDATE_LIKES\", \r\n                        payload: querySnapshot.size\r\n                    });\r\n                }\r\n            }\r\n        }); */auth.onAuthStateChanged(function(user){if(user!==null){var userLikesBuild=state.likes.includes(user.uid);if(state.isLiked!==userLikesBuild){updateState({type:\"UPDATE_LIKE_STATE\",payload:{isLiked:userLikesBuild,likes:state.likes}});}}});return/*#__PURE__*/React.createElement(\"div\",{className:\"build-information-container read-only-container border-02 background-18\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"span\",null,\"Created by\"),/*#__PURE__*/React.createElement(Link,{to:'/user/'+state.userId+'/view'},state.username)),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"span\",null,\"Patch\"),/*#__PURE__*/React.createElement(\"span\",null,state.patch)),/*#__PURE__*/React.createElement(\"div\",{class:\"build-like-container\"},/*#__PURE__*/React.createElement(\"span\",null,state.likes.length),/*#__PURE__*/React.createElement(\"i\",{class:\"material-icons like-icon\",onClick:this.handleLikeBuild.bind(this)},\"star_border\"),/*#__PURE__*/React.createElement(\"i\",{class:\"material-icons unlike-icon\",onClick:this.handleUnlikeBuild.bind(this)},\"star\")));}}]);return BuildInformation;}(Component);BuildInformation.contextType=AppContext;export default BuildInformation;","map":{"version":3,"sources":["C:/dev/New folder/rg/src/components/buildPage/BuildInformation.js"],"names":["React","Component","Link","AppContext","auth","db","BuildInformation","props","context","state","updateState","currentUser","console","log","collection","doc","buildId","get","then","build","exists","data","likes","includes","uid","likesList","push","ref","update","type","payload","isLiked","catch","error","pop","onAuthStateChanged","user","userLikesBuild","userId","username","patch","length","handleLikeBuild","bind","handleUnlikeBuild","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppContext } from \"../../stores/Store\";\r\nimport { auth, db } from \"../../utils/Firebase\";\r\n\r\nclass BuildInformation extends Component {\r\n    static contextType = AppContext;\r\n    \r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n\r\n    handleLikeBuild() {\r\n        const [state, updateState] = this.context;\r\n\r\n        if (!auth.currentUser) {\r\n            console.log('Login to like a build.');\r\n            return;\r\n        }\r\n\r\n        db.collection('builds').doc(state.buildId).get().then((build) => {\r\n            console.log('liking build');\r\n            if (!build.exists) {\r\n                return;\r\n            }\r\n\r\n            if (!build.data().likes.includes(auth.currentUser.uid)) {\r\n                var likesList = build.data().likes;\r\n                likesList.push(auth.currentUser.uid)\r\n                build.ref.update({\r\n                    likes: likesList\r\n                }).then(() => {\r\n                    console.log('Successfully liked build'); \r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: {\r\n                            isLiked: true,\r\n                            likes: likesList\r\n                        }\r\n                    });\r\n                }).catch((error) => { \r\n                    console.error('Error liking build:', error); \r\n                });\r\n            }\r\n        });\r\n\r\n        /* db.collection('buildLikes').where('userId', '==', auth.currentUser.uid).where('buildId', '==', state.buildId).get().then((querySnapshot) => {\r\n            if (querySnapshot.size > 0) {\r\n                console.log('Build like data found');\r\n                console.log(querySnapshot.docs[0].data());\r\n                var buildLikesDoc = querySnapshot.docs[0];\r\n                buildLikesDoc.ref.update({\r\n                    likes: true\r\n                }).then(() => {\r\n                    console.log('Successfully liked build'); \r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: true\r\n                    });\r\n                }).catch((error) => { \r\n                    console.error('Error liking build:', error); \r\n                });\r\n            } else {\r\n                db.collection('buildLikes').add({\r\n                    userId: auth.currentUser.uid,\r\n                    buildId: state.buildId,\r\n                    likes: true\r\n                }).then((buildLikeRef) => {\r\n                    console.log('Successfully liked build');\r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: true\r\n                    });\r\n                }).catch((error) => {\r\n                    console.error('Error liking build:', error);\r\n                })\r\n            }\r\n        }).catch((error) => {\r\n            console.error('Error getting data from BuildLikes table:', error);\r\n        }); */\r\n    }\r\n\r\n    handleUnlikeBuild() {\r\n        const [state, updateState] = this.context;\r\n\r\n        if (!auth.currentUser) {\r\n            console.log('Login to like a build.');\r\n            return;\r\n        }\r\n        \r\n        db.collection('builds').doc(state.buildId).get().then((build) => {\r\n            if (!build.exists) {\r\n                return;\r\n            }\r\n\r\n            if (build.data().likes.includes(auth.currentUser.uid)) {\r\n                var likesList = build.data().likes;\r\n                likesList.pop(auth.currentUser.uid)\r\n                build.ref.update({\r\n                    likes: likesList\r\n                }).then(() => {\r\n                    console.log('Successfully unliked build'); \r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: {\r\n                            isLiked: false,\r\n                            likes: likesList\r\n                        }\r\n                    });\r\n                }).catch((error) => { \r\n                    console.error('Error liking build:', error); \r\n                });\r\n            }\r\n        });\r\n\r\n        /* db.collection('buildLikes').where('userId', '==', auth.currentUser.uid).where('buildId', '==', state.buildId).get().then((querySnapshot) => {\r\n            if (querySnapshot.size > 0) {\r\n                console.log('Build like data found');\r\n                console.log(querySnapshot.docs[0].data());\r\n                var buildLikesDoc = querySnapshot.docs[0];\r\n                buildLikesDoc.ref.update({\r\n                    likes: false\r\n                }).then(() => {\r\n                    console.log('Successfully unliked build'); \r\n\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\", \r\n                        payload: false\r\n                    });\r\n                }).catch((error) => { \r\n                    console.error('Error liking build:', error); \r\n                });\r\n            }\r\n        }).catch((error) => {\r\n            console.error('Error getting data from BuildLikes table:', error);\r\n        }); */\r\n    }\r\n\r\n    render() {\r\n        const [state, updateState] = this.context;\r\n\r\n/*         db.collection('buildLikes').where('buildId', '==', state.buildId).where('likes', '==', true).get().then((querySnapshot) => {\r\n            if (querySnapshot.size >= 0) {\r\n                if (querySnapshot.size !== state.likes) {\r\n                    updateState({\r\n                        type: \"UPDATE_LIKES\", \r\n                        payload: querySnapshot.size\r\n                    });\r\n                }\r\n            }\r\n        }); */\r\n\r\n        auth.onAuthStateChanged((user) => {\r\n            if (user !== null) {\r\n                var userLikesBuild = state.likes.includes(user.uid);\r\n  \r\n                if (state.isLiked !== userLikesBuild) {\r\n                    updateState({\r\n                        type: \"UPDATE_LIKE_STATE\",\r\n                        payload: {\r\n                            isLiked: userLikesBuild,\r\n                            likes: state.likes\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n  \r\n        });\r\n\r\n        return (<div className=\"build-information-container read-only-container border-02 background-18\">\r\n                    <div><span>Created by</span><Link to={'/user/' + state.userId + '/view'}>{state.username}</Link></div>\r\n                    <div><span>Patch</span><span>{state.patch}</span></div>\r\n                    <div class=\"build-like-container\">\r\n                        <span>{state.likes.length}</span>\r\n                        <i class=\"material-icons like-icon\" onClick={this.handleLikeBuild.bind(this)}>star_border</i>\r\n                        <i class=\"material-icons unlike-icon\" onClick={this.handleUnlikeBuild.bind(this)}>star</i>\r\n                    </div>\r\n                </div>);\r\n    }\r\n}\r\n\r\nexport default BuildInformation;"]},"metadata":{},"sourceType":"module"}