{"ast":null,"code":"var inherits = require('inherits');\n\nvar IndexCore = require('./IndexCore.js');\n\nvar deprecate = require('./deprecate.js');\n\nvar deprecatedMessage = require('./deprecatedMessage.js');\n\nvar exitPromise = require('./exitPromise.js');\n\nvar errors = require('./errors');\n\nvar deprecateForwardToSlaves = deprecate(function () {}, deprecatedMessage('forwardToSlaves', 'forwardToReplicas'));\nmodule.exports = Index;\n\nfunction Index() {\n  IndexCore.apply(this, arguments);\n}\n\ninherits(Index, IndexCore);\n/*\r\n* Add an object in this index\r\n*\r\n* @param content contains the javascript object to add inside the index\r\n* @param objectID (optional) an objectID you want to attribute to this object\r\n* (if the attribute already exist the old object will be overwrite)\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID\r\n*/\n\nIndex.prototype.addObject = function (content, objectID, callback) {\n  var indexObj = this;\n\n  if (arguments.length === 1 || typeof objectID === 'function') {\n    callback = objectID;\n    objectID = undefined;\n  }\n\n  return this.as._jsonRequest({\n    method: objectID !== undefined ? 'PUT' : // update or create\n    'POST',\n    // create (API generates an objectID)\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + ( // create\n    objectID !== undefined ? '/' + encodeURIComponent(objectID) : ''),\n    // update or create\n    body: content,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/*\r\n* Add several objects\r\n*\r\n* @param objects contains an array of objects to add\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that updateAt and taskID\r\n*/\n\n\nIndex.prototype.addObjects = function (objects, callback) {\n  var isArray = require('isarray');\n\n  var usage = 'Usage: index.addObjects(arrayOfObjects[, callback])';\n\n  if (!isArray(objects)) {\n    throw new Error(usage);\n  }\n\n  var indexObj = this;\n  var postObj = {\n    requests: []\n  };\n\n  for (var i = 0; i < objects.length; ++i) {\n    var request = {\n      action: 'addObject',\n      body: objects[i]\n    };\n    postObj.requests.push(request);\n  }\n\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',\n    body: postObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/*\r\n* Update partially an object (only update attributes passed in argument)\r\n*\r\n* @param partialObject contains the javascript attributes to override, the\r\n*  object must contains an objectID attribute\r\n* @param createIfNotExists (optional) if false, avoid an automatic creation of the object\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID\r\n*/\n\n\nIndex.prototype.partialUpdateObject = function (partialObject, createIfNotExists, callback) {\n  if (arguments.length === 1 || typeof createIfNotExists === 'function') {\n    callback = createIfNotExists;\n    createIfNotExists = undefined;\n  }\n\n  var indexObj = this;\n  var url = '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(partialObject.objectID) + '/partial';\n\n  if (createIfNotExists === false) {\n    url += '?createIfNotExists=false';\n  }\n\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: url,\n    body: partialObject,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/*\r\n* Partially Override the content of several objects\r\n*\r\n* @param objects contains an array of objects to update (each object must contains a objectID attribute)\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that updateAt and taskID\r\n*/\n\n\nIndex.prototype.partialUpdateObjects = function (objects, createIfNotExists, callback) {\n  if (arguments.length === 1 || typeof createIfNotExists === 'function') {\n    callback = createIfNotExists;\n    createIfNotExists = true;\n  }\n\n  var isArray = require('isarray');\n\n  var usage = 'Usage: index.partialUpdateObjects(arrayOfObjects[, callback])';\n\n  if (!isArray(objects)) {\n    throw new Error(usage);\n  }\n\n  var indexObj = this;\n  var postObj = {\n    requests: []\n  };\n\n  for (var i = 0; i < objects.length; ++i) {\n    var request = {\n      action: createIfNotExists === true ? 'partialUpdateObject' : 'partialUpdateObjectNoCreate',\n      objectID: objects[i].objectID,\n      body: objects[i]\n    };\n    postObj.requests.push(request);\n  }\n\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',\n    body: postObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/*\r\n* Override the content of object\r\n*\r\n* @param object contains the javascript object to save, the object must contains an objectID attribute\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that updateAt and taskID\r\n*/\n\n\nIndex.prototype.saveObject = function (object, callback) {\n  var indexObj = this;\n  return this.as._jsonRequest({\n    method: 'PUT',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(object.objectID),\n    body: object,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/*\r\n* Override the content of several objects\r\n*\r\n* @param objects contains an array of objects to update (each object must contains a objectID attribute)\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that updateAt and taskID\r\n*/\n\n\nIndex.prototype.saveObjects = function (objects, callback) {\n  var isArray = require('isarray');\n\n  var usage = 'Usage: index.saveObjects(arrayOfObjects[, callback])';\n\n  if (!isArray(objects)) {\n    throw new Error(usage);\n  }\n\n  var indexObj = this;\n  var postObj = {\n    requests: []\n  };\n\n  for (var i = 0; i < objects.length; ++i) {\n    var request = {\n      action: 'updateObject',\n      objectID: objects[i].objectID,\n      body: objects[i]\n    };\n    postObj.requests.push(request);\n  }\n\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',\n    body: postObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/*\r\n* Delete an object from the index\r\n*\r\n* @param objectID the unique identifier of object to delete\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID\r\n*/\n\n\nIndex.prototype.deleteObject = function (objectID, callback) {\n  if (typeof objectID === 'function' || typeof objectID !== 'string' && typeof objectID !== 'number') {\n    var err = new errors.AlgoliaSearchError(objectID && typeof objectID !== 'function' ? 'ObjectID must be a string' : 'Cannot delete an object without an objectID');\n    callback = objectID;\n\n    if (typeof callback === 'function') {\n      return callback(err);\n    }\n\n    return this.as._promise.reject(err);\n  }\n\n  var indexObj = this;\n  return this.as._jsonRequest({\n    method: 'DELETE',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(objectID),\n    hostType: 'write',\n    callback: callback\n  });\n};\n/*\r\n* Delete several objects from an index\r\n*\r\n* @param objectIDs contains an array of objectID to delete\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID\r\n*/\n\n\nIndex.prototype.deleteObjects = function (objectIDs, callback) {\n  var isArray = require('isarray');\n\n  var map = require('./map.js');\n\n  var usage = 'Usage: index.deleteObjects(arrayOfObjectIDs[, callback])';\n\n  if (!isArray(objectIDs)) {\n    throw new Error(usage);\n  }\n\n  var indexObj = this;\n  var postObj = {\n    requests: map(objectIDs, function prepareRequest(objectID) {\n      return {\n        action: 'deleteObject',\n        objectID: objectID,\n        body: {\n          objectID: objectID\n        }\n      };\n    })\n  };\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',\n    body: postObj,\n    hostType: 'write',\n    callback: callback\n  });\n};\n/*\r\n* Delete all objects matching a query\r\n*\r\n* @param query the query string\r\n* @param params the optional query parameters\r\n* @param callback (optional) the result callback called with one argument\r\n*  error: null or Error('message')\r\n* @deprecated see index.deleteBy\r\n*/\n\n\nIndex.prototype.deleteByQuery = deprecate(function (query, params, callback) {\n  var clone = require('./clone.js');\n\n  var map = require('./map.js');\n\n  var indexObj = this;\n  var client = indexObj.as;\n\n  if (arguments.length === 1 || typeof params === 'function') {\n    callback = params;\n    params = {};\n  } else {\n    params = clone(params);\n  }\n\n  params.attributesToRetrieve = 'objectID';\n  params.hitsPerPage = 1000;\n  params.distinct = false; // when deleting, we should never use cache to get the\n  // search results\n\n  this.clearCache(); // there's a problem in how we use the promise chain,\n  // see how waitTask is done\n\n  var promise = this.search(query, params).then(stopOrDelete);\n\n  function stopOrDelete(searchContent) {\n    // stop here\n    if (searchContent.nbHits === 0) {\n      // return indexObj.as._request.resolve();\n      return searchContent;\n    } // continue and do a recursive call\n\n\n    var objectIDs = map(searchContent.hits, function getObjectID(object) {\n      return object.objectID;\n    });\n    return indexObj.deleteObjects(objectIDs).then(waitTask).then(doDeleteByQuery);\n  }\n\n  function waitTask(deleteObjectsContent) {\n    return indexObj.waitTask(deleteObjectsContent.taskID);\n  }\n\n  function doDeleteByQuery() {\n    return indexObj.deleteByQuery(query, params);\n  }\n\n  if (!callback) {\n    return promise;\n  }\n\n  promise.then(success, failure);\n\n  function success() {\n    exitPromise(function exit() {\n      callback(null);\n    }, client._setTimeout || setTimeout);\n  }\n\n  function failure(err) {\n    exitPromise(function exit() {\n      callback(err);\n    }, client._setTimeout || setTimeout);\n  }\n}, deprecatedMessage('index.deleteByQuery()', 'index.deleteBy()'));\n/**\r\n* Delete all objects matching a query\r\n*\r\n* the query parameters that can be used are:\r\n* - filters (numeric, facet, tag)\r\n* - geo\r\n*\r\n* you can not send an empty query or filters\r\n*\r\n* @param params the optional query parameters\r\n* @param callback (optional) the result callback called with one argument\r\n*  error: null or Error('message')\r\n*/\n\nIndex.prototype.deleteBy = function (params, callback) {\n  var indexObj = this;\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/deleteByQuery',\n    body: {\n      params: indexObj.as._getSearchParams(params, '')\n    },\n    hostType: 'write',\n    callback: callback\n  });\n};\n/*\r\n* Browse all content from an index using events. Basically this will do\r\n* .browse() -> .browseFrom -> .browseFrom -> .. until all the results are returned\r\n*\r\n* @param {string} query - The full text query\r\n* @param {Object} [queryParameters] - Any search query parameter\r\n* @return {EventEmitter}\r\n* @example\r\n* var browser = index.browseAll('cool songs', {\r\n*   tagFilters: 'public,comments',\r\n*   hitsPerPage: 500\r\n* });\r\n*\r\n* browser.on('result', function resultCallback(content) {\r\n*   console.log(content.hits);\r\n* });\r\n*\r\n* // if any error occurs, you get it\r\n* browser.on('error', function(err) {\r\n*   throw err;\r\n* });\r\n*\r\n* // when you have browsed the whole index, you get this event\r\n* browser.on('end', function() {\r\n*   console.log('finished');\r\n* });\r\n*\r\n* // at any point if you want to stop the browsing process, you can stop it manually\r\n* // otherwise it will go on and on\r\n* browser.stop();\r\n*\r\n* @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}\r\n*/\n\n\nIndex.prototype.browseAll = function (query, queryParameters) {\n  if (typeof query === 'object') {\n    queryParameters = query;\n    query = undefined;\n  }\n\n  var merge = require('./merge.js');\n\n  var IndexBrowser = require('./IndexBrowser');\n\n  var browser = new IndexBrowser();\n  var client = this.as;\n  var index = this;\n\n  var params = client._getSearchParams(merge({}, queryParameters || {}, {\n    query: query\n  }), ''); // start browsing\n\n\n  browseLoop();\n\n  function browseLoop(cursor) {\n    if (browser._stopped) {\n      return;\n    }\n\n    var body;\n\n    if (cursor !== undefined) {\n      body = {\n        cursor: cursor\n      };\n    } else {\n      body = {\n        params: params\n      };\n    }\n\n    client._jsonRequest({\n      method: 'POST',\n      url: '/1/indexes/' + encodeURIComponent(index.indexName) + '/browse',\n      hostType: 'read',\n      body: body,\n      callback: browseCallback\n    });\n  }\n\n  function browseCallback(err, content) {\n    if (browser._stopped) {\n      return;\n    }\n\n    if (err) {\n      browser._error(err);\n\n      return;\n    }\n\n    browser._result(content); // no cursor means we are finished browsing\n\n\n    if (content.cursor === undefined) {\n      browser._end();\n\n      return;\n    }\n\n    browseLoop(content.cursor);\n  }\n\n  return browser;\n};\n/*\r\n* Get a Typeahead.js adapter\r\n* @param searchParams contains an object with query parameters (see search for details)\r\n*/\n\n\nIndex.prototype.ttAdapter = deprecate(function (params) {\n  var self = this;\n  return function ttAdapter(query, syncCb, asyncCb) {\n    var cb;\n\n    if (typeof asyncCb === 'function') {\n      // typeahead 0.11\n      cb = asyncCb;\n    } else {\n      // pre typeahead 0.11\n      cb = syncCb;\n    }\n\n    self.search(query, params, function searchDone(err, content) {\n      if (err) {\n        cb(err);\n        return;\n      }\n\n      cb(content.hits);\n    });\n  };\n}, 'ttAdapter is not necessary anymore and will be removed in the next version,\\n' + 'have a look at autocomplete.js (https://github.com/algolia/autocomplete.js)');\n/*\r\n* Wait the publication of a task on the server.\r\n* All server task are asynchronous and you can check with this method that the task is published.\r\n*\r\n* @param taskID the id of the task returned by server\r\n* @param callback the result callback with with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that contains the list of results\r\n*/\n\nIndex.prototype.waitTask = function (taskID, callback) {\n  // wait minimum 100ms before retrying\n  var baseDelay = 100; // wait maximum 5s before retrying\n\n  var maxDelay = 5000;\n  var loop = 0; // waitTask() must be handled differently from other methods,\n  // it's a recursive method using a timeout\n\n  var indexObj = this;\n  var client = indexObj.as;\n  var promise = retryLoop();\n\n  function retryLoop() {\n    return client._jsonRequest({\n      method: 'GET',\n      hostType: 'read',\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/task/' + taskID\n    }).then(function success(content) {\n      loop++;\n      var delay = baseDelay * loop * loop;\n\n      if (delay > maxDelay) {\n        delay = maxDelay;\n      }\n\n      if (content.status !== 'published') {\n        return client._promise.delay(delay).then(retryLoop);\n      }\n\n      return content;\n    });\n  }\n\n  if (!callback) {\n    return promise;\n  }\n\n  promise.then(successCb, failureCb);\n\n  function successCb(content) {\n    exitPromise(function exit() {\n      callback(null, content);\n    }, client._setTimeout || setTimeout);\n  }\n\n  function failureCb(err) {\n    exitPromise(function exit() {\n      callback(err);\n    }, client._setTimeout || setTimeout);\n  }\n};\n/*\r\n* This function deletes the index content. Settings and index specific API keys are kept untouched.\r\n*\r\n* @param callback (optional) the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the settings object or the error message if a failure occurred\r\n*/\n\n\nIndex.prototype.clearIndex = function (callback) {\n  var indexObj = this;\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/clear',\n    hostType: 'write',\n    callback: callback\n  });\n};\n/*\r\n* Get settings of this index\r\n*\r\n* @param opts an object of options to add\r\n* @param opts.advanced get more settings like nbShards (useful for Enterprise)\r\n* @param callback (optional) the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the settings object or the error message if a failure occurred\r\n*/\n\n\nIndex.prototype.getSettings = function (opts, callback) {\n  if (arguments.length === 1 && typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var indexName = encodeURIComponent(this.indexName);\n  return this.as._jsonRequest({\n    method: 'GET',\n    url: '/1/indexes/' + indexName + '/settings?getVersion=2' + (opts.advanced ? '&advanced=' + opts.advanced : ''),\n    hostType: 'read',\n    callback: callback\n  });\n};\n\nIndex.prototype.searchSynonyms = function (params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  } else if (params === undefined) {\n    params = {};\n  }\n\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/search',\n    body: params,\n    hostType: 'read',\n    callback: callback\n  });\n};\n\nfunction exportData(method, _hitsPerPage, callback) {\n  function search(page, _previous) {\n    var options = {\n      page: page || 0,\n      hitsPerPage: _hitsPerPage || 100\n    };\n    var previous = _previous || [];\n    return method(options).then(function (result) {\n      var hits = result.hits;\n      var nbHits = result.nbHits;\n      var current = hits.map(function (s) {\n        delete s._highlightResult;\n        return s;\n      });\n      var synonyms = previous.concat(current);\n\n      if (synonyms.length < nbHits) {\n        return search(options.page + 1, synonyms);\n      }\n\n      return synonyms;\n    });\n  }\n\n  return search().then(function (data) {\n    if (typeof callback === 'function') {\n      callback(data);\n      return undefined;\n    }\n\n    return data;\n  });\n}\n/**\r\n * Retrieve all the synonyms in an index\r\n * @param [number=100] hitsPerPage The amount of synonyms to retrieve per batch\r\n * @param [function] callback will be called after all synonyms are retrieved\r\n */\n\n\nIndex.prototype.exportSynonyms = function (hitsPerPage, callback) {\n  return exportData(this.searchSynonyms.bind(this), hitsPerPage, callback);\n};\n\nIndex.prototype.saveSynonym = function (synonym, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (opts === undefined) {\n    opts = {};\n  }\n\n  if (opts.forwardToSlaves !== undefined) deprecateForwardToSlaves();\n  var forwardToReplicas = opts.forwardToSlaves || opts.forwardToReplicas ? 'true' : 'false';\n  return this.as._jsonRequest({\n    method: 'PUT',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/' + encodeURIComponent(synonym.objectID) + '?forwardToReplicas=' + forwardToReplicas,\n    body: synonym,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\nIndex.prototype.getSynonym = function (objectID, callback) {\n  return this.as._jsonRequest({\n    method: 'GET',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/' + encodeURIComponent(objectID),\n    hostType: 'read',\n    callback: callback\n  });\n};\n\nIndex.prototype.deleteSynonym = function (objectID, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (opts === undefined) {\n    opts = {};\n  }\n\n  if (opts.forwardToSlaves !== undefined) deprecateForwardToSlaves();\n  var forwardToReplicas = opts.forwardToSlaves || opts.forwardToReplicas ? 'true' : 'false';\n  return this.as._jsonRequest({\n    method: 'DELETE',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/' + encodeURIComponent(objectID) + '?forwardToReplicas=' + forwardToReplicas,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\nIndex.prototype.clearSynonyms = function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (opts === undefined) {\n    opts = {};\n  }\n\n  if (opts.forwardToSlaves !== undefined) deprecateForwardToSlaves();\n  var forwardToReplicas = opts.forwardToSlaves || opts.forwardToReplicas ? 'true' : 'false';\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/clear' + '?forwardToReplicas=' + forwardToReplicas,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\nIndex.prototype.batchSynonyms = function (synonyms, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (opts === undefined) {\n    opts = {};\n  }\n\n  if (opts.forwardToSlaves !== undefined) deprecateForwardToSlaves();\n  var forwardToReplicas = opts.forwardToSlaves || opts.forwardToReplicas ? 'true' : 'false';\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/batch' + '?forwardToReplicas=' + forwardToReplicas + '&replaceExistingSynonyms=' + (opts.replaceExistingSynonyms ? 'true' : 'false'),\n    hostType: 'write',\n    body: synonyms,\n    callback: callback\n  });\n};\n\nIndex.prototype.searchRules = function (params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  } else if (params === undefined) {\n    params = {};\n  }\n\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/search',\n    body: params,\n    hostType: 'read',\n    callback: callback\n  });\n};\n/**\r\n * Retrieve all the query rules in an index\r\n * @param [number=100] hitsPerPage The amount of query rules to retrieve per batch\r\n * @param [function] callback will be called after all query rules are retrieved\r\n *  error: null or Error('message')\r\n */\n\n\nIndex.prototype.exportRules = function (hitsPerPage, callback) {\n  return exportData(this.searchRules.bind(this), hitsPerPage, callback);\n};\n\nIndex.prototype.saveRule = function (rule, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (opts === undefined) {\n    opts = {};\n  }\n\n  if (!rule.objectID) {\n    throw new errors.AlgoliaSearchError('Missing or empty objectID field for rule');\n  }\n\n  var forwardToReplicas = opts.forwardToReplicas === true ? 'true' : 'false';\n  return this.as._jsonRequest({\n    method: 'PUT',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/' + encodeURIComponent(rule.objectID) + '?forwardToReplicas=' + forwardToReplicas,\n    body: rule,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\nIndex.prototype.getRule = function (objectID, callback) {\n  return this.as._jsonRequest({\n    method: 'GET',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/' + encodeURIComponent(objectID),\n    hostType: 'read',\n    callback: callback\n  });\n};\n\nIndex.prototype.deleteRule = function (objectID, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (opts === undefined) {\n    opts = {};\n  }\n\n  var forwardToReplicas = opts.forwardToReplicas === true ? 'true' : 'false';\n  return this.as._jsonRequest({\n    method: 'DELETE',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/' + encodeURIComponent(objectID) + '?forwardToReplicas=' + forwardToReplicas,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\nIndex.prototype.clearRules = function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (opts === undefined) {\n    opts = {};\n  }\n\n  var forwardToReplicas = opts.forwardToReplicas === true ? 'true' : 'false';\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/clear' + '?forwardToReplicas=' + forwardToReplicas,\n    hostType: 'write',\n    callback: callback\n  });\n};\n\nIndex.prototype.batchRules = function (rules, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (opts === undefined) {\n    opts = {};\n  }\n\n  var forwardToReplicas = opts.forwardToReplicas === true ? 'true' : 'false';\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/batch' + '?forwardToReplicas=' + forwardToReplicas + '&clearExistingRules=' + (opts.clearExistingRules === true ? 'true' : 'false'),\n    hostType: 'write',\n    body: rules,\n    callback: callback\n  });\n};\n\nIndex.prototype.exists = function (callback) {\n  var result = this.getSettings().then(function () {\n    return true;\n  }).catch(function (err) {\n    if (err instanceof errors.AlgoliaSearchError && err.statusCode === 404) {\n      return false;\n    }\n\n    throw err;\n  });\n\n  if (typeof callback !== 'function') {\n    return result;\n  }\n\n  result.then(function (res) {\n    callback(null, res);\n  }).catch(function (err) {\n    callback(err);\n  });\n};\n\nIndex.prototype.findObject = function (findCallback, requestOptions, callback) {\n  requestOptions = requestOptions === undefined ? {} : requestOptions;\n  var paginate = requestOptions.paginate !== undefined ? requestOptions.paginate : true;\n  var query = requestOptions.query !== undefined ? requestOptions.query : '';\n  var that = this;\n  var page = 0;\n\n  var paginateLoop = function paginateLoop() {\n    requestOptions.page = page;\n    return that.search(query, requestOptions).then(function (result) {\n      var hits = result.hits;\n\n      for (var position = 0; position < hits.length; position++) {\n        var hit = hits[position];\n\n        if (findCallback(hit)) {\n          return {\n            object: hit,\n            position: position,\n            page: page\n          };\n        }\n      }\n\n      page += 1; // paginate if option was set and has next page\n\n      if (!paginate || page >= result.nbPages) {\n        throw new errors.ObjectNotFound('Object not found');\n      }\n\n      return paginateLoop();\n    });\n  };\n\n  var promise = paginateLoop(page);\n\n  if (callback === undefined) {\n    return promise;\n  }\n\n  promise.then(function (res) {\n    callback(null, res);\n  }).catch(function (err) {\n    callback(err);\n  });\n};\n\nIndex.prototype.getObjectPosition = function (result, objectID) {\n  var hits = result.hits;\n\n  for (var position = 0; position < hits.length; position++) {\n    if (hits[position].objectID === objectID) {\n      return position;\n    }\n  }\n\n  return -1;\n};\n/*\r\n* Set settings for this index\r\n*\r\n* @param settings the settings object that can contains :\r\n* - minWordSizefor1Typo: (integer) the minimum number of characters to accept one typo (default = 3).\r\n* - minWordSizefor2Typos: (integer) the minimum number of characters to accept two typos (default = 7).\r\n* - hitsPerPage: (integer) the number of hits per page (default = 10).\r\n* - attributesToRetrieve: (array of strings) default list of attributes to retrieve in objects.\r\n*   If set to null, all attributes are retrieved.\r\n* - attributesToHighlight: (array of strings) default list of attributes to highlight.\r\n*   If set to null, all indexed attributes are highlighted.\r\n* - attributesToSnippet**: (array of strings) default list of attributes to snippet alongside the number\r\n* of words to return (syntax is attributeName:nbWords).\r\n*   By default no snippet is computed. If set to null, no snippet is computed.\r\n* - attributesToIndex: (array of strings) the list of fields you want to index.\r\n*   If set to null, all textual and numerical attributes of your objects are indexed,\r\n*   but you should update it to get optimal results.\r\n*   This parameter has two important uses:\r\n*     - Limit the attributes to index: For example if you store a binary image in base64,\r\n*     you want to store it and be able to\r\n*       retrieve it but you don't want to search in the base64 string.\r\n*     - Control part of the ranking*: (see the ranking parameter for full explanation)\r\n*     Matches in attributes at the beginning of\r\n*       the list will be considered more important than matches in attributes further down the list.\r\n*       In one attribute, matching text at the beginning of the attribute will be\r\n*       considered more important than text after, you can disable\r\n*       this behavior if you add your attribute inside `unordered(AttributeName)`,\r\n*       for example attributesToIndex: [\"title\", \"unordered(text)\"].\r\n* - attributesForFaceting: (array of strings) The list of fields you want to use for faceting.\r\n*   All strings in the attribute selected for faceting are extracted and added as a facet.\r\n*   If set to null, no attribute is used for faceting.\r\n* - attributeForDistinct: (string) The attribute name used for the Distinct feature.\r\n* This feature is similar to the SQL \"distinct\" keyword: when enabled\r\n*   in query with the distinct=1 parameter, all hits containing a duplicate\r\n*   value for this attribute are removed from results.\r\n*   For example, if the chosen attribute is show_name and several hits have\r\n*   the same value for show_name, then only the best one is kept and others are removed.\r\n* - ranking: (array of strings) controls the way results are sorted.\r\n*   We have six available criteria:\r\n*    - typo: sort according to number of typos,\r\n*    - geo: sort according to decreassing distance when performing a geo-location based search,\r\n*    - proximity: sort according to the proximity of query words in hits,\r\n*    - attribute: sort according to the order of attributes defined by attributesToIndex,\r\n*    - exact:\r\n*        - if the user query contains one word: sort objects having an attribute\r\n*        that is exactly the query word before others.\r\n*          For example if you search for the \"V\" TV show, you want to find it\r\n*          with the \"V\" query and avoid to have all popular TV\r\n*          show starting by the v letter before it.\r\n*        - if the user query contains multiple words: sort according to the\r\n*        number of words that matched exactly (and not as a prefix).\r\n*    - custom: sort according to a user defined formula set in **customRanking** attribute.\r\n*   The standard order is [\"typo\", \"geo\", \"proximity\", \"attribute\", \"exact\", \"custom\"]\r\n* - customRanking: (array of strings) lets you specify part of the ranking.\r\n*   The syntax of this condition is an array of strings containing attributes\r\n*   prefixed by asc (ascending order) or desc (descending order) operator.\r\n*   For example `\"customRanking\" => [\"desc(population)\", \"asc(name)\"]`\r\n* - queryType: Select how the query words are interpreted, it can be one of the following value:\r\n*   - prefixAll: all query words are interpreted as prefixes,\r\n*   - prefixLast: only the last word is interpreted as a prefix (default behavior),\r\n*   - prefixNone: no query word is interpreted as a prefix. This option is not recommended.\r\n* - highlightPreTag: (string) Specify the string that is inserted before\r\n* the highlighted parts in the query result (default to \"<em>\").\r\n* - highlightPostTag: (string) Specify the string that is inserted after\r\n* the highlighted parts in the query result (default to \"</em>\").\r\n* - optionalWords: (array of strings) Specify a list of words that should\r\n* be considered as optional when found in the query.\r\n* @param callback (optional) the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the server answer or the error message if a failure occurred\r\n*/\n\n\nIndex.prototype.setSettings = function (settings, opts, callback) {\n  if (arguments.length === 1 || typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  if (opts.forwardToSlaves !== undefined) deprecateForwardToSlaves();\n  var forwardToReplicas = opts.forwardToSlaves || opts.forwardToReplicas ? 'true' : 'false';\n  var indexObj = this;\n  return this.as._jsonRequest({\n    method: 'PUT',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/settings?forwardToReplicas=' + forwardToReplicas,\n    hostType: 'write',\n    body: settings,\n    callback: callback\n  });\n};\n/*\r\n* @deprecated see client.listApiKeys()\r\n*/\n\n\nIndex.prototype.listUserKeys = deprecate(function (callback) {\n  return this.listApiKeys(callback);\n}, deprecatedMessage('index.listUserKeys()', 'client.listApiKeys()'));\n/*\r\n* List all existing API keys to this index\r\n*\r\n* @param callback the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the server answer with API keys belonging to the index\r\n*\r\n* @deprecated see client.listApiKeys()\r\n*/\n\nIndex.prototype.listApiKeys = deprecate(function (callback) {\n  var indexObj = this;\n  return this.as._jsonRequest({\n    method: 'GET',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/keys',\n    hostType: 'read',\n    callback: callback\n  });\n}, deprecatedMessage('index.listApiKeys()', 'client.listApiKeys()'));\n/*\r\n* @deprecated see client.getApiKey()\r\n*/\n\nIndex.prototype.getUserKeyACL = deprecate(function (key, callback) {\n  return this.getApiKey(key, callback);\n}, deprecatedMessage('index.getUserKeyACL()', 'client.getApiKey()'));\n/*\r\n* Get an API key from this index\r\n*\r\n* @param key\r\n* @param callback the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the server answer with the right API key\r\n*\r\n* @deprecated see client.getApiKey()\r\n*/\n\nIndex.prototype.getApiKey = deprecate(function (key, callback) {\n  var indexObj = this;\n  return this.as._jsonRequest({\n    method: 'GET',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/keys/' + key,\n    hostType: 'read',\n    callback: callback\n  });\n}, deprecatedMessage('index.getApiKey()', 'client.getApiKey()'));\n/*\r\n* @deprecated see client.deleteApiKey()\r\n*/\n\nIndex.prototype.deleteUserKey = deprecate(function (key, callback) {\n  return this.deleteApiKey(key, callback);\n}, deprecatedMessage('index.deleteUserKey()', 'client.deleteApiKey()'));\n/*\r\n* Delete an existing API key associated to this index\r\n*\r\n* @param key\r\n* @param callback the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the server answer with the deletion date\r\n*\r\n* @deprecated see client.deleteApiKey()\r\n*/\n\nIndex.prototype.deleteApiKey = deprecate(function (key, callback) {\n  var indexObj = this;\n  return this.as._jsonRequest({\n    method: 'DELETE',\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/keys/' + key,\n    hostType: 'write',\n    callback: callback\n  });\n}, deprecatedMessage('index.deleteApiKey()', 'client.deleteApiKey()'));\n/*\r\n* @deprecated see client.addApiKey()\r\n*/\n\nIndex.prototype.addUserKey = deprecate(function (acls, params, callback) {\n  return this.addApiKey(acls, params, callback);\n}, deprecatedMessage('index.addUserKey()', 'client.addApiKey()'));\n/*\r\n* Add a new API key to this index\r\n*\r\n* @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\r\n*   can contains the following values:\r\n*     - search: allow to search (https and http)\r\n*     - addObject: allows to add/update an object in the index (https only)\r\n*     - deleteObject : allows to delete an existing object (https only)\r\n*     - deleteIndex : allows to delete index content (https only)\r\n*     - settings : allows to get index settings (https only)\r\n*     - editSettings : allows to change index settings (https only)\r\n* @param {Object} [params] - Optionnal parameters to set for the key\r\n* @param {number} params.validity - Number of seconds after which the key will\r\n* be automatically removed (0 means no time limit for this key)\r\n* @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\r\n* @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\r\n* @param {string} params.description - A description for your key\r\n* @param {string[]} params.referers - A list of authorized referers\r\n* @param {Object} params.queryParameters - Force the key to use specific query parameters\r\n* @param {Function} callback - The result callback called with two arguments\r\n*   error: null or Error('message')\r\n*   content: the server answer with the added API key\r\n* @return {Promise|undefined} Returns a promise if no callback given\r\n* @example\r\n* index.addUserKey(['search'], {\r\n*   validity: 300,\r\n*   maxQueriesPerIPPerHour: 2000,\r\n*   maxHitsPerQuery: 3,\r\n*   description: 'Eat three fruits',\r\n*   referers: ['*.algolia.com'],\r\n*   queryParameters: {\r\n*     tagFilters: ['public'],\r\n*   }\r\n* })\r\n* @see {@link https://www.algolia.com/doc/rest_api#AddIndexKey|Algolia REST API Documentation}\r\n*\r\n* @deprecated see client.addApiKey()\r\n*/\n\nIndex.prototype.addApiKey = deprecate(function (acls, params, callback) {\n  var isArray = require('isarray');\n\n  var usage = 'Usage: index.addApiKey(arrayOfAcls[, params, callback])';\n\n  if (!isArray(acls)) {\n    throw new Error(usage);\n  }\n\n  if (arguments.length === 1 || typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var postObj = {\n    acl: acls\n  };\n\n  if (params) {\n    postObj.validity = params.validity;\n    postObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;\n    postObj.maxHitsPerQuery = params.maxHitsPerQuery;\n    postObj.description = params.description;\n\n    if (params.queryParameters) {\n      postObj.queryParameters = this.as._getSearchParams(params.queryParameters, '');\n    }\n\n    postObj.referers = params.referers;\n  }\n\n  return this.as._jsonRequest({\n    method: 'POST',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/keys',\n    body: postObj,\n    hostType: 'write',\n    callback: callback\n  });\n}, deprecatedMessage('index.addApiKey()', 'client.addApiKey()'));\n/**\r\n* @deprecated use client.addApiKey()\r\n*/\n\nIndex.prototype.addUserKeyWithValidity = deprecate(function deprecatedAddUserKeyWithValidity(acls, params, callback) {\n  return this.addApiKey(acls, params, callback);\n}, deprecatedMessage('index.addUserKeyWithValidity()', 'client.addApiKey()'));\n/*\r\n* @deprecated see client.updateApiKey()\r\n*/\n\nIndex.prototype.updateUserKey = deprecate(function (key, acls, params, callback) {\n  return this.updateApiKey(key, acls, params, callback);\n}, deprecatedMessage('index.updateUserKey()', 'client.updateApiKey()'));\n/**\r\n* Update an existing API key of this index\r\n* @param {string} key - The key to update\r\n* @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\r\n*   can contains the following values:\r\n*     - search: allow to search (https and http)\r\n*     - addObject: allows to add/update an object in the index (https only)\r\n*     - deleteObject : allows to delete an existing object (https only)\r\n*     - deleteIndex : allows to delete index content (https only)\r\n*     - settings : allows to get index settings (https only)\r\n*     - editSettings : allows to change index settings (https only)\r\n* @param {Object} [params] - Optionnal parameters to set for the key\r\n* @param {number} params.validity - Number of seconds after which the key will\r\n* be automatically removed (0 means no time limit for this key)\r\n* @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\r\n* @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\r\n* @param {string} params.description - A description for your key\r\n* @param {string[]} params.referers - A list of authorized referers\r\n* @param {Object} params.queryParameters - Force the key to use specific query parameters\r\n* @param {Function} callback - The result callback called with two arguments\r\n*   error: null or Error('message')\r\n*   content: the server answer with user keys list\r\n* @return {Promise|undefined} Returns a promise if no callback given\r\n* @example\r\n* index.updateApiKey('APIKEY', ['search'], {\r\n*   validity: 300,\r\n*   maxQueriesPerIPPerHour: 2000,\r\n*   maxHitsPerQuery: 3,\r\n*   description: 'Eat three fruits',\r\n*   referers: ['*.algolia.com'],\r\n*   queryParameters: {\r\n*     tagFilters: ['public'],\r\n*   }\r\n* })\r\n* @see {@link https://www.algolia.com/doc/rest_api#UpdateIndexKey|Algolia REST API Documentation}\r\n*\r\n* @deprecated see client.updateApiKey()\r\n*/\n\nIndex.prototype.updateApiKey = deprecate(function (key, acls, params, callback) {\n  var isArray = require('isarray');\n\n  var usage = 'Usage: index.updateApiKey(key, arrayOfAcls[, params, callback])';\n\n  if (!isArray(acls)) {\n    throw new Error(usage);\n  }\n\n  if (arguments.length === 2 || typeof params === 'function') {\n    callback = params;\n    params = null;\n  }\n\n  var putObj = {\n    acl: acls\n  };\n\n  if (params) {\n    putObj.validity = params.validity;\n    putObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;\n    putObj.maxHitsPerQuery = params.maxHitsPerQuery;\n    putObj.description = params.description;\n\n    if (params.queryParameters) {\n      putObj.queryParameters = this.as._getSearchParams(params.queryParameters, '');\n    }\n\n    putObj.referers = params.referers;\n  }\n\n  return this.as._jsonRequest({\n    method: 'PUT',\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/keys/' + key,\n    body: putObj,\n    hostType: 'write',\n    callback: callback\n  });\n}, deprecatedMessage('index.updateApiKey()', 'client.updateApiKey()'));","map":{"version":3,"sources":["C:/dev/New folder/rg/node_modules/algoliasearch/src/Index.js"],"names":["inherits","require","IndexCore","deprecate","deprecatedMessage","exitPromise","errors","deprecateForwardToSlaves","module","exports","Index","apply","arguments","prototype","addObject","content","objectID","callback","indexObj","length","undefined","as","_jsonRequest","method","url","encodeURIComponent","indexName","body","hostType","addObjects","objects","isArray","usage","Error","postObj","requests","i","request","action","push","partialUpdateObject","partialObject","createIfNotExists","partialUpdateObjects","saveObject","object","saveObjects","deleteObject","err","AlgoliaSearchError","_promise","reject","deleteObjects","objectIDs","map","prepareRequest","deleteByQuery","query","params","clone","client","attributesToRetrieve","hitsPerPage","distinct","clearCache","promise","search","then","stopOrDelete","searchContent","nbHits","hits","getObjectID","waitTask","doDeleteByQuery","deleteObjectsContent","taskID","success","failure","exit","_setTimeout","setTimeout","deleteBy","_getSearchParams","browseAll","queryParameters","merge","IndexBrowser","browser","index","browseLoop","cursor","_stopped","browseCallback","_error","_result","_end","ttAdapter","self","syncCb","asyncCb","cb","searchDone","baseDelay","maxDelay","loop","retryLoop","delay","status","successCb","failureCb","clearIndex","getSettings","opts","advanced","searchSynonyms","exportData","_hitsPerPage","page","_previous","options","previous","result","current","s","_highlightResult","synonyms","concat","data","exportSynonyms","bind","saveSynonym","synonym","forwardToSlaves","forwardToReplicas","getSynonym","deleteSynonym","clearSynonyms","batchSynonyms","replaceExistingSynonyms","searchRules","exportRules","saveRule","rule","getRule","deleteRule","clearRules","batchRules","rules","clearExistingRules","exists","catch","statusCode","res","findObject","findCallback","requestOptions","paginate","that","paginateLoop","position","hit","nbPages","ObjectNotFound","getObjectPosition","setSettings","settings","listUserKeys","listApiKeys","getUserKeyACL","key","getApiKey","deleteUserKey","deleteApiKey","addUserKey","acls","addApiKey","acl","validity","maxQueriesPerIPPerHour","maxHitsPerQuery","description","referers","addUserKeyWithValidity","deprecatedAddUserKeyWithValidity","updateUserKey","updateApiKey","putObj"],"mappings":"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","sourcesContent":["var inherits = require('inherits');\r\nvar IndexCore = require('./IndexCore.js');\r\nvar deprecate = require('./deprecate.js');\r\nvar deprecatedMessage = require('./deprecatedMessage.js');\r\nvar exitPromise = require('./exitPromise.js');\r\nvar errors = require('./errors');\r\n\r\nvar deprecateForwardToSlaves = deprecate(\r\n  function() {},\r\n  deprecatedMessage('forwardToSlaves', 'forwardToReplicas')\r\n);\r\n\r\nmodule.exports = Index;\r\n\r\nfunction Index() {\r\n  IndexCore.apply(this, arguments);\r\n}\r\n\r\ninherits(Index, IndexCore);\r\n\r\n/*\r\n* Add an object in this index\r\n*\r\n* @param content contains the javascript object to add inside the index\r\n* @param objectID (optional) an objectID you want to attribute to this object\r\n* (if the attribute already exist the old object will be overwrite)\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID\r\n*/\r\nIndex.prototype.addObject = function(content, objectID, callback) {\r\n  var indexObj = this;\r\n\r\n  if (arguments.length === 1 || typeof objectID === 'function') {\r\n    callback = objectID;\r\n    objectID = undefined;\r\n  }\r\n\r\n  return this.as._jsonRequest({\r\n    method: objectID !== undefined ?\r\n    'PUT' : // update or create\r\n    'POST', // create (API generates an objectID)\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + // create\r\n    (objectID !== undefined ? '/' + encodeURIComponent(objectID) : ''), // update or create\r\n    body: content,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Add several objects\r\n*\r\n* @param objects contains an array of objects to add\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that updateAt and taskID\r\n*/\r\nIndex.prototype.addObjects = function(objects, callback) {\r\n  var isArray = require('isarray');\r\n  var usage = 'Usage: index.addObjects(arrayOfObjects[, callback])';\r\n\r\n  if (!isArray(objects)) {\r\n    throw new Error(usage);\r\n  }\r\n\r\n  var indexObj = this;\r\n  var postObj = {\r\n    requests: []\r\n  };\r\n  for (var i = 0; i < objects.length; ++i) {\r\n    var request = {\r\n      action: 'addObject',\r\n      body: objects[i]\r\n    };\r\n    postObj.requests.push(request);\r\n  }\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',\r\n    body: postObj,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Update partially an object (only update attributes passed in argument)\r\n*\r\n* @param partialObject contains the javascript attributes to override, the\r\n*  object must contains an objectID attribute\r\n* @param createIfNotExists (optional) if false, avoid an automatic creation of the object\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID\r\n*/\r\nIndex.prototype.partialUpdateObject = function(partialObject, createIfNotExists, callback) {\r\n  if (arguments.length === 1 || typeof createIfNotExists === 'function') {\r\n    callback = createIfNotExists;\r\n    createIfNotExists = undefined;\r\n  }\r\n\r\n  var indexObj = this;\r\n  var url = '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(partialObject.objectID) + '/partial';\r\n  if (createIfNotExists === false) {\r\n    url += '?createIfNotExists=false';\r\n  }\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: url,\r\n    body: partialObject,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Partially Override the content of several objects\r\n*\r\n* @param objects contains an array of objects to update (each object must contains a objectID attribute)\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that updateAt and taskID\r\n*/\r\nIndex.prototype.partialUpdateObjects = function(objects, createIfNotExists, callback) {\r\n  if (arguments.length === 1 || typeof createIfNotExists === 'function') {\r\n    callback = createIfNotExists;\r\n    createIfNotExists = true;\r\n  }\r\n\r\n  var isArray = require('isarray');\r\n  var usage = 'Usage: index.partialUpdateObjects(arrayOfObjects[, callback])';\r\n\r\n  if (!isArray(objects)) {\r\n    throw new Error(usage);\r\n  }\r\n\r\n  var indexObj = this;\r\n  var postObj = {\r\n    requests: []\r\n  };\r\n  for (var i = 0; i < objects.length; ++i) {\r\n    var request = {\r\n      action: createIfNotExists === true ? 'partialUpdateObject' : 'partialUpdateObjectNoCreate',\r\n      objectID: objects[i].objectID,\r\n      body: objects[i]\r\n    };\r\n    postObj.requests.push(request);\r\n  }\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',\r\n    body: postObj,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Override the content of object\r\n*\r\n* @param object contains the javascript object to save, the object must contains an objectID attribute\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that updateAt and taskID\r\n*/\r\nIndex.prototype.saveObject = function(object, callback) {\r\n  var indexObj = this;\r\n  return this.as._jsonRequest({\r\n    method: 'PUT',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(object.objectID),\r\n    body: object,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Override the content of several objects\r\n*\r\n* @param objects contains an array of objects to update (each object must contains a objectID attribute)\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that updateAt and taskID\r\n*/\r\nIndex.prototype.saveObjects = function(objects, callback) {\r\n  var isArray = require('isarray');\r\n  var usage = 'Usage: index.saveObjects(arrayOfObjects[, callback])';\r\n\r\n  if (!isArray(objects)) {\r\n    throw new Error(usage);\r\n  }\r\n\r\n  var indexObj = this;\r\n  var postObj = {\r\n    requests: []\r\n  };\r\n  for (var i = 0; i < objects.length; ++i) {\r\n    var request = {\r\n      action: 'updateObject',\r\n      objectID: objects[i].objectID,\r\n      body: objects[i]\r\n    };\r\n    postObj.requests.push(request);\r\n  }\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',\r\n    body: postObj,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Delete an object from the index\r\n*\r\n* @param objectID the unique identifier of object to delete\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID\r\n*/\r\nIndex.prototype.deleteObject = function(objectID, callback) {\r\n  if (typeof objectID === 'function' || typeof objectID !== 'string' && typeof objectID !== 'number') {\r\n    var err = new errors.AlgoliaSearchError(\r\n      objectID && typeof objectID !== 'function'\r\n      ? 'ObjectID must be a string'\r\n      : 'Cannot delete an object without an objectID'\r\n    );\r\n    callback = objectID;\r\n    if (typeof callback === 'function') {\r\n      return callback(err);\r\n    }\r\n\r\n    return this.as._promise.reject(err);\r\n  }\r\n\r\n  var indexObj = this;\r\n  return this.as._jsonRequest({\r\n    method: 'DELETE',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(objectID),\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Delete several objects from an index\r\n*\r\n* @param objectIDs contains an array of objectID to delete\r\n* @param callback (optional) the result callback called with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that contains 3 elements: createAt, taskId and objectID\r\n*/\r\nIndex.prototype.deleteObjects = function(objectIDs, callback) {\r\n  var isArray = require('isarray');\r\n  var map = require('./map.js');\r\n\r\n  var usage = 'Usage: index.deleteObjects(arrayOfObjectIDs[, callback])';\r\n\r\n  if (!isArray(objectIDs)) {\r\n    throw new Error(usage);\r\n  }\r\n\r\n  var indexObj = this;\r\n  var postObj = {\r\n    requests: map(objectIDs, function prepareRequest(objectID) {\r\n      return {\r\n        action: 'deleteObject',\r\n        objectID: objectID,\r\n        body: {\r\n          objectID: objectID\r\n        }\r\n      };\r\n    })\r\n  };\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',\r\n    body: postObj,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Delete all objects matching a query\r\n*\r\n* @param query the query string\r\n* @param params the optional query parameters\r\n* @param callback (optional) the result callback called with one argument\r\n*  error: null or Error('message')\r\n* @deprecated see index.deleteBy\r\n*/\r\nIndex.prototype.deleteByQuery = deprecate(function(query, params, callback) {\r\n  var clone = require('./clone.js');\r\n  var map = require('./map.js');\r\n\r\n  var indexObj = this;\r\n  var client = indexObj.as;\r\n\r\n  if (arguments.length === 1 || typeof params === 'function') {\r\n    callback = params;\r\n    params = {};\r\n  } else {\r\n    params = clone(params);\r\n  }\r\n\r\n  params.attributesToRetrieve = 'objectID';\r\n  params.hitsPerPage = 1000;\r\n  params.distinct = false;\r\n\r\n  // when deleting, we should never use cache to get the\r\n  // search results\r\n  this.clearCache();\r\n\r\n  // there's a problem in how we use the promise chain,\r\n  // see how waitTask is done\r\n  var promise = this\r\n  .search(query, params)\r\n  .then(stopOrDelete);\r\n\r\n  function stopOrDelete(searchContent) {\r\n    // stop here\r\n    if (searchContent.nbHits === 0) {\r\n      // return indexObj.as._request.resolve();\r\n      return searchContent;\r\n    }\r\n\r\n    // continue and do a recursive call\r\n    var objectIDs = map(searchContent.hits, function getObjectID(object) {\r\n      return object.objectID;\r\n    });\r\n\r\n    return indexObj\r\n    .deleteObjects(objectIDs)\r\n    .then(waitTask)\r\n    .then(doDeleteByQuery);\r\n  }\r\n\r\n  function waitTask(deleteObjectsContent) {\r\n    return indexObj.waitTask(deleteObjectsContent.taskID);\r\n  }\r\n\r\n  function doDeleteByQuery() {\r\n    return indexObj.deleteByQuery(query, params);\r\n  }\r\n\r\n  if (!callback) {\r\n    return promise;\r\n  }\r\n\r\n  promise.then(success, failure);\r\n\r\n  function success() {\r\n    exitPromise(function exit() {\r\n      callback(null);\r\n    }, client._setTimeout || setTimeout);\r\n  }\r\n\r\n  function failure(err) {\r\n    exitPromise(function exit() {\r\n      callback(err);\r\n    }, client._setTimeout || setTimeout);\r\n  }\r\n}, deprecatedMessage('index.deleteByQuery()', 'index.deleteBy()'));\r\n\r\n/**\r\n* Delete all objects matching a query\r\n*\r\n* the query parameters that can be used are:\r\n* - filters (numeric, facet, tag)\r\n* - geo\r\n*\r\n* you can not send an empty query or filters\r\n*\r\n* @param params the optional query parameters\r\n* @param callback (optional) the result callback called with one argument\r\n*  error: null or Error('message')\r\n*/\r\nIndex.prototype.deleteBy = function(params, callback) {\r\n  var indexObj = this;\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/deleteByQuery',\r\n    body: {params: indexObj.as._getSearchParams(params, '')},\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Browse all content from an index using events. Basically this will do\r\n* .browse() -> .browseFrom -> .browseFrom -> .. until all the results are returned\r\n*\r\n* @param {string} query - The full text query\r\n* @param {Object} [queryParameters] - Any search query parameter\r\n* @return {EventEmitter}\r\n* @example\r\n* var browser = index.browseAll('cool songs', {\r\n*   tagFilters: 'public,comments',\r\n*   hitsPerPage: 500\r\n* });\r\n*\r\n* browser.on('result', function resultCallback(content) {\r\n*   console.log(content.hits);\r\n* });\r\n*\r\n* // if any error occurs, you get it\r\n* browser.on('error', function(err) {\r\n*   throw err;\r\n* });\r\n*\r\n* // when you have browsed the whole index, you get this event\r\n* browser.on('end', function() {\r\n*   console.log('finished');\r\n* });\r\n*\r\n* // at any point if you want to stop the browsing process, you can stop it manually\r\n* // otherwise it will go on and on\r\n* browser.stop();\r\n*\r\n* @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}\r\n*/\r\nIndex.prototype.browseAll = function(query, queryParameters) {\r\n  if (typeof query === 'object') {\r\n    queryParameters = query;\r\n    query = undefined;\r\n  }\r\n\r\n  var merge = require('./merge.js');\r\n\r\n  var IndexBrowser = require('./IndexBrowser');\r\n\r\n  var browser = new IndexBrowser();\r\n  var client = this.as;\r\n  var index = this;\r\n  var params = client._getSearchParams(\r\n    merge({}, queryParameters || {}, {\r\n      query: query\r\n    }), ''\r\n  );\r\n\r\n  // start browsing\r\n  browseLoop();\r\n\r\n  function browseLoop(cursor) {\r\n    if (browser._stopped) {\r\n      return;\r\n    }\r\n\r\n    var body;\r\n\r\n    if (cursor !== undefined) {\r\n      body = {\r\n        cursor: cursor\r\n      };\r\n    } else {\r\n      body = {\r\n        params: params\r\n      };\r\n    }\r\n\r\n    client._jsonRequest({\r\n      method: 'POST',\r\n      url: '/1/indexes/' + encodeURIComponent(index.indexName) + '/browse',\r\n      hostType: 'read',\r\n      body: body,\r\n      callback: browseCallback\r\n    });\r\n  }\r\n\r\n  function browseCallback(err, content) {\r\n    if (browser._stopped) {\r\n      return;\r\n    }\r\n\r\n    if (err) {\r\n      browser._error(err);\r\n      return;\r\n    }\r\n\r\n    browser._result(content);\r\n\r\n    // no cursor means we are finished browsing\r\n    if (content.cursor === undefined) {\r\n      browser._end();\r\n      return;\r\n    }\r\n\r\n    browseLoop(content.cursor);\r\n  }\r\n\r\n  return browser;\r\n};\r\n\r\n/*\r\n* Get a Typeahead.js adapter\r\n* @param searchParams contains an object with query parameters (see search for details)\r\n*/\r\nIndex.prototype.ttAdapter = deprecate(function(params) {\r\n  var self = this;\r\n  return function ttAdapter(query, syncCb, asyncCb) {\r\n    var cb;\r\n\r\n    if (typeof asyncCb === 'function') {\r\n      // typeahead 0.11\r\n      cb = asyncCb;\r\n    } else {\r\n      // pre typeahead 0.11\r\n      cb = syncCb;\r\n    }\r\n\r\n    self.search(query, params, function searchDone(err, content) {\r\n      if (err) {\r\n        cb(err);\r\n        return;\r\n      }\r\n\r\n      cb(content.hits);\r\n    });\r\n  };\r\n},\r\n'ttAdapter is not necessary anymore and will be removed in the next version,\\n' +\r\n'have a look at autocomplete.js (https://github.com/algolia/autocomplete.js)');\r\n\r\n/*\r\n* Wait the publication of a task on the server.\r\n* All server task are asynchronous and you can check with this method that the task is published.\r\n*\r\n* @param taskID the id of the task returned by server\r\n* @param callback the result callback with with two arguments:\r\n*  error: null or Error('message')\r\n*  content: the server answer that contains the list of results\r\n*/\r\nIndex.prototype.waitTask = function(taskID, callback) {\r\n  // wait minimum 100ms before retrying\r\n  var baseDelay = 100;\r\n  // wait maximum 5s before retrying\r\n  var maxDelay = 5000;\r\n  var loop = 0;\r\n\r\n  // waitTask() must be handled differently from other methods,\r\n  // it's a recursive method using a timeout\r\n  var indexObj = this;\r\n  var client = indexObj.as;\r\n\r\n  var promise = retryLoop();\r\n\r\n  function retryLoop() {\r\n    return client._jsonRequest({\r\n      method: 'GET',\r\n      hostType: 'read',\r\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/task/' + taskID\r\n    }).then(function success(content) {\r\n      loop++;\r\n      var delay = baseDelay * loop * loop;\r\n      if (delay > maxDelay) {\r\n        delay = maxDelay;\r\n      }\r\n\r\n      if (content.status !== 'published') {\r\n        return client._promise.delay(delay).then(retryLoop);\r\n      }\r\n\r\n      return content;\r\n    });\r\n  }\r\n\r\n  if (!callback) {\r\n    return promise;\r\n  }\r\n\r\n  promise.then(successCb, failureCb);\r\n\r\n  function successCb(content) {\r\n    exitPromise(function exit() {\r\n      callback(null, content);\r\n    }, client._setTimeout || setTimeout);\r\n  }\r\n\r\n  function failureCb(err) {\r\n    exitPromise(function exit() {\r\n      callback(err);\r\n    }, client._setTimeout || setTimeout);\r\n  }\r\n};\r\n\r\n/*\r\n* This function deletes the index content. Settings and index specific API keys are kept untouched.\r\n*\r\n* @param callback (optional) the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the settings object or the error message if a failure occurred\r\n*/\r\nIndex.prototype.clearIndex = function(callback) {\r\n  var indexObj = this;\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/clear',\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* Get settings of this index\r\n*\r\n* @param opts an object of options to add\r\n* @param opts.advanced get more settings like nbShards (useful for Enterprise)\r\n* @param callback (optional) the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the settings object or the error message if a failure occurred\r\n*/\r\nIndex.prototype.getSettings = function(opts, callback) {\r\n  if (arguments.length === 1 && typeof opts === 'function') {\r\n    callback = opts;\r\n    opts = {};\r\n  }\r\n  opts = opts || {};\r\n\r\n  var indexName = encodeURIComponent(this.indexName);\r\n  return this.as._jsonRequest({\r\n    method: 'GET',\r\n    url:\r\n      '/1/indexes/' +\r\n      indexName +\r\n      '/settings?getVersion=2' +\r\n      (opts.advanced ? '&advanced=' + opts.advanced : ''),\r\n    hostType: 'read',\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndex.prototype.searchSynonyms = function(params, callback) {\r\n  if (typeof params === 'function') {\r\n    callback = params;\r\n    params = {};\r\n  } else if (params === undefined) {\r\n    params = {};\r\n  }\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/search',\r\n    body: params,\r\n    hostType: 'read',\r\n    callback: callback\r\n  });\r\n};\r\n\r\nfunction exportData(method, _hitsPerPage, callback) {\r\n  function search(page, _previous) {\r\n    var options = {\r\n      page: page || 0,\r\n      hitsPerPage: _hitsPerPage || 100\r\n    };\r\n    var previous = _previous || [];\r\n\r\n    return method(options).then(function(result) {\r\n      var hits = result.hits;\r\n      var nbHits = result.nbHits;\r\n      var current = hits.map(function(s) {\r\n        delete s._highlightResult;\r\n        return s;\r\n      });\r\n      var synonyms = previous.concat(current);\r\n      if (synonyms.length < nbHits) {\r\n        return search(options.page + 1, synonyms);\r\n      }\r\n      return synonyms;\r\n    });\r\n  }\r\n  return search().then(function(data) {\r\n    if (typeof callback === 'function') {\r\n      callback(data);\r\n      return undefined;\r\n    }\r\n    return data;\r\n  });\r\n}\r\n\r\n/**\r\n * Retrieve all the synonyms in an index\r\n * @param [number=100] hitsPerPage The amount of synonyms to retrieve per batch\r\n * @param [function] callback will be called after all synonyms are retrieved\r\n */\r\nIndex.prototype.exportSynonyms = function(hitsPerPage, callback) {\r\n  return exportData(this.searchSynonyms.bind(this), hitsPerPage, callback);\r\n};\r\n\r\nIndex.prototype.saveSynonym = function(synonym, opts, callback) {\r\n  if (typeof opts === 'function') {\r\n    callback = opts;\r\n    opts = {};\r\n  } else if (opts === undefined) {\r\n    opts = {};\r\n  }\r\n\r\n  if (opts.forwardToSlaves !== undefined) deprecateForwardToSlaves();\r\n  var forwardToReplicas = (opts.forwardToSlaves || opts.forwardToReplicas) ? 'true' : 'false';\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'PUT',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/' + encodeURIComponent(synonym.objectID) +\r\n      '?forwardToReplicas=' + forwardToReplicas,\r\n    body: synonym,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndex.prototype.getSynonym = function(objectID, callback) {\r\n  return this.as._jsonRequest({\r\n    method: 'GET',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/' + encodeURIComponent(objectID),\r\n    hostType: 'read',\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndex.prototype.deleteSynonym = function(objectID, opts, callback) {\r\n  if (typeof opts === 'function') {\r\n    callback = opts;\r\n    opts = {};\r\n  } else if (opts === undefined) {\r\n    opts = {};\r\n  }\r\n\r\n  if (opts.forwardToSlaves !== undefined) deprecateForwardToSlaves();\r\n  var forwardToReplicas = (opts.forwardToSlaves || opts.forwardToReplicas) ? 'true' : 'false';\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'DELETE',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/' + encodeURIComponent(objectID) +\r\n      '?forwardToReplicas=' + forwardToReplicas,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndex.prototype.clearSynonyms = function(opts, callback) {\r\n  if (typeof opts === 'function') {\r\n    callback = opts;\r\n    opts = {};\r\n  } else if (opts === undefined) {\r\n    opts = {};\r\n  }\r\n\r\n  if (opts.forwardToSlaves !== undefined) deprecateForwardToSlaves();\r\n  var forwardToReplicas = (opts.forwardToSlaves || opts.forwardToReplicas) ? 'true' : 'false';\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/clear' +\r\n      '?forwardToReplicas=' + forwardToReplicas,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndex.prototype.batchSynonyms = function(synonyms, opts, callback) {\r\n  if (typeof opts === 'function') {\r\n    callback = opts;\r\n    opts = {};\r\n  } else if (opts === undefined) {\r\n    opts = {};\r\n  }\r\n\r\n  if (opts.forwardToSlaves !== undefined) deprecateForwardToSlaves();\r\n  var forwardToReplicas = (opts.forwardToSlaves || opts.forwardToReplicas) ? 'true' : 'false';\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/synonyms/batch' +\r\n      '?forwardToReplicas=' + forwardToReplicas +\r\n      '&replaceExistingSynonyms=' + (opts.replaceExistingSynonyms ? 'true' : 'false'),\r\n    hostType: 'write',\r\n    body: synonyms,\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndex.prototype.searchRules = function(params, callback) {\r\n  if (typeof params === 'function') {\r\n    callback = params;\r\n    params = {};\r\n  } else if (params === undefined) {\r\n    params = {};\r\n  }\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/search',\r\n    body: params,\r\n    hostType: 'read',\r\n    callback: callback\r\n  });\r\n};\r\n/**\r\n * Retrieve all the query rules in an index\r\n * @param [number=100] hitsPerPage The amount of query rules to retrieve per batch\r\n * @param [function] callback will be called after all query rules are retrieved\r\n *  error: null or Error('message')\r\n */\r\nIndex.prototype.exportRules = function(hitsPerPage, callback) {\r\n  return exportData(this.searchRules.bind(this), hitsPerPage, callback);\r\n};\r\n\r\nIndex.prototype.saveRule = function(rule, opts, callback) {\r\n  if (typeof opts === 'function') {\r\n    callback = opts;\r\n    opts = {};\r\n  } else if (opts === undefined) {\r\n    opts = {};\r\n  }\r\n\r\n  if (!rule.objectID) {\r\n    throw new errors.AlgoliaSearchError('Missing or empty objectID field for rule');\r\n  }\r\n\r\n  var forwardToReplicas = opts.forwardToReplicas === true ? 'true' : 'false';\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'PUT',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/' + encodeURIComponent(rule.objectID) +\r\n      '?forwardToReplicas=' + forwardToReplicas,\r\n    body: rule,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndex.prototype.getRule = function(objectID, callback) {\r\n  return this.as._jsonRequest({\r\n    method: 'GET',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/' + encodeURIComponent(objectID),\r\n    hostType: 'read',\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndex.prototype.deleteRule = function(objectID, opts, callback) {\r\n  if (typeof opts === 'function') {\r\n    callback = opts;\r\n    opts = {};\r\n  } else if (opts === undefined) {\r\n    opts = {};\r\n  }\r\n\r\n  var forwardToReplicas = opts.forwardToReplicas === true ? 'true' : 'false';\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'DELETE',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/' + encodeURIComponent(objectID) +\r\n      '?forwardToReplicas=' + forwardToReplicas,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndex.prototype.clearRules = function(opts, callback) {\r\n  if (typeof opts === 'function') {\r\n    callback = opts;\r\n    opts = {};\r\n  } else if (opts === undefined) {\r\n    opts = {};\r\n  }\r\n\r\n  var forwardToReplicas = opts.forwardToReplicas === true ? 'true' : 'false';\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/clear' +\r\n      '?forwardToReplicas=' + forwardToReplicas,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndex.prototype.batchRules = function(rules, opts, callback) {\r\n  if (typeof opts === 'function') {\r\n    callback = opts;\r\n    opts = {};\r\n  } else if (opts === undefined) {\r\n    opts = {};\r\n  }\r\n\r\n  var forwardToReplicas = opts.forwardToReplicas === true ? 'true' : 'false';\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/rules/batch' +\r\n      '?forwardToReplicas=' + forwardToReplicas +\r\n      '&clearExistingRules=' + (opts.clearExistingRules === true ? 'true' : 'false'),\r\n    hostType: 'write',\r\n    body: rules,\r\n    callback: callback\r\n  });\r\n};\r\n\r\nIndex.prototype.exists = function(callback) {\r\n  var result = this.getSettings().then(function() {\r\n    return true;\r\n  }).catch(function(err) {\r\n    if (err instanceof errors.AlgoliaSearchError && err.statusCode === 404) {\r\n      return false;\r\n    }\r\n\r\n    throw err;\r\n  });\r\n\r\n  if (typeof callback !== 'function') {\r\n    return result;\r\n  }\r\n\r\n  result.then(function(res) {\r\n    callback(null, res);\r\n  }).catch(function(err) {\r\n    callback(err);\r\n  });\r\n};\r\n\r\nIndex.prototype.findObject = function(findCallback, requestOptions, callback) {\r\n  requestOptions = requestOptions === undefined ? {} : requestOptions;\r\n  var paginate = requestOptions.paginate !== undefined ? requestOptions.paginate : true;\r\n  var query = requestOptions.query !== undefined ? requestOptions.query : '';\r\n\r\n  var that = this;\r\n  var page = 0;\r\n\r\n  var paginateLoop = function() {\r\n    requestOptions.page = page;\r\n\r\n    return that.search(query, requestOptions).then(function(result) {\r\n      var hits = result.hits;\r\n\r\n      for (var position = 0; position < hits.length; position++) {\r\n        var hit = hits[position];\r\n        if (findCallback(hit)) {\r\n          return {\r\n            object: hit,\r\n            position: position,\r\n            page: page\r\n          };\r\n        }\r\n      }\r\n\r\n      page += 1;\r\n\r\n      // paginate if option was set and has next page\r\n      if (!paginate || page >= result.nbPages) {\r\n        throw new errors.ObjectNotFound('Object not found');\r\n      }\r\n\r\n      return paginateLoop();\r\n    });\r\n  };\r\n\r\n  var promise = paginateLoop(page);\r\n\r\n  if (callback === undefined) {\r\n    return promise;\r\n  }\r\n\r\n  promise\r\n    .then(function(res) {\r\n      callback(null, res);\r\n    })\r\n    .catch(function(err) {\r\n      callback(err);\r\n    });\r\n};\r\n\r\nIndex.prototype.getObjectPosition = function(result, objectID) {\r\n  var hits = result.hits;\r\n\r\n  for (var position = 0; position < hits.length; position++) {\r\n    if (hits[position].objectID === objectID) {\r\n      return position;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n};\r\n\r\n/*\r\n* Set settings for this index\r\n*\r\n* @param settings the settings object that can contains :\r\n* - minWordSizefor1Typo: (integer) the minimum number of characters to accept one typo (default = 3).\r\n* - minWordSizefor2Typos: (integer) the minimum number of characters to accept two typos (default = 7).\r\n* - hitsPerPage: (integer) the number of hits per page (default = 10).\r\n* - attributesToRetrieve: (array of strings) default list of attributes to retrieve in objects.\r\n*   If set to null, all attributes are retrieved.\r\n* - attributesToHighlight: (array of strings) default list of attributes to highlight.\r\n*   If set to null, all indexed attributes are highlighted.\r\n* - attributesToSnippet**: (array of strings) default list of attributes to snippet alongside the number\r\n* of words to return (syntax is attributeName:nbWords).\r\n*   By default no snippet is computed. If set to null, no snippet is computed.\r\n* - attributesToIndex: (array of strings) the list of fields you want to index.\r\n*   If set to null, all textual and numerical attributes of your objects are indexed,\r\n*   but you should update it to get optimal results.\r\n*   This parameter has two important uses:\r\n*     - Limit the attributes to index: For example if you store a binary image in base64,\r\n*     you want to store it and be able to\r\n*       retrieve it but you don't want to search in the base64 string.\r\n*     - Control part of the ranking*: (see the ranking parameter for full explanation)\r\n*     Matches in attributes at the beginning of\r\n*       the list will be considered more important than matches in attributes further down the list.\r\n*       In one attribute, matching text at the beginning of the attribute will be\r\n*       considered more important than text after, you can disable\r\n*       this behavior if you add your attribute inside `unordered(AttributeName)`,\r\n*       for example attributesToIndex: [\"title\", \"unordered(text)\"].\r\n* - attributesForFaceting: (array of strings) The list of fields you want to use for faceting.\r\n*   All strings in the attribute selected for faceting are extracted and added as a facet.\r\n*   If set to null, no attribute is used for faceting.\r\n* - attributeForDistinct: (string) The attribute name used for the Distinct feature.\r\n* This feature is similar to the SQL \"distinct\" keyword: when enabled\r\n*   in query with the distinct=1 parameter, all hits containing a duplicate\r\n*   value for this attribute are removed from results.\r\n*   For example, if the chosen attribute is show_name and several hits have\r\n*   the same value for show_name, then only the best one is kept and others are removed.\r\n* - ranking: (array of strings) controls the way results are sorted.\r\n*   We have six available criteria:\r\n*    - typo: sort according to number of typos,\r\n*    - geo: sort according to decreassing distance when performing a geo-location based search,\r\n*    - proximity: sort according to the proximity of query words in hits,\r\n*    - attribute: sort according to the order of attributes defined by attributesToIndex,\r\n*    - exact:\r\n*        - if the user query contains one word: sort objects having an attribute\r\n*        that is exactly the query word before others.\r\n*          For example if you search for the \"V\" TV show, you want to find it\r\n*          with the \"V\" query and avoid to have all popular TV\r\n*          show starting by the v letter before it.\r\n*        - if the user query contains multiple words: sort according to the\r\n*        number of words that matched exactly (and not as a prefix).\r\n*    - custom: sort according to a user defined formula set in **customRanking** attribute.\r\n*   The standard order is [\"typo\", \"geo\", \"proximity\", \"attribute\", \"exact\", \"custom\"]\r\n* - customRanking: (array of strings) lets you specify part of the ranking.\r\n*   The syntax of this condition is an array of strings containing attributes\r\n*   prefixed by asc (ascending order) or desc (descending order) operator.\r\n*   For example `\"customRanking\" => [\"desc(population)\", \"asc(name)\"]`\r\n* - queryType: Select how the query words are interpreted, it can be one of the following value:\r\n*   - prefixAll: all query words are interpreted as prefixes,\r\n*   - prefixLast: only the last word is interpreted as a prefix (default behavior),\r\n*   - prefixNone: no query word is interpreted as a prefix. This option is not recommended.\r\n* - highlightPreTag: (string) Specify the string that is inserted before\r\n* the highlighted parts in the query result (default to \"<em>\").\r\n* - highlightPostTag: (string) Specify the string that is inserted after\r\n* the highlighted parts in the query result (default to \"</em>\").\r\n* - optionalWords: (array of strings) Specify a list of words that should\r\n* be considered as optional when found in the query.\r\n* @param callback (optional) the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the server answer or the error message if a failure occurred\r\n*/\r\nIndex.prototype.setSettings = function(settings, opts, callback) {\r\n  if (arguments.length === 1 || typeof opts === 'function') {\r\n    callback = opts;\r\n    opts = {};\r\n  }\r\n\r\n  if (opts.forwardToSlaves !== undefined) deprecateForwardToSlaves();\r\n  var forwardToReplicas = (opts.forwardToSlaves || opts.forwardToReplicas) ? 'true' : 'false';\r\n\r\n  var indexObj = this;\r\n  return this.as._jsonRequest({\r\n    method: 'PUT',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/settings?forwardToReplicas='\r\n      + forwardToReplicas,\r\n    hostType: 'write',\r\n    body: settings,\r\n    callback: callback\r\n  });\r\n};\r\n\r\n/*\r\n* @deprecated see client.listApiKeys()\r\n*/\r\nIndex.prototype.listUserKeys = deprecate(function(callback) {\r\n  return this.listApiKeys(callback);\r\n}, deprecatedMessage('index.listUserKeys()', 'client.listApiKeys()'));\r\n\r\n/*\r\n* List all existing API keys to this index\r\n*\r\n* @param callback the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the server answer with API keys belonging to the index\r\n*\r\n* @deprecated see client.listApiKeys()\r\n*/\r\nIndex.prototype.listApiKeys = deprecate(function(callback) {\r\n  var indexObj = this;\r\n  return this.as._jsonRequest({\r\n    method: 'GET',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/keys',\r\n    hostType: 'read',\r\n    callback: callback\r\n  });\r\n}, deprecatedMessage('index.listApiKeys()', 'client.listApiKeys()'));\r\n\r\n/*\r\n* @deprecated see client.getApiKey()\r\n*/\r\nIndex.prototype.getUserKeyACL = deprecate(function(key, callback) {\r\n  return this.getApiKey(key, callback);\r\n}, deprecatedMessage('index.getUserKeyACL()', 'client.getApiKey()'));\r\n\r\n\r\n/*\r\n* Get an API key from this index\r\n*\r\n* @param key\r\n* @param callback the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the server answer with the right API key\r\n*\r\n* @deprecated see client.getApiKey()\r\n*/\r\nIndex.prototype.getApiKey = deprecate(function(key, callback) {\r\n  var indexObj = this;\r\n  return this.as._jsonRequest({\r\n    method: 'GET',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/keys/' + key,\r\n    hostType: 'read',\r\n    callback: callback\r\n  });\r\n}, deprecatedMessage('index.getApiKey()', 'client.getApiKey()'));\r\n\r\n/*\r\n* @deprecated see client.deleteApiKey()\r\n*/\r\nIndex.prototype.deleteUserKey = deprecate(function(key, callback) {\r\n  return this.deleteApiKey(key, callback);\r\n}, deprecatedMessage('index.deleteUserKey()', 'client.deleteApiKey()'));\r\n\r\n/*\r\n* Delete an existing API key associated to this index\r\n*\r\n* @param key\r\n* @param callback the result callback called with two arguments\r\n*  error: null or Error('message')\r\n*  content: the server answer with the deletion date\r\n*\r\n* @deprecated see client.deleteApiKey()\r\n*/\r\nIndex.prototype.deleteApiKey = deprecate(function(key, callback) {\r\n  var indexObj = this;\r\n  return this.as._jsonRequest({\r\n    method: 'DELETE',\r\n    url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/keys/' + key,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n}, deprecatedMessage('index.deleteApiKey()', 'client.deleteApiKey()'));\r\n\r\n/*\r\n* @deprecated see client.addApiKey()\r\n*/\r\nIndex.prototype.addUserKey = deprecate(function(acls, params, callback) {\r\n  return this.addApiKey(acls, params, callback);\r\n}, deprecatedMessage('index.addUserKey()', 'client.addApiKey()'));\r\n\r\n/*\r\n* Add a new API key to this index\r\n*\r\n* @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\r\n*   can contains the following values:\r\n*     - search: allow to search (https and http)\r\n*     - addObject: allows to add/update an object in the index (https only)\r\n*     - deleteObject : allows to delete an existing object (https only)\r\n*     - deleteIndex : allows to delete index content (https only)\r\n*     - settings : allows to get index settings (https only)\r\n*     - editSettings : allows to change index settings (https only)\r\n* @param {Object} [params] - Optionnal parameters to set for the key\r\n* @param {number} params.validity - Number of seconds after which the key will\r\n* be automatically removed (0 means no time limit for this key)\r\n* @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\r\n* @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\r\n* @param {string} params.description - A description for your key\r\n* @param {string[]} params.referers - A list of authorized referers\r\n* @param {Object} params.queryParameters - Force the key to use specific query parameters\r\n* @param {Function} callback - The result callback called with two arguments\r\n*   error: null or Error('message')\r\n*   content: the server answer with the added API key\r\n* @return {Promise|undefined} Returns a promise if no callback given\r\n* @example\r\n* index.addUserKey(['search'], {\r\n*   validity: 300,\r\n*   maxQueriesPerIPPerHour: 2000,\r\n*   maxHitsPerQuery: 3,\r\n*   description: 'Eat three fruits',\r\n*   referers: ['*.algolia.com'],\r\n*   queryParameters: {\r\n*     tagFilters: ['public'],\r\n*   }\r\n* })\r\n* @see {@link https://www.algolia.com/doc/rest_api#AddIndexKey|Algolia REST API Documentation}\r\n*\r\n* @deprecated see client.addApiKey()\r\n*/\r\nIndex.prototype.addApiKey = deprecate(function(acls, params, callback) {\r\n  var isArray = require('isarray');\r\n  var usage = 'Usage: index.addApiKey(arrayOfAcls[, params, callback])';\r\n\r\n  if (!isArray(acls)) {\r\n    throw new Error(usage);\r\n  }\r\n\r\n  if (arguments.length === 1 || typeof params === 'function') {\r\n    callback = params;\r\n    params = null;\r\n  }\r\n\r\n  var postObj = {\r\n    acl: acls\r\n  };\r\n\r\n  if (params) {\r\n    postObj.validity = params.validity;\r\n    postObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;\r\n    postObj.maxHitsPerQuery = params.maxHitsPerQuery;\r\n    postObj.description = params.description;\r\n\r\n    if (params.queryParameters) {\r\n      postObj.queryParameters = this.as._getSearchParams(params.queryParameters, '');\r\n    }\r\n\r\n    postObj.referers = params.referers;\r\n  }\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'POST',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/keys',\r\n    body: postObj,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n}, deprecatedMessage('index.addApiKey()', 'client.addApiKey()'));\r\n\r\n/**\r\n* @deprecated use client.addApiKey()\r\n*/\r\nIndex.prototype.addUserKeyWithValidity = deprecate(function deprecatedAddUserKeyWithValidity(acls, params, callback) {\r\n  return this.addApiKey(acls, params, callback);\r\n}, deprecatedMessage('index.addUserKeyWithValidity()', 'client.addApiKey()'));\r\n\r\n/*\r\n* @deprecated see client.updateApiKey()\r\n*/\r\nIndex.prototype.updateUserKey = deprecate(function(key, acls, params, callback) {\r\n  return this.updateApiKey(key, acls, params, callback);\r\n}, deprecatedMessage('index.updateUserKey()', 'client.updateApiKey()'));\r\n\r\n/**\r\n* Update an existing API key of this index\r\n* @param {string} key - The key to update\r\n* @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that\r\n*   can contains the following values:\r\n*     - search: allow to search (https and http)\r\n*     - addObject: allows to add/update an object in the index (https only)\r\n*     - deleteObject : allows to delete an existing object (https only)\r\n*     - deleteIndex : allows to delete index content (https only)\r\n*     - settings : allows to get index settings (https only)\r\n*     - editSettings : allows to change index settings (https only)\r\n* @param {Object} [params] - Optionnal parameters to set for the key\r\n* @param {number} params.validity - Number of seconds after which the key will\r\n* be automatically removed (0 means no time limit for this key)\r\n* @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour\r\n* @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call\r\n* @param {string} params.description - A description for your key\r\n* @param {string[]} params.referers - A list of authorized referers\r\n* @param {Object} params.queryParameters - Force the key to use specific query parameters\r\n* @param {Function} callback - The result callback called with two arguments\r\n*   error: null or Error('message')\r\n*   content: the server answer with user keys list\r\n* @return {Promise|undefined} Returns a promise if no callback given\r\n* @example\r\n* index.updateApiKey('APIKEY', ['search'], {\r\n*   validity: 300,\r\n*   maxQueriesPerIPPerHour: 2000,\r\n*   maxHitsPerQuery: 3,\r\n*   description: 'Eat three fruits',\r\n*   referers: ['*.algolia.com'],\r\n*   queryParameters: {\r\n*     tagFilters: ['public'],\r\n*   }\r\n* })\r\n* @see {@link https://www.algolia.com/doc/rest_api#UpdateIndexKey|Algolia REST API Documentation}\r\n*\r\n* @deprecated see client.updateApiKey()\r\n*/\r\nIndex.prototype.updateApiKey = deprecate(function(key, acls, params, callback) {\r\n  var isArray = require('isarray');\r\n  var usage = 'Usage: index.updateApiKey(key, arrayOfAcls[, params, callback])';\r\n\r\n  if (!isArray(acls)) {\r\n    throw new Error(usage);\r\n  }\r\n\r\n  if (arguments.length === 2 || typeof params === 'function') {\r\n    callback = params;\r\n    params = null;\r\n  }\r\n\r\n  var putObj = {\r\n    acl: acls\r\n  };\r\n\r\n  if (params) {\r\n    putObj.validity = params.validity;\r\n    putObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;\r\n    putObj.maxHitsPerQuery = params.maxHitsPerQuery;\r\n    putObj.description = params.description;\r\n\r\n    if (params.queryParameters) {\r\n      putObj.queryParameters = this.as._getSearchParams(params.queryParameters, '');\r\n    }\r\n\r\n    putObj.referers = params.referers;\r\n  }\r\n\r\n  return this.as._jsonRequest({\r\n    method: 'PUT',\r\n    url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/keys/' + key,\r\n    body: putObj,\r\n    hostType: 'write',\r\n    callback: callback\r\n  });\r\n}, deprecatedMessage('index.updateApiKey()', 'client.updateApiKey()'));\r\n"]},"metadata":{},"sourceType":"script"}